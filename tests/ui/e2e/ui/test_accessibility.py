import time

import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys


class TestAccessibility:
    # ‚ùå –£–î–ê–õ–ò–¢–¨ —ç—Ç—É —Ñ–∏–∫—Å—Ç—É—Ä—É - –æ–Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å conftest.py
    # @pytest.fixture(scope="function")
    # def driver(self):
    #     driver = webdriver.Chrome()
    #     driver.maximize_window()
    #     yield driver
    #     driver.quit()

    def test_keyboard_navigation(self, ui_client, base_url):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        print("\nüîç [TEST] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–ª–Ω—ã–º URL
        print("üìñ [TEST] –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        ui_client.get(f"{base_url}/")

        # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        time.sleep(2)
        print("‚úÖ [TEST] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ù–∞–π–¥–µ–º –≤—Å–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        body = ui_client.find_element(By.TAG_NAME, "body")

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Ñ–æ–∫—É—Å –Ω–∞ body
        body.send_keys(Keys.TAB)

        # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–±—É–ª—è—Ü–∏–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        expected_tab_sequence = [
            # –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ç–∞–±—É–ª—è—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–µ–º —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥
            ("input", "command-filter"),
            # –¥–µ–≤—è—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç - –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π
            ("button", "check-ai-models-btn"),
            # –¥–µ—Å—è—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç - –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
            ("button", "update-models-btn"),
        ]

        # –ü—Ä–æ–π–¥–µ–º—Å—è –ø–æ –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø–µ—Ä–≤—ã–π (–æ–Ω –±–µ–∑ ID)
        active_element = ui_client.switch_to.active_element
        active_element.send_keys(Keys.TAB)  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ command-filter

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º command-filter
        active_element = ui_client.switch_to.active_element
        assert active_element.tag_name == expected_tab_sequence[0][0]
        assert active_element.get_attribute("id") == expected_tab_sequence[0][1]

        # –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é check-ai-models-btn –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–±—É–ª—è—Ü–∏–∏
        focusable_elements = ui_client.find_elements(
            By.CSS_SELECTOR, "input:not([disabled]), button:not([disabled]), a[href]"
        )
        check_btn_index = None
        for i, el in enumerate(focusable_elements):
            if el.get_attribute("id") == "check-ai-models-btn":
                check_btn_index = i
                break

        assert check_btn_index is not None, "–≠–ª–µ–º–µ–Ω—Ç check-ai-models-btn –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        active_element = ui_client.switch_to.active_element
        current_element_id = active_element.get_attribute("id")

        # –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ
        current_index = None
        for i, el in enumerate(focusable_elements):
            if el.get_attribute("id") == current_element_id and current_element_id:
                current_index = i
                break

        if current_index is None:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –Ω–∞–π–¥–µ–º command-filter –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ç–æ—á–∫—É
            current_index = 6  # command-filter –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 6

        # –î–µ–ª–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±—É–ª—è—Ü–∏–π
        tabs_needed = check_btn_index - current_index
        for i in range(tabs_needed):
            active_element.send_keys(Keys.TAB)
            active_element = ui_client.switch_to.active_element

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º check-ai-models-btn
        assert active_element.tag_name == expected_tab_sequence[1][0]
        assert active_element.get_attribute("id") == expected_tab_sequence[1][1]

        # –ü—Ä–æ—Å—Ç–æ –æ–¥–∏–Ω TAB, —Ç–∞–∫ –∫–∞–∫ update-models-btn –∏–¥–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ check-ai-models-btn
        active_element.send_keys(Keys.TAB)
        active_element = ui_client.switch_to.active_element

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º update-models-btn
        assert active_element.tag_name == expected_tab_sequence[2][0]
        assert active_element.get_attribute("id") == expected_tab_sequence[2][1]

        # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω
        assert True

    def test_aria_attributes(self, ui_client, base_url):
        """–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ARIA –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        ui_client.get(f"{base_url}/")

        # –ù–∞–π–¥–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å ID, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        important_elements = [
            "user-input",  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "interrupt-btn",  # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            "command-filter",  # –§–∏–ª—å—Ç—Ä –∫–æ–º–∞–Ω–¥
            "check-ai-models-btn",  # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π
            "update-models-btn",  # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
            "search-query",  # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
            "refresh-history",  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            "export-history",  # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
            "clear-history-display",  # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        ]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö ARIA-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
        for element_id in important_elements:
            try:
                element = ui_client.find_element(By.ID, element_id)
                print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {element_id} (—Ç–µ–≥: {element.tag_name}):")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if element.tag_name == "button":
                    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ aria-label –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
                    aria_label = element.get_attribute("aria-label")
                    button_text = element.text.strip()

                    print(f"  aria-label: {aria_label}")
                    print(f"  button text: {button_text}")

                    assert (
                        aria_label or button_text
                    ), f"–ö–Ω–æ–ø–∫–∞ {element_id} –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ aria-label"

                elif element.tag_name == "input":
                    # –ï—Å–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ placeholder, label –∏–ª–∏ aria-label
                    placeholder = element.get_attribute("placeholder")
                    aria_label = element.get_attribute("aria-label")
                    aria_labelledby = element.get_attribute("aria-labelledby")

                    print(f"  placeholder: {placeholder}")
                    print(f"  aria-label: {aria_label}")
                    print(f"  aria-labelledby: {aria_labelledby}")

                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω aria-labelledby, –Ω–∞–π–¥–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    if aria_labelledby:
                        try:
                            label_element = ui_client.find_element(By.ID, aria_labelledby)
                            print(f"  label text: {label_element.text}")
                        except Exception:
                            print(
                                "  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Å—Å—ã–ª–∞–µ—Ç—Å—è aria-labelledby"
                            )

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    assert any([placeholder, aria_label, aria_labelledby]), (
                        f"–ü–æ–ª–µ –≤–≤–æ–¥–∞ {element_id} –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ placeholder, –Ω–∏ aria-label, –Ω–∏"
                        " aria-labelledby"
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ ARIA-–∞—Ç—Ä–∏–±—É—Ç—ã
                aria_role = element.get_attribute("role")
                aria_expanded = element.get_attribute("aria-expanded")
                aria_hidden = element.get_attribute("aria-hidden")

                print(f"  role: {aria_role}")
                print(f"  aria-expanded: {aria_expanded}")
                print(f"  aria-hidden: {aria_hidden}")

            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç {element_id}: {e}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å role="dialog" –∏–ª–∏ role="alert"
        dialog_elements = ui_client.find_elements(
            By.CSS_SELECTOR, "[role='dialog'], [role='alert']"
        )
        print(f"\n–ù–∞–π–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω –∏ –∞–ª–µ—Ä—Ç–æ–≤: {len(dialog_elements)}")
        for i, dialog in enumerate(dialog_elements):
            dialog_id = dialog.get_attribute("id") or f"–±–µ–∑ ID #{i + 1}"
            aria_labelledby = dialog.get_attribute("aria-labelledby")
            aria_label = dialog.get_attribute("aria-label")

            print(f"–î–∏–∞–ª–æ–≥ {dialog_id}:")
            print(f"  aria-labelledby: {aria_labelledby}")
            print(f"  aria-label: {aria_label}")

            assert (
                aria_labelledby or aria_label
            ), f"–î–∏–∞–ª–æ–≥ {dialog_id} –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ aria-labelledby, –Ω–∏ aria-label"

        # –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç ARIA —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        # –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–≤–µ–¥–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        assert True, "–¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –∞–Ω–∞–ª–∏–∑–∞ ARIA-–∞—Ç—Ä–∏–±—É—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏."

    def test_color_contrast(self, ui_client, base_url):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        # –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        print(f"\nüîç [DEBUG] base_url = {base_url}")
        print(f"üîç [DEBUG] ui_client.base_url = {ui_client.base_url}")
        print(f"üîç [DEBUG] current_url before get = {ui_client.get_current_url()}")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        ui_client.get(f"{base_url}/")

        # –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
        important_elements = [
            # –≠–ª–µ–º–µ–Ω—Ç—ã —Å ID, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–Ω–∞–µ–º
            "user-input",  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "interrupt-btn",  # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            "command-filter",  # –§–∏–ª—å—Ç—Ä –∫–æ–º–∞–Ω–¥
            "check-ai-models-btn",  # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π
            "update-models-btn",  # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
            "search-query",  # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
            "refresh-history",  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            "export-history",  # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
            "clear-history-display",  # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            # –í–∞–∂–Ω—ã–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            "//button",  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ (XPath)
            "//input",  # –í—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ (XPath)
            "//a",  # –í—Å–µ —Å—Å—ã–ª–∫–∏ (XPath)
        ]

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
        def calculate_contrast_ratio(fg_color, bg_color):
            """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ WCAG."""

            def get_luminance(color):
                # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ RGB/RGBA —Ü–≤–µ—Ç–æ–≤
                if color.startswith("rgb("):
                    # –£–±–∏—Ä–∞–µ–º 'rgb(' –∏ ')' –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
                    rgb_values = color[4:-1].split(",")
                    r = int(rgb_values[0].strip()) / 255.0
                    g = int(rgb_values[1].strip()) / 255.0
                    b = int(rgb_values[2].strip()) / 255.0
                elif color.startswith("rgba("):
                    # –£–±–∏—Ä–∞–µ–º 'rgba(' –∏ ')' –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
                    rgba_values = color[5:-1].split(",")
                    r = int(rgba_values[0].strip()) / 255.0
                    g = int(rgba_values[1].strip()) / 255.0
                    b = int(rgba_values[2].strip()) / 255.0
                    # alpha = float(rgba_values[3].strip())  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
                elif color.startswith("#"):
                    r = int(color[1:3], 16) / 255.0
                    g = int(color[3:5], 16) / 255.0
                    b = int(color[5:7], 16) / 255.0
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö –∏–º—ë–Ω –∏–ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
                    color_map = {
                        "transparent": (0, 0, 0),
                        "white": (1, 1, 1),
                        "black": (0, 0, 0),
                        "red": (1, 0, 0),
                        "green": (0, 1, 0),
                        "blue": (0, 0, 1),
                    }
                    r, g, b = color_map.get(color.lower(), (0.5, 0.5, 0.5))

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π RGB –≤ sRGB
                r = r / 12.92 if r <= 0.03928 else ((r + 0.055) / 1.055) ** 2.4
                g = g / 12.92 if g <= 0.03928 else ((g + 0.055) / 1.055) ** 2.4
                b = b / 12.92 if b <= 0.03928 else ((b + 0.055) / 1.055) ** 2.4

                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å
                return 0.2126 * r + 0.7152 * g + 0.0722 * b

            # –ü–æ–ª—É—á–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –¥–ª—è –æ–±–æ–∏—Ö —Ü–≤–µ—Ç–æ–≤
            luminance1 = get_luminance(fg_color)
            luminance2 = get_luminance(bg_color)

            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
            if luminance1 > luminance2:
                return (luminance1 + 0.05) / (luminance2 + 0.05)
            else:
                return (luminance2 + 0.05) / (luminance1 + 0.05)

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è WCAG –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
        min_contrast_aa = 4.5  # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É—Ä–æ–≤–µ–Ω—å AA)
        min_contrast_aaa = 7.0  # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É—Ä–æ–≤–µ–Ω—å AAA)

        results = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        for element_id in important_elements:
            try:
                # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                if element_id.startswith("//"):
                    elements = ui_client.find_elements(By.XPATH, element_id)
                    if not elements:
                        print(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ XPath: {element_id}")
                        continue

                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
                    for i, element in enumerate(elements[:3]):
                        self._check_element_contrast(
                            element,
                            f"{element_id}[{i}]",
                            calculate_contrast_ratio,
                            results,
                            min_contrast_aa,
                            min_contrast_aaa,
                        )
                else:
                    element = ui_client.find_element(By.ID, element_id)
                    self._check_element_contrast(
                        element,
                        element_id,
                        calculate_contrast_ratio,
                        results,
                        min_contrast_aa,
                        min_contrast_aaa,
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {element_id}: {e}")

        # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏:")
        print("=" * 50)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        pass_count = sum(1 for r in results if r["passes_aa"])
        fail_count = len(results) - pass_count
        aaa_count = sum(1 for r in results if r["passes_aaa"])

        if results:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ results –ø—É—Å—Ç–æ–π
            print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(results)}")
            print(
                f"–ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ä–æ–≤–Ω—è AA (–∫–æ–Ω—Ç—Ä–∞—Å—Ç >= {min_contrast_aa}):"
                f" {pass_count} ({pass_count / len(results) * 100:.1f}%)"
            )
            print(
                f"–ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ä–æ–≤–Ω—è AAA (–∫–æ–Ω—Ç—Ä–∞—Å—Ç >= {min_contrast_aaa}):"
                f" {aaa_count} ({aaa_count / len(results) * 100:.1f}%)"
            )
            print(f"–ù–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {fail_count} ({fail_count / len(results) * 100:.1f}%)")

            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            for result in results:
                status = "‚úÖ" if result["passes_aa"] else "‚ùå"
                aaa_status = "(AAA)" if result["passes_aaa"] else ""
                print(
                    f"{status} {aaa_status} {result['element_id']}: –∫–æ–Ω—Ç—Ä–∞—Å—Ç"
                    f" {result['contrast_ratio']:.2f} - {result['fg_color']} –Ω–∞"
                    f" {result['bg_color']}"
                )
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç.")

        # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert (
            True
        ), "–¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏."

    def _check_element_contrast(
        self,
        element,
        element_id,
        calculate_contrast_ratio,
        results,
        min_contrast_aa,
        min_contrast_aaa,
    ):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ JavaScript
        fg_color = element.value_of_css_property("color")
        bg_color = element.value_of_css_property("background-color")

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        contrast_ratio = calculate_contrast_ratio(fg_color, bg_color)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–∏ AA –∏ AAA
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        passes_aa = contrast_ratio >= min_contrast_aa
        passes_aaa = contrast_ratio >= min_contrast_aaa

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results.append(
            {
                "element_id": element_id,
                "tag_name": element.tag_name,
                "fg_color": fg_color,
                "bg_color": bg_color,
                "contrast_ratio": contrast_ratio,
                "passes_aa": passes_aa,
                "passes_aaa": passes_aaa,
            }
        )

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        status = "PASS" if passes_aa else "FAIL"
        print(
            f"–≠–ª–µ–º–µ–Ω—Ç {element_id} ({element.tag_name}): –∫–æ–Ω—Ç—Ä–∞—Å—Ç {contrast_ratio:.2f} - {status}"
        )

    def test_focus_indicators(self, ui_client, base_url):
        """–¢–µ—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        print("\nüîç [TEST] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ñ–æ–∫—É—Å–∞...")

        print("üìñ [TEST] –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        ui_client.get(base_url)
        time.sleep(2)
        print("‚úÖ [TEST] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        print("üîç [TEST] –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞...")
        input_field = ui_client.find_element(By.ID, "user-input")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Ç–∏–ª–∏
        initial_outline = ui_client.execute_script(
            "return window.getComputedStyle(arguments[0]).outline", input_field
        )

        # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        input_field.click()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏ –≤ —Ñ–æ–∫—É—Å–µ
        focus_outline = ui_client.execute_script(
            "return window.getComputedStyle(arguments[0]).outline", input_field
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
        assert initial_outline != focus_outline or focus_outline != "none"

    def test_screen_reader_compatibility(self, ui_client, base_url):
        """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —á—Ç–µ–Ω–∏—è —Å —ç–∫—Ä–∞–Ω–∞"""
        ui_client.get(base_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = ui_client.find_elements(By.TAG_NAME, "img")
        for img in images:
            assert img.get_attribute("alt") is not None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_fields = ui_client.find_elements(By.TAG_NAME, "input")
        for field in input_fields:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–±–æ label, –ª–∏–±–æ aria-label, –ª–∏–±–æ placeholder
            field_id = field.get_attribute("id")
            if field_id:
                # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π label
                labels = ui_client.find_elements(By.CSS_SELECTOR, f"label[for='{field_id}']")
                has_label = len(labels) > 0
            else:
                has_label = False

            has_aria_label = field.get_attribute("aria-label") is not None
            has_placeholder = field.get_attribute("placeholder") is not None

            # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—è
            assert has_label or has_aria_label or has_placeholder

    def test_heading_structure(self, ui_client, base_url):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        ui_client.get(base_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ h1
        h1_elements = ui_client.find_elements(By.TAG_NAME, "h1")
        assert len(h1_elements) == 1  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω h1 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–¥—É—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤)
        headings = []
        for i in range(1, 7):  # h1 –¥–æ h6
            elements = ui_client.find_elements(By.TAG_NAME, f"h{i}")
            headings.extend(elements)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–¥—É—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        heading_levels = [int(h.tag_name[1]) for h in headings]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ —É—Ä–æ–≤–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, h1 -> h3 –±–µ–∑ h2)
        for i in range(len(heading_levels) - 1):
            if heading_levels[i + 1] > heading_levels[i]:
                assert heading_levels[i + 1] - heading_levels[i] <= 1

    def test_language_attribute(self, ui_client, base_url):
        """–¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ —è–∑—ã–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        ui_client.get(base_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ lang –≤ —Ç–µ–≥–µ html
        html = ui_client.find_element(By.TAG_NAME, "html")
        lang = html.get_attribute("lang")

        assert lang is not None and lang != ""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∑—ã–∫ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (ru –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
        assert lang.startswith("ru")
