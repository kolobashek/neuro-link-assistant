"""–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""

import os
import signal
import subprocess
import sys
import time
from dataclasses import dataclass, field
from enum import Enum
from pathlib import Path
from typing import Any, Dict, List, Optional

import requests

# –ù–û–í–´–ô –ò–ú–ü–û–†–¢
from scripts.network.port_manager import PortConfig, PortManager


class AppMode(Enum):
    """–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    PRODUCTION = "production"
    TESTING = "testing"
    DEVELOPMENT = "development"
    EXTERNAL = "external"


@dataclass
class AppConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    port: int = 5000  # ‚Üê –ò–∑–º–µ–Ω–∏–ª–∏ —Å 5001 –Ω–∞ 5000
    host: str = "127.0.0.1"
    timeout: int = 45
    mode: AppMode = AppMode.TESTING
    debug: bool = False
    auto_cleanup: bool = True
    health_endpoints: List[str] = field(default_factory=lambda: ["/", "/health"])

    # –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PortManager
    force_kill: bool = False
    safe_pids: List[int] = field(default_factory=lambda: [0, 4])

    def get_port_config(self) -> PortConfig:
        """–°–æ–∑–¥–∞–µ—Ç PortConfig –∏–∑ AppConfig"""
        return PortConfig(
            port=self.port,
            host=self.host,
            timeout=self.timeout,
            force_kill=self.force_kill,
            safe_pids=self.safe_pids,
        )

    def __post_init__(self):
        if self.health_endpoints is None:
            self.health_endpoints = ["/", "/health"]


class AppManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""

    def __init__(self, config: Optional[AppConfig] = None):
        self.config = config or AppConfig()
        self.app_url = f"http://{self.config.host}:{self.config.port}"
        self.process: Optional[subprocess.Popen] = None
        self.app_dir = Path(__file__).parent.parent.parent
        self._start_time: Optional[float] = None
        self._metrics: Dict[str, Any] = {}

        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º PortManager
        self.port_manager = PortManager(self.config.get_port_config())

    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ===

    def start_app(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        self._start_time = time.perf_counter()
        self._log(
            "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", {"mode": self.config.mode.value, "port": self.config.port}
        )

        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self.is_app_running():
            elapsed = time.perf_counter() - self._start_time
            self._log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", {"check_time": f"{elapsed:.3f}s"})
            return True

        # –†–µ–∂–∏–º –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self.config.mode == AppMode.EXTERNAL:
            return self._handle_external_app()

        # –ó–ê–ú–ï–ù–Ø–ï–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º PortManager –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if self.config.auto_cleanup and self.port_manager.is_port_in_use():
            self._log("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞", {"port": self.config.port})

            # –ù–û–í–û–ï: –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
            if not self.port_manager.smart_cleanup():
                self._log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç, –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π...")
                try:
                    new_port = self.port_manager.find_free_port()
                    self._log("‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç", {"new_port": new_port})

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    self.config.port = new_port
                    self.port_manager = PortManager(self.config.get_port_config())
                    self.app_url = f"http://{self.config.host}:{self.config.port}"

                except Exception as e:
                    self._log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç", {"error": str(e)})
                    return False

        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            if not self._launch_subprocess():
                return False

            # –ó–ê–ú–ï–ù–Ø–ï–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º PortManager –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
            if not self.port_manager.wait_for_port_free(timeout=2):  # –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

            if not self._wait_for_ready():
                self.stop_app()
                return False

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if not self.health_check():
                self._log("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
                self.stop_app()
                return False

            total_time = time.perf_counter() - self._start_time
            self._log(
                "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ",
                {
                    "total_time": f"{total_time:.3f}s",
                    "url": self.app_url,
                    "pid": self.process.pid if self.process else None,
                },
            )
            return True

        except Exception as e:
            self._log("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", {"error": str(e)})
            self.stop_app()
            return False

    def stop_app(self) -> bool:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        stop_start = time.perf_counter()
        self._log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        # –í–Ω–µ—à–Ω–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if self.config.mode == AppMode.EXTERNAL:
            self._log("‚ÑπÔ∏è –í–Ω–µ—à–Ω–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å")
            return True

        success = True

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if self.process and self.process.poll() is None:
            try:
                self._log("üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞", {"pid": self.process.pid})

                # –ú—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                if os.name == "nt":
                    self.process.send_signal(signal.CTRL_BREAK_EVENT)
                else:
                    self.process.terminate()

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    self.process.wait(timeout=10)
                    self._log("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except subprocess.TimeoutExpired:
                    self._log("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                    self.process.kill()
                    self.process.wait()

            except Exception as e:
                self._log("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞", {"error": str(e)})
                success = False

        self.process = None

        # –ó–ê–ú–ï–ù–Ø–ï–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º PortManager –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        if self.config.auto_cleanup:
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            if self.port_manager.is_port_in_use():
                self._log("üßπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞")
                self.port_manager.smart_cleanup()

        stop_time = time.perf_counter() - stop_start
        self._log("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", {"time": f"{stop_time:.3f}s"})
        return success

    def restart_app(self) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self._log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        self.stop_app()
        time.sleep(2)
        return self.start_app()

    # === –ü–†–û–í–ï–†–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø ===

    def is_app_running(self) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            response = requests.get(self.app_url, timeout=2)
            return 200 <= response.status_code < 500
        except:
            return False

    def health_check(self) -> bool:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.is_app_running():
            return False

        try:
            for endpoint in self.config.health_endpoints:
                response = requests.get(f"{self.app_url}{endpoint}", timeout=5)
                if response.status_code >= 500:
                    return False
            return True
        except:
            return False

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return {
            "running": self.is_app_running(),
            "healthy": self.health_check(),
            "port_occupied": self.port_manager.is_port_in_use(),  # –ó–ê–ú–ï–ù–Ø–ï–ú
            "process_alive": self.process and self.process.poll() is None,
            "config": {
                "port": self.config.port,
                "mode": self.config.mode.value,
                "url": self.app_url,
            },
            "metrics": self._metrics,
        }

    # === –í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–¢–û–î–´ ===

    def _handle_external_app(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_app_running():
            self._log("‚úÖ –í–Ω–µ—à–Ω–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
            return True
        else:
            self._log("‚ùå –í–Ω–µ—à–Ω–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return False

    def _launch_subprocess(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç subprocess –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            launch_start = time.perf_counter()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è subprocess
            startup_info = None
            creation_flags = 0

            if os.name == "nt":  # Windows
                startup_info = subprocess.STARTUPINFO()
                startup_info.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                startup_info.wShowWindow = subprocess.SW_HIDE
                creation_flags = subprocess.CREATE_NEW_PROCESS_GROUP

            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env.update(
                {
                    "FLASK_ENV": self.config.mode.value,
                    "TESTING": "true" if self.config.mode == AppMode.TESTING else "false",
                    "PYTHONIOENCODING": "utf-8",
                    "PYTHONPATH": str(self.app_dir),
                }
            )

            # –ó–∞–ø—É—Å–∫
            self.process = subprocess.Popen(
                [sys.executable, "app.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                startupinfo=startup_info,
                creationflags=creation_flags,
                env=env,
                encoding="utf-8",
                errors="replace",
                cwd=self.app_dir,
            )

            launch_time = time.perf_counter() - launch_start
            self._log(
                "‚ö° –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω",
                {"pid": self.process.pid, "launch_time": f"{launch_time:.3f}s"},
            )
            return True

        except Exception as e:
            self._log("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ subprocess", {"error": str(e)})
            return False

    def _wait_for_ready(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        wait_start = time.perf_counter()
        self._log("‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏", {"timeout": f"{self.config.timeout}s"})

        while (time.perf_counter() - wait_start) < self.config.timeout:
            if self.is_app_running():
                wait_time = time.perf_counter() - wait_start
                self._log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ", {"wait_time": f"{wait_time:.3f}s"})
                return True
            time.sleep(0.5)

        wait_time = time.perf_counter() - wait_start
        self._log("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è", {"wait_time": f"{wait_time:.3f}s"})
        return False

    def _log(self, message: str, data: Optional[Dict[str, Any]] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        if self.config.debug:
            timestamp = time.strftime("%H:%M:%S")
            log_data = f" | {data}" if data else ""
            print(f"[{timestamp}] [APP] {message}{log_data}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if data:
            self._metrics.update(data)


# === –§–ê–ë–†–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===


def create_test_manager(port: int = 5000, debug: bool = True) -> AppManager:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    config = AppConfig(
        port=port,
        mode=AppMode.TESTING,
        debug=debug,
        timeout=45,
        auto_cleanup=True,
        force_kill=True,  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    )
    return AppManager(config)


def create_production_manager(port: int = 5000, debug: bool = False) -> AppManager:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    config = AppConfig(
        port=port, mode=AppMode.PRODUCTION, debug=debug, timeout=30, auto_cleanup=False
    )
    return AppManager(config)


def create_external_manager(port: int = 5000) -> AppManager:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    config = AppConfig(port=port, mode=AppMode.EXTERNAL, debug=False, timeout=5, auto_cleanup=False)
    return AppManager(config)


# === CLI –£–¢–ò–õ–ò–¢–ê ===


def main():
    """CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    import argparse

    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
    parser.add_argument("action", choices=["start", "stop", "restart", "status"])
    parser.add_argument("--port", type=int, default=5000, help="–ü–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    parser.add_argument(
        "--mode",
        choices=["testing", "production", "external"],
        default="testing",
        help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
    )
    parser.add_argument("--debug", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É")
    parser.add_argument("--timeout", type=int, default=45, help="–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞")

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = AppConfig(
        port=args.port, mode=AppMode(args.mode), debug=args.debug, timeout=args.timeout
    )

    manager = AppManager(config)

    if args.action == "start":
        success = manager.start_app()
        sys.exit(0 if success else 1)
    elif args.action == "stop":
        manager.stop_app()
    elif args.action == "restart":
        success = manager.restart_app()
        sys.exit(0 if success else 1)
    elif args.action == "status":
        status = manager.get_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        for key, value in status.items():
            if isinstance(value, dict):
                print(f"  {key}:")
                for k, v in value.items():
                    print(f"    {k}: {v}")
            else:
                icon = "‚úÖ" if value else "‚ùå" if isinstance(value, bool) else "‚ÑπÔ∏è"
                print(f"  {icon} {key}: {value}")

        sys.exit(0 if status["running"] else 1)


if __name__ == "__main__":
    main()
