"""
üõ†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∏ –ª–æ–≥–∏ - –¥–æ–º–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
"""

import datetime
import logging
import os
import platform

import psutil
from flask import Blueprint, jsonify, make_response, request

from config import Config

system_bp = Blueprint("system_api", __name__)
logger = logging.getLogger("neuro_assistant")


@system_bp.route("/history", methods=["GET"])
def get_history():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    try:
        if not os.path.exists(Config.SUMMARY_LOG_FILE):
            return jsonify({"history": [], "count": 0, "message": "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞"})

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        encodings = ["utf-8", "cp1251", "latin-1"]
        summary_content = None

        for encoding in encodings:
            try:
                with open(Config.SUMMARY_LOG_FILE, "r", encoding=encoding) as f:
                    summary_content = f.read()
                break
            except UnicodeDecodeError:
                continue

        if summary_content is None:
            with open(Config.SUMMARY_LOG_FILE, "rb") as f:
                binary_content = f.read()
                summary_content = binary_content.decode("utf-8", errors="ignore")

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        entries = []
        current_entry = {}
        lines = summary_content.split("\n")

        for line in lines:
            if line.startswith("20"):  # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (—Å –¥–∞—Ç—ã)
                if current_entry:
                    entries.append(current_entry)
                    current_entry = {}
                parts = line.split(" - ", 1)
                if len(parts) > 1:
                    current_entry["timestamp"] = parts[0]
            elif line.startswith("–ö–æ–º–∞–Ω–¥–∞:"):
                current_entry["command"] = line.replace("–ö–æ–º–∞–Ω–¥–∞:", "").strip()
            elif line.startswith("–°—Ç–∞—Ç—É—Å:"):
                current_entry["status"] = line.replace("–°—Ç–∞—Ç—É—Å:", "").strip()
            elif line.startswith("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:"):
                current_entry["completion"] = line.replace("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:", "").strip()
            elif line.startswith("–¢–æ—á–Ω–æ—Å—Ç—å:"):
                current_entry["accuracy"] = line.replace("–¢–æ—á–Ω–æ—Å—Ç—å:", "").strip()

        if current_entry:
            entries.append(current_entry)

        return jsonify({"history": entries, "count": len(entries)})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}", "history": []})


@system_bp.route("/detailed_history/<command_timestamp>", methods=["GET"])
def get_detailed_history(command_timestamp):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        if not os.path.exists(Config.DETAILED_LOG_FILE):
            return jsonify(
                {
                    "command_timestamp": command_timestamp,
                    "details": [],
                    "message": "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞",
                }
            )

        with open(Config.DETAILED_LOG_FILE, "r", encoding="utf-8") as f:
            log_content = f.read()

        command_details = []
        command_found = False

        lines = log_content.split("\n")
        for line in lines:
            if command_timestamp in line and "–î–µ—Ç–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã" in line:
                command_found = True
                command_details.append(line)
            elif command_found:
                command_details.append(line)
                if line.startswith("-" * 50):
                    break

        return jsonify({"command_timestamp": command_timestamp, "details": command_details})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}", "details": []})


@system_bp.route("/logs", methods=["GET"])
def get_system_logs():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)"""
    developer_mode = request.args.get("developer_mode") == "true"
    developer_key = request.args.get("developer_key", "")

    if not developer_mode or developer_key != Config.DEVELOPER_KEY:
        return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞."}), 403

    try:
        if not os.path.exists(Config.SYSTEM_LOG_FILE):
            return jsonify({"logs": [], "message": "–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ –ø—É—Å—Ç—ã"})

        max_lines = int(request.args.get("max_lines", 100))

        with open(Config.SYSTEM_LOG_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
            last_lines = lines[-max_lines:] if len(lines) > max_lines else lines

        return jsonify({"logs": last_lines, "count": len(last_lines), "total_lines": len(lines)})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤: {str(e)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤: {str(e)}", "logs": []}), 500


@system_bp.route("/export_history", methods=["GET"])
def export_history_logs():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥ –≤ —Ñ–∞–π–ª"""
    try:
        if not os.path.exists(Config.SUMMARY_LOG_FILE):
            return jsonify({"error": "–§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

        with open(Config.SUMMARY_LOG_FILE, "r", encoding="utf-8") as f:
            content = f.read()

        response = make_response(content)
        response.headers["Content-Type"] = "text/plain"
        response.headers["Content-Disposition"] = "attachment; filename=command_history.txt"

        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}"}), 500


@system_bp.route("/export_detailed", methods=["GET"])
def export_detailed_logs():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª"""
    try:
        if not os.path.exists(Config.DETAILED_LOG_FILE):
            return jsonify({"error": "–§–∞–π–ª –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

        with open(Config.DETAILED_LOG_FILE, "r", encoding="utf-8") as f:
            content = f.read()

        response = make_response(content)
        response.headers["Content-Type"] = "text/plain"
        response.headers["Content-Disposition"] = "attachment; filename=detailed_logs.txt"

        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤: {str(e)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤: {str(e)}"}), 500


@system_bp.route("/maintenance/ensure_logs", methods=["POST"])
def ensure_log_files_exist_route():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    try:
        from utils.log_maintenance import ensure_log_files_exist

        ensure_log_files_exist()
        return jsonify({"success": True, "message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {str(e)}")
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {str(e)}"})


@system_bp.route("/maintenance/clean_logs", methods=["POST"])
def clean_old_logs_route():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤"""
    try:
        from utils.log_maintenance import clean_old_logs

        max_age_days = request.json.get("max_age_days", 30) if request.json else 30
        clean_old_logs(max_age_days)
        return jsonify({"success": True, "message": f"–£–¥–∞–ª–µ–Ω—ã –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ {max_age_days} –¥–Ω–µ–π"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {str(e)}")
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {str(e)}"})


@system_bp.route("/monitor", methods=["GET"])
def get_system_monitor():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    try:
        system_info = {
            "os": {
                "name": platform.system(),
                "version": platform.version(),
                "machine": platform.machine(),
                "processor": platform.processor(),
            },
            "cpu": {
                "percent": psutil.cpu_percent(interval=1),
                "count": psutil.cpu_count(),
                "freq": psutil.cpu_freq()._asdict() if psutil.cpu_freq() else {},
            },
            "memory": {
                "total": psutil.virtual_memory().total,
                "available": psutil.virtual_memory().available,
                "percent": psutil.virtual_memory().percent,
                "used": psutil.virtual_memory().used,
            },
            "disk": [],
            "network": psutil.net_io_counters()._asdict(),
            "processes": len(psutil.pids()),
        }

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö
        for partition in psutil.disk_partitions():
            try:
                partition_usage = psutil.disk_usage(partition.mountpoint)
                system_info["disk"].append(
                    {
                        "device": partition.device,
                        "mountpoint": partition.mountpoint,
                        "fstype": partition.fstype,
                        "total": partition_usage.total,
                        "used": partition_usage.used,
                        "free": partition_usage.free,
                        "percent": (partition_usage.used / partition_usage.total) * 100,
                    }
                )
            except PermissionError:
                continue

        return jsonify(
            {
                "success": True,
                "system": system_info,
                "timestamp": datetime.datetime.now().isoformat(),
            }
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
        return (
            jsonify(
                {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"}
            ),
            500,
        )


@system_bp.route("/status", methods=["GET"])
def get_dashboard_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        from services.ai_service import get_ai_models

        models_data = get_ai_models()
        current_model = None

        if models_data.get("success") and models_data.get("models"):
            for model in models_data["models"]:
                if model.get("is_active"):
                    current_model = {
                        "name": model.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"),
                        "status": model.get("status", "unavailable"),
                        "provider": model.get("provider", ""),
                    }
                    break

        if not current_model:
            current_model = {"name": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞", "status": "unavailable", "provider": ""}

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        system_metrics = {
            "cpu": round(psutil.cpu_percent(interval=1), 1),
            "ram": round(psutil.virtual_memory().percent, 1),
            "disk": (
                round(psutil.disk_usage("/").percent, 1)
                if hasattr(psutil.disk_usage("/"), "percent")
                else 0
            ),
        }

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        last_activity = None
        try:
            if os.path.exists(Config.SUMMARY_LOG_FILE):
                with open(Config.SUMMARY_LOG_FILE, "r", encoding="utf-8", errors="ignore") as f:
                    lines = f.readlines()
                    if lines:
                        for line in reversed(lines[-10:]):
                            if line.startswith("20"):
                                parts = line.split(" - ", 1)
                                if len(parts) > 1:
                                    last_activity = {
                                        "time": parts[0],
                                        "result": "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                                        "status": "success",
                                    }
                                    break
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

        if not last_activity:
            last_activity = {"time": "", "result": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "status": "unknown"}

        return jsonify(
            {
                "success": True,
                "model": current_model,
                "system": system_metrics,
                "lastActivity": last_activity,
                "timestamp": datetime.datetime.now().isoformat(),
            }
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ dashboard: {str(e)}")
        return (
            jsonify(
                {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}",
                    "model": {"name": "–û—à–∏–±–∫–∞", "status": "error"},
                    "system": {"cpu": 0, "ram": 0},
                    "lastActivity": {"time": "", "result": "–û—à–∏–±–∫–∞", "status": "error"},
                }
            ),
            500,
        )


@system_bp.route("/monitor/toggle", methods=["POST"])
def toggle_system_monitoring():
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        from services.system_monitor_service import SystemMonitorService

        data = request.get_json()
        enabled = data.get("enabled", True)

        service = SystemMonitorService()
        result = service.toggle_monitoring(enabled)

        return jsonify(
            {
                "success": True,
                "monitoring_enabled": result,
                "message": f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {'–≤–∫–ª—é—á–µ–Ω' if result else '–≤—ã–∫–ª—é—á–µ–Ω'}",
            }
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
        return (
            jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}"}),
            500,
        )
