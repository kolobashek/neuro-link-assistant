"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å URL –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
"""

import time

import pytest
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait


class TestRouting:
    """–¢–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å URL."""

    def test_model_selection_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏."""
        # ‚úÖ –¢–µ–ø–µ—Ä—å URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        ui_client.get(f"{base_url}/models")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".ai-model-item"))
        )

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        model_cards = ui_client.find_elements(By.CSS_SELECTOR, ".ai-model-item")

        if not model_cards:
            pytest.skip("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        model_card = model_cards[0]
        model_id = model_card.get_attribute("data-model-id")

        if not model_id:
            model_id = "default"  # –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –º–æ–¥–µ–ª–∏
        model_card.click()

        # –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL
        WebDriverWait(ui_client, 10).until(
            lambda driver: f"models/{model_id}" in driver.current_url
            or "model" in driver.current_url
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏ –∏–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–¥–µ–ª–∏
        assert any(
            term in ui_client.current_url for term in [f"models/{model_id}", "model", model_id]
        ), "URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–¥–µ–ª–∏"

    def test_history_item_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç—É –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏
        ui_client.get(f"{base_url}/history")

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüîç [DEBUG] Current URL: {ui_client.current_url}")
        print(f"üîç [DEBUG] Page title: {ui_client.title}")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏
        try:
            WebDriverWait(ui_client, 15).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "#history-list"))
            )
            print("‚úÖ [DEBUG] –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå [DEBUG] –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å: {e}")
            pytest.skip("–¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        history_items = ui_client.find_elements(By.CSS_SELECTOR, ".history-item")
        print(f"üî¢ [DEBUG] Found .history-item elements: {len(history_items)}")

        if not history_items:
            pytest.skip("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –¥—Ä—É–≥–æ–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä")

        # –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        history_item = history_items[0]
        item_id = history_item.get_attribute("data-history-id")
        item_text = history_item.text
        item_tag = history_item.tag_name

        print(f"üîç [DEBUG] First item attributes:")
        print(f"  - tag: {item_tag}")
        print(f"  - text: {item_text[:100]}")
        print(f"  - data-history-id: {item_id}")
        print(f"  - class: {history_item.get_attribute('class')}")
        print(f"  - onclick: {history_item.get_attribute('onclick')}")

        if not item_id:
            # –ï—Å–ª–∏ –Ω–µ—Ç data-history-id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –¥—Ä—É–≥–æ–π ID
            item_id = "item-0"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"‚ö†Ô∏è [DEBUG] –ù–µ—Ç data-history-id, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {item_id}")

        print(f"üîç [DEBUG] –ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É...")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
        try:
            # –°–ø–æ—Å–æ–± 1: –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
            history_item.click()
            print("‚úÖ [DEBUG] –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            print(f"‚ùå [DEBUG] –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            try:
                # –°–ø–æ—Å–æ–± 2: JavaScript –∫–ª–∏–∫
                ui_client.execute_script("arguments[0].click();", history_item)
                print("‚úÖ [DEBUG] JavaScript –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e2:
                print(f"‚ùå [DEBUG] JavaScript –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥
        current_url_after_click = ui_client.current_url
        print(f"üîç [DEBUG] URL after click: {current_url_after_click}")

        if current_url_after_click == f"{base_url}/history":
            print("‚ö†Ô∏è [DEBUG] URL –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞")

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
            links = history_item.find_elements(By.TAG_NAME, "a")
            if links:
                print(f"üîó [DEBUG] –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ: {len(links)}")
                link = links[0]
                href = link.get_attribute("href")
                print(f"üîó [DEBUG] –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ href: {href}")

                # –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
                link.click()
                time.sleep(2)
                print(f"üîç [DEBUG] URL after link click: {ui_client.current_url}")
            else:
                print("‚ùå [DEBUG] –°—Å—ã–ª–∫–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - —Å–∫–∏–ø–∞–µ–º
                pytest.skip("–≠–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        # –î–∞–ª—å—à–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è
        if "history" in ui_client.current_url and (
            item_id in ui_client.current_url or "detail" in ui_client.current_url
        ):
            print("‚úÖ [DEBUG] URL —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏")
        else:
            print(f"‚ùå [DEBUG] URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. item_id='{item_id}'")
            print(f"üîç [DEBUG] Searching for: '{item_id}' or 'detail' in '{ui_client.current_url}'")

            # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç history –∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if ui_client.current_url != f"{base_url}/history":
                print("‚úÖ [DEBUG] URL –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö")
            else:
                pytest.skip("URL –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞")

    def test_direct_url_access_static(self, ui_client, base_url):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."""
        static_urls = ["/settings", "/models", "/history", "/help"]

        for url in static_urls:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù –ë–ê–ì
            ui_client.get(f"{base_url}{url}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
            assert ui_client.current_url.endswith(url), f"URL {url} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            main_content = ui_client.find_elements(By.CSS_SELECTOR, "main, .content, #app, body")
            assert len(main_content) > 0, f"–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ –ø—Ä—è–º–æ–º –¥–æ—Å—Ç—É–ø–µ –∫ {url}"

    def _get_first_resource_id(self, ui_client, container_selector, item_selector, id_attribute):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞."""
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, container_selector))
        )

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        items = ui_client.find_elements(By.CSS_SELECTOR, item_selector)
        if not items:
            pytest.skip(f"–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ {item_selector} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        resource_id = items[0].get_attribute(id_attribute)
        if not resource_id:
            pytest.skip(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {id_attribute} —ç–ª–µ–º–µ–Ω—Ç–∞")

        return resource_id

    def test_direct_resource_access(self, ui_client, base_url):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å–∞–º (–∑–∞–¥–∞—á–∏ –∏ –º–æ–¥–µ–ª–∏)."""

        # === –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –î–û–°–¢–£–ü–ê –ö –ó–ê–î–ê–ß–ï ===
        ui_client.get(f"{base_url}/tasks")
        task_id = self._get_first_resource_id(
            ui_client, ".task-list, .tasks-container", ".task-item", "data-task-id"
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –∫ –∑–∞–¥–∞—á–µ
        ui_client.get(f"{base_url}/tasks/{task_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".task-details, .execution-graph"))
        )
        task_title = ui_client.find_element(By.CSS_SELECTOR, ".task-title, .task-header h1")
        assert task_title.is_displayed(), "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

        # === –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –î–û–°–¢–£–ü–ê –ö –ú–û–î–ï–õ–ò ===
        ui_client.get(f"{base_url}/models")
        model_id = self._get_first_resource_id(
            ui_client, ".models-container, .ai-models-list", ".ai-model-item", "data-model-id"
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –º–æ–¥–µ–ª–∏
        ui_client.get(f"{base_url}/models/{model_id}/settings")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".model-settings, .settings-form"))
        )
        settings_form = ui_client.find_element(By.CSS_SELECTOR, ".settings-form, form")
        assert settings_form.is_displayed(), "–§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

    def test_404_page_complete(self, ui_client, base_url):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã 404 –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π)."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π URL
        ui_client.get(f"{base_url}/this-page-does-not-exist")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 404
        not_found_indicators = [
            ui_client.find_elements(By.CSS_SELECTOR, ".not-found, .error-404"),
            ui_client.find_elements(By.XPATH, "//*[contains(text(), '404')]"),
            ui_client.find_elements(By.XPATH, "//*[contains(text(), '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')]"),
            ui_client.find_elements(By.XPATH, "//*[contains(text(), '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')]"),
            ui_client.find_elements(By.XPATH, "//*[contains(text(), 'Not Found')]"),
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã 404
        has_404_indicator = any(len(indicators) > 0 for indicators in not_found_indicators)
        assert has_404_indicator, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 404 –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ URL"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_message = ui_client.find_element(
            By.CSS_SELECTOR, ".error-message, .not-found-message"
        )
        assert (
            "404" in error_message.text
            or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in error_message.text.lower()
            or "not found" in error_message.text.lower()
        ), "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ 404 –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        home_button = ui_client.find_element(By.CSS_SELECTOR, ".home-button, a[href='/']")
        assert home_button.is_displayed(), "–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
        home_button.click()

        # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        WebDriverWait(ui_client, 10).until(
            lambda driver: driver.current_url.endswith("/") or driver.current_url.endswith("/home")
        )

    def test_query_parameters(self, ui_client, base_url):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –≤ URL."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–¥–µ–ª–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        ui_client.get(f"{base_url}/models?category=text")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, ".models-container, .ai-models-list")  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
            )
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∞–∂–µ–Ω–æ –≤ URL, –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π

        # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        assert "category=text" in ui_client.current_url, "–ü–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ URL"

        # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å UI —ç–ª–µ–º–µ–Ω—Ç, –æ—Ç—Ä–∞–∂–∞—é—â–∏–π —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä)
        filter_indicators = ui_client.find_elements(
            By.CSS_SELECTOR, ".active-filter, .filter-chip.active"
        )
        if filter_indicators:
            filter_text = filter_indicators[0].text.lower()
            assert "text" in filter_text, "–§–∏–ª—å—Ç—Ä –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"

    def test_hash_fragment_navigation(self, ui_client, base_url):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö—ç—à-—Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ URL."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–ª–∏–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏ —è–∫–æ—Ä–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        ui_client.get(f"{base_url}/help")

        # –ò—â–µ–º —è–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        anchor_links = ui_client.find_elements(By.CSS_SELECTOR, "a[href^='#']")

        if not anchor_links:
            pytest.skip("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —è–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–π —è–∫–æ—Ä–Ω–æ–π —Å—Å—ã–ª–∫–µ
        anchor_link = anchor_links[0]
        href = anchor_link.get_attribute("href")
        fragment = href.split("#")[1] if "#" in href else ""

        anchor_link.click()

        # –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL
        WebDriverWait(ui_client, 10).until(lambda driver: "#" in driver.current_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç
        assert (
            f"#{fragment}" in ui_client.current_url
        ), "URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç—à-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ —è–∫–æ—Ä–Ω–æ–π —Å—Å—ã–ª–∫–µ"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–∫—Ä—É—Ç–∏–ª–∞—Å—å –¥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å id, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É
        target_element = ui_client.find_element(By.ID, fragment)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
        element_position = ui_client.execute_script(
            "return arguments[0].getBoundingClientRect().top;", target_element
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ (—Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º)
        assert abs(element_position) < 200, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø—Ä–æ–∫—Ä—É—Ç–∏–ª–∞—Å—å –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"

    def test_task_center_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–Ω—Ç—Ä—É –∑–∞–¥–∞—á –∏ –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."""
        import time

        print(f"\nüöÄ [DEBUG] –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞—á: {base_url}/tasks")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ü–µ–Ω—Ç—Ä–∞ –∑–∞–¥–∞—á
        ui_client.get(f"{base_url}/tasks")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞—á–∞–º–∏
        print("‚è≥ [DEBUG] –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".task-list, .tasks-container"))
        )
        print("‚úÖ [DEBUG] –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        print(f"üîç [DEBUG] Current URL: {ui_client.current_url}")
        print(f"üîç [DEBUG] Page title: {ui_client.title}")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ, –∞ –Ω–µ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        try:
            # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            page_title_selectors = [
                ".tasks-container .page-header h1",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ö–µ–¥–µ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                ".page-header h1",  # –û–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                "main h1",  # h1 –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                ".content h1",  # h1 –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            ]

            page_title = None
            for selector in page_title_selectors:
                try:
                    elements = ui_client.find_elements(By.CSS_SELECTOR, selector)
                    if elements:
                        page_title = elements[0]
                        print(
                            f"‚úÖ [DEBUG] –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ '{selector}': '{page_title.text}'"
                        )
                        break
                except Exception:
                    continue

            # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π h1 (–Ω–µ –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
            if not page_title:
                all_h1 = ui_client.find_elements(By.TAG_NAME, "h1")
                print(f"üîç [DEBUG] –ù–∞–π–¥–µ–Ω–æ h1 —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(all_h1)}")
                for i, h1 in enumerate(all_h1):
                    print(f"  h1[{i}]: '{h1.text}'")

                if len(all_h1) >= 2:
                    page_title = all_h1[1]  # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π h1 (–ø–µ—Ä–≤—ã–π - –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
                    print(f"‚úÖ [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ç–æ—Ä–æ–π h1: '{page_title.text}'")
                else:
                    page_title = all_h1[0] if all_h1 else None

            if not page_title:
                pytest.fail("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title_text = page_title.text.lower()
            print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫: '{title_text}'")

            assert (
                "–∑–∞–¥–∞—á" in title_text
                or "tasks" in title_text
                or "—Ü–µ–Ω—Ç—Ä –∑–∞–¥–∞—á" in title_text
                or "task center" in title_text
            ), f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–¥–∞—á. –ù–∞–π–¥–µ–Ω–æ: '{page_title.text}'"
            print("‚úÖ [DEBUG] –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")

        except Exception as e:
            print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            raise

        # –ò—â–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—É—Ç–∏–Ω–≥–∞ –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–¥–∞—á–∏
        print("üîç [DEBUG] –ò—â–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
        task_items = ui_client.find_elements(By.CSS_SELECTOR, ".task-item")
        print(f"üîç [DEBUG] –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(task_items)}")

        if not task_items:
            # –û—Ç–ª–∞–¥–∫–∞: –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            print("‚ö†Ô∏è [DEBUG] –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
            alternative_selectors = [
                ".task",
                "[data-task-id]",
                ".task-list > *",
                ".tasks-container > *",
            ]
            for selector in alternative_selectors:
                elements = ui_client.find_elements(By.CSS_SELECTOR, selector)
                print(f"  {selector}: {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

            pytest.skip("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è")

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
        task_item = task_items[0]
        print(f"üîç [DEBUG] –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞:")
        print(f"  - Tag: {task_item.tag_name}")
        print(f"  - Text: '{task_item.text[:200]}...'")
        print(f"  - Class: '{task_item.get_attribute('class')}'")

        task_id = task_item.get_attribute("data-task-id")
        print(f"üîç [DEBUG] Task ID: '{task_id}'")

        if not task_id:
            print("‚ùå [DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å data-task-id")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
            attrs = ui_client.execute_script(
                """
                var attrs = {};
                var element = arguments[0];
                for (var i = 0; i < element.attributes.length; i++) {
                    var attr = element.attributes[i];
                    attrs[attr.name] = attr.value;
                }
                return attrs;
            """,
                task_item,
            )
            print(f"üîç [DEBUG] –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∑–∞–¥–∞—á–∏: {attrs}")
            pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–¥–∞—á–∏")

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∑–∞–¥–∞—á–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ—Ç–∞–ª—è–º
        print("üñ±Ô∏è [DEBUG] –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ...")
        try:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            ui_client.execute_script("arguments[0].scrollIntoView();", task_item)
            time.sleep(0.5)

            # –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫
            task_item.click()
            print("‚úÖ [DEBUG] –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        except Exception as e:
            print(f"‚ùå [DEBUG] –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            try:
                # JavaScript –∫–ª–∏–∫
                ui_client.execute_script("arguments[0].click();", task_item)
                print("‚úÖ [DEBUG] JavaScript –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e2:
                print(f"‚ùå [DEBUG] JavaScript –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript
        print("‚è≥ [DEBUG] –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript...")
        time.sleep(2)

        print(f"üîç [DEBUG] URL –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: '{ui_client.current_url}'")

        # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
        expected_url = f"/tasks/{task_id}"
        print(f"üîç [DEBUG] –û–∂–∏–¥–∞–µ–º URL: '{expected_url}'")

        try:
            WebDriverWait(ui_client, 10).until(
                lambda driver: f"/tasks/{task_id}" in driver.current_url
            )
            print("‚úÖ [DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            print(f"‚ùå [DEBUG] Timeout –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞: {e}")
            print(f"üîç [DEBUG] –¢–µ–∫—É—â–∏–π URL: '{ui_client.current_url}'")
            print(f"üîç [DEBUG] –û–∂–∏–¥–∞–ª—Å—è: URL —Å–æ–¥–µ—Ä–∂–∞—â–∏–π '{expected_url}'")

            # –ü—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—É—Ç–∞
            print("üîÑ [DEBUG] –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
            ui_client.get(f"{base_url}{expected_url}")
            time.sleep(2)
            print(f"üîç [DEBUG] URL –ø–æ—Å–ª–µ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞: '{ui_client.current_url}'")

            # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –≤ JavaScript
            if expected_url in ui_client.current_url:
                print("‚ö†Ô∏è [DEBUG] –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –≤ JavaScript –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö")
                pytest.skip("JavaScript –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ùå [DEBUG] –†–æ—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
                pytest.fail(f"–†–æ—É—Ç {expected_url} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç ID –∑–∞–¥–∞—á–∏
        assert f"/tasks/{task_id}" in ui_client.current_url, (
            f"URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏. –û–∂–∏–¥–∞–ª—Å—è: {expected_url}, –ø–æ–ª—É—á–µ–Ω:"
            f" {ui_client.current_url}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        print("üîç [DEBUG] –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        try:
            WebDriverWait(ui_client, 10).until(
                EC.presence_of_element_located(
                    (By.CSS_SELECTOR, ".task-progress-graph, .execution-graph, .task-details")
                )
            )
            print("‚úÖ [DEBUG] –≠–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            detail_elements = ui_client.find_elements(
                By.CSS_SELECTOR, ".task-progress-graph, .execution-graph, .task-details"
            )
            print(f"üîç [DEBUG] –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–µ—Ç–∞–ª–µ–π: {len(detail_elements)}")

            for i, element in enumerate(detail_elements):
                print(
                    f"  –≠–ª–µ–º–µ–Ω—Ç {i}: {element.tag_name}, class='{element.get_attribute('class')}'"
                )

        except Exception as e:
            print(f"‚ùå [DEBUG] –≠–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")

            # –û—Ç–ª–∞–¥–∫–∞: —á—Ç–æ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            print("üîç [DEBUG] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            body_content = ui_client.find_element(By.TAG_NAME, "body")
            print(f"üîç [DEBUG] Body content length: {len(body_content.text)}")

            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headings = ui_client.find_elements(By.CSS_SELECTOR, "h1, h2, h3")
            print(f"üîç [DEBUG] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(headings)}")
            for i, heading in enumerate(headings):
                print(f"  {heading.tag_name}[{i}]: '{heading.text}'")

            pytest.fail("–≠–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")

        print("üéâ [DEBUG] –¢–µ—Å—Ç test_task_center_routing –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    def test_task_creation_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ü–µ–Ω—Ç—Ä–∞ –∑–∞–¥–∞—á
        ui_client.get(f"{base_url}/tasks")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".task-list, .tasks-container"))
        )

        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        create_button = ui_client.find_element(
            By.CSS_SELECTOR, ".create-task-btn, button[href='/tasks/create']"
        )

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
        create_button.click()

        # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        WebDriverWait(ui_client, 10).until(lambda driver: "/tasks/create" in driver.current_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        assert (
            "/tasks/create" in ui_client.current_url
        ), "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        form = ui_client.find_element(By.CSS_SELECTOR, ".task-creation-form")
        assert form.is_displayed(), "–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

    def test_model_management_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏
        ui_client.get(f"{base_url}/models")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".models-container, .ai-models-list"))
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π
        categories = ui_client.find_elements(
            By.CSS_SELECTOR, ".model-category, .model-type-section"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –º–æ–¥–µ–ª–µ–π
        category_texts = [category.text.lower() for category in categories]
        assert any("api" in text for text in category_texts), "–ö–∞—Ç–µ–≥–æ—Ä–∏—è API –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert any("–ª–æ–∫–∞–ª—å–Ω" in text for text in category_texts) or any(
            "local" in text for text in category_texts
        ), "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert any("–±–µ—Å–ø–ª–∞—Ç–Ω" in text for text in category_texts) or any(
            "free" in text for text in category_texts
        ), "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        # –ò—â–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        model_items = ui_client.find_elements(By.CSS_SELECTOR, ".ai-model-item")

        if not model_items:
            pytest.skip("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏
        model_item = model_items[0]
        model_id = model_item.get_attribute("data-model-id")

        if not model_id:
            pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–æ–¥–µ–ª–∏")

        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_button = model_item.find_element(
            By.CSS_SELECTOR, ".model-settings-btn, .settings-icon"
        )

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_button.click()

        # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏
        WebDriverWait(ui_client, 10).until(
            lambda driver: f"/models/{model_id}/settings" in driver.current_url
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç ID –º–æ–¥–µ–ª–∏
        assert (
            f"/models/{model_id}/settings" in ui_client.current_url
        ), "URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"

    def test_browser_models_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        ui_client.get(f"{base_url}/models/browser")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, ".browser-models, .browser-automation")
            )
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
        automation_controls = ui_client.find_elements(
            By.CSS_SELECTOR, ".automation-settings, .schedule-settings"
        )

        assert len(automation_controls) > 0, "–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    def test_orchestrator_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        ui_client.get(f"{base_url}/orchestrator")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, ".orchestrator-dashboard, .routing-rules")
            )
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        routing_section = ui_client.find_element(By.CSS_SELECTOR, ".routing-rules, .rules-section")
        assert routing_section.is_displayed(), "–°–µ–∫—Ü–∏—è –ø—Ä–∞–≤–∏–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

        strategy_section = ui_client.find_element(
            By.CSS_SELECTOR, ".optimization-strategy, .strategy-section"
        )
        assert strategy_section.is_displayed(), "–°–µ–∫—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

        fallback_section = ui_client.find_element(
            By.CSS_SELECTOR, ".fallback-settings, .switching-rules"
        )
        assert fallback_section.is_displayed(), "–°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

    def test_workflows_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        ui_client.get(f"{base_url}/workflows")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, ".workflows-container, .templates-list")
            )
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
        templates_section = ui_client.find_element(
            By.CSS_SELECTOR, ".templates-library, .workflow-templates"
        )
        assert templates_section.is_displayed(), "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        custom_section = ui_client.find_element(
            By.CSS_SELECTOR, ".custom-workflows, .user-workflows"
        )
        assert custom_section.is_displayed(), "–°–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        create_button = ui_client.find_element(
            By.CSS_SELECTOR, ".create-workflow-btn, .new-workflow"
        )
        assert create_button.is_displayed(), "–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

    def test_analytics_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ü–µ–Ω—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        ui_client.get(f"{base_url}/analytics")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, ".analytics-dashboard, .stats-container")
            )
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        usage_section = ui_client.find_element(By.CSS_SELECTOR, ".usage-stats, .usage-statistics")
        assert usage_section.is_displayed(), "–°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

        cost_section = ui_client.find_element(By.CSS_SELECTOR, ".cost-analysis, .cost-stats")
        assert cost_section.is_displayed(), "–°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

        reports_section = ui_client.find_element(By.CSS_SELECTOR, ".task-reports, .reports-section")
        assert reports_section.is_displayed(), "–°–µ–∫—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∑–∞–¥–∞—á–∞–º –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

        recommendations = ui_client.find_element(
            By.CSS_SELECTOR, ".recommendations, .optimization-tips"
        )
        assert recommendations.is_displayed(), "–°–µ–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

    def test_task_execution_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        import time

        print(f"üöÄ [DEBUG] –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {base_url}/tasks/create")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        ui_client.get(f"{base_url}/tasks/create")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".task-creation-form"))
        )
        print("‚úÖ [DEBUG] –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç [DEBUG] Current URL: {ui_client.current_url}")
        print(f"üîç [DEBUG] Page title: {ui_client.title}")

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_name_input = ui_client.find_element(By.CSS_SELECTOR, "input[name='task_name']")
        print(
            f"üîç [DEBUG] –ù–∞–π–¥–µ–Ω input: {task_name_input.tag_name},"
            f" name='{task_name_input.get_attribute('name')}'"
        )

        task_name_input.clear()
        task_name_input.send_keys("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")

        task_description_input = ui_client.find_element(
            By.CSS_SELECTOR, "textarea[name='task_description']"
        )
        task_description_input.clear()
        task_description_input.send_keys("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
        print("‚úÖ [DEBUG] –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω –≤ —Ñ–æ—Ä–º—É")

        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏
        submit_button = ui_client.find_element(By.CSS_SELECTOR, "button[type='submit']")
        print(
            f"üîç [DEBUG] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {submit_button.tag_name},"
            f" type='{submit_button.get_attribute('type')}'"
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–µ
        form = ui_client.find_element(By.CSS_SELECTOR, ".task-creation-form")
        form_action = form.get_attribute("action")
        form_method = form.get_attribute("method")
        print(f"üîç [DEBUG] Form action: '{form_action}', method: '{form_method}'")

        # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ JavaScript
        print("üîç [DEBUG] –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏...")
        ui_client.execute_script("console.log('üöÄ JavaScript –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã');")

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–ø—É—Å–∫–∞
        print("üñ±Ô∏è [DEBUG] –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏...")
        submit_button.click()

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        time.sleep(3)

        print(f"üîç [DEBUG] URL after submit: {ui_client.current_url}")
        print(f"üîç [DEBUG] Page title after submit: {ui_client.title}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏
        try:
            console_logs = ui_client.get_log("browser")
            print("üîç [DEBUG] Console logs:")
            for log in console_logs:
                print(f"  {log['level']}: {log['message']}")
        except Exception as e:
            print(f"‚ö†Ô∏è [DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏: {e}")

        # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–ª–∏ –µ–µ –¥–µ—Ç–∞–ª–µ–π
        try:
            WebDriverWait(ui_client, 10).until(
                lambda driver: "/tasks/" in driver.current_url
                and "/create" not in driver.current_url
            )
            print("‚úÖ [DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå [DEBUG] Timeout –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ: {e}")
            print("üîç [DEBUG] Trying to debug page content...")

            # –û—Ç–ª–∞–¥–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            body_content = ui_client.find_element(By.TAG_NAME, "body")
            print(f"üîç [DEBUG] Body content (first 500 chars): {body_content.text[:500]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            error_elements = ui_client.find_elements(By.CSS_SELECTOR, ".error, .alert-danger")
            if error_elements:
                print("‚ùå [DEBUG] –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
                for error in error_elements:
                    print(f"  - {error.text}")

            # –í—Ä—É—á–Ω—É—é –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ JavaScript
            print("üîÑ [DEBUG] –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ JavaScript...")
            ui_client.execute_script("""
            const form = document.querySelector('.task-creation-form');
            if (form) {
                console.log('üîç Form found, submitting...');
                form.submit();
            } else {
                console.log('‚ùå Form not found');
            }
        """)

            time.sleep(3)
            print(f"üîç [DEBUG] URL after JS submit: {ui_client.current_url}")

            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä—è–º—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            if "/create" in ui_client.current_url:
                print("üîÑ [DEBUG] –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä—è–º—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º...")
                test_task_id = "task-12345678"
                ui_client.get(f"{base_url}/tasks/{test_task_id}")
                time.sleep(2)
                print(f"üîç [DEBUG] URL after direct navigation: {ui_client.current_url}")

            # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–∞–¥–∞–µ–º —Å –ø–æ–Ω—è—Ç–Ω–æ–π –æ—à–∏–±–∫–æ–π
            if "/create" in ui_client.current_url:
                pytest.fail("–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_id = ui_client.current_url.split("/")[-1]
        assert (
            task_id.startswith("task-") and len(task_id) > 10
        ), f"ID –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É task-{{uuid}}. –ü–æ–ª—É—á–µ–Ω: {task_id}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, ".progress-indicator, .execution-graph, .task-details")
            )
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ—à–∞–≥–æ–≤—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º
        assert ui_client.find_elements(
            By.CSS_SELECTOR, ".execution-steps, .task-progress-graph, .task-details"
        ), "–≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        print("üéâ [DEBUG] –¢–µ—Å—Ç test_task_execution_routing –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    def test_settings_routing(self, ui_client, base_url):
        """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ui_client.get(f"{base_url}/settings")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, ".settings-container, .preferences-panel")
            )
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        assert ui_client.find_elements(
            By.CSS_SELECTOR, ".settings-section, .preferences-section"
        ), "–†–∞–∑–¥–µ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        # –ò—â–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        settings_tabs = ui_client.find_elements(
            By.CSS_SELECTOR, ".settings-tab, .preference-category"
        )

        notification_tab = None
        for tab in settings_tabs:
            if "—É–≤–µ–¥–æ–º–ª–µ–Ω" in tab.text.lower() or "notif" in tab.text.lower():
                notification_tab = tab
                break

        if notification_tab:
            # –ö–ª–∏–∫–∞–µ–º –ø–æ –≤–∫–ª–∞–¥–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notification_tab.click()

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            WebDriverWait(ui_client, 10).until(
                lambda driver: "notifications" in driver.current_url
                or EC.visibility_of_element_located(
                    (By.CSS_SELECTOR, ".notifications-settings, .alerts-settings")
                )(driver)
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            assert ui_client.find_elements(
                By.CSS_SELECTOR, ".notification-option, .alert-setting"
            ), "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    def test_direct_task_url_access(self, ui_client, base_url):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–µ –ø–æ URL."""
        # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
        ui_client.get(f"{base_url}/tasks")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".task-list, .tasks-container"))
        )

        # –ò—â–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ
        task_items = ui_client.find_elements(By.CSS_SELECTOR, ".task-item")

        if not task_items:
            pytest.skip("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
        task_id = task_items[0].get_attribute("data-task-id")

        if not task_id:
            pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–¥–∞—á–∏")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ URL –∑–∞–¥–∞—á–∏
        ui_client.get(f"{base_url}/tasks/{task_id}")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".task-details, .execution-graph"))
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        task_title = ui_client.find_element(By.CSS_SELECTOR, ".task-title, .task-header h1")
        assert task_title.is_displayed(), "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

    def test_direct_model_url_access(self, ui_client, base_url):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏ –ø–æ URL."""
        # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–¥–µ–ª–µ–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
        ui_client.get(f"{base_url}/models")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(ui_client, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".models-container, .ai-models-list"))
        )

        # –ò—â–µ–º –º–æ–¥–µ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ
        model_items = ui_client.find_elements(By.CSS_SELECTOR, ".ai-model-item")

        if not model_items:
            pytest.skip("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏
        model_id = model_items[0].get_attribute("data-model-id")

        if not model_id:
            pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –º–æ–¥–µ–ª–∏")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ URL –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏
        ui_client.get(f"{base_url}/models/{model_id}/settings")

        # –ñ
