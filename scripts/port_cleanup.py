"""–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –ø–æ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""

import subprocess
import time
from typing import List, Optional

import psutil
import requests


class PortManager:
    def __init__(self, port: int = 5000):
        self.port = port
        self.app_process = None

    def is_port_in_use(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø–æ—Ä—Ç"""
        for conn in psutil.net_connections():
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                if hasattr(conn, "laddr") and conn.laddr:
                    if hasattr(conn.laddr, "port"):
                        # –û–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º port
                        if conn.laddr.port == self.port:
                            return True
                    elif isinstance(conn.laddr, tuple) and len(conn.laddr) >= 2:
                        # Tuple (ip, port)
                        if conn.laddr[1] == self.port:
                            return True
            except (AttributeError, IndexError):
                continue
        return False

    def find_process_by_port(self) -> Optional[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç PID –ø—Ä–æ—Ü–µ—Å—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ –ø–æ—Ä—Ç"""
        for conn in psutil.net_connections():
            try:
                port_matches = False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã laddr
                if hasattr(conn, "laddr") and conn.laddr:
                    if hasattr(conn.laddr, "port"):
                        port_matches = conn.laddr.port == self.port
                    elif isinstance(conn.laddr, tuple) and len(conn.laddr) >= 2:
                        port_matches = conn.laddr[1] == self.port

                if port_matches and hasattr(conn, "pid") and conn.pid:
                    return conn.pid
            except (AttributeError, IndexError):
                continue
        return None

    def kill_process_by_port(self) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É"""
        try:
            result = subprocess.run(["netstat", "-ano"], capture_output=True, text=True, timeout=5)

            for line in result.stdout.split("\n"):
                if f":{self.port}" in line and "LISTENING" in line:
                    parts = line.strip().split()
                    if len(parts) >= 5:
                        pid_str = parts[-1]

                        try:
                            pid = int(pid_str)

                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                            if pid <= 4:  # PID 0, 4 - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                                print(f"‚ö†Ô∏è [PORT] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å (PID: {pid})")
                                continue

                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                            try:
                                process_info = subprocess.run(
                                    ["tasklist", "/FI", f"PID eq {pid}", "/FO", "CSV"],
                                    capture_output=True,
                                    text=True,
                                    timeout=3,
                                )

                                if (
                                    "python" in process_info.stdout.lower()
                                    or "flask" in process_info.stdout.lower()
                                ):
                                    print(f"üîß [PORT] –ó–∞–≤–µ—Ä—à–∞–µ–º Python/Flask –ø—Ä–æ—Ü–µ—Å—Å (PID: {pid})")

                                    # –ú—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞
                                    subprocess.run(["taskkill", "/PID", str(pid)], timeout=5)
                                    time.sleep(2)

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏
                                    check = subprocess.run(
                                        ["tasklist", "/FI", f"PID eq {pid}"],
                                        capture_output=True,
                                        timeout=3,
                                    )

                                    if f"{pid}" in check.stdout.decode():
                                        print(f"üî™ [PORT] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (PID: {pid})")
                                        subprocess.run(
                                            ["taskkill", "/PID", str(pid), "/F"], timeout=5
                                        )

                                    return True
                                else:
                                    print(
                                        f"‚ö†Ô∏è [PORT] –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (PID: {pid})"
                                    )
                                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                    return False

                            except subprocess.TimeoutExpired:
                                print(
                                    f"‚è±Ô∏è [PORT] –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ (PID: {pid})"
                                )
                                return False

                        except ValueError:
                            print(f"‚ùå [PORT] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PID: {pid_str}")
                            continue

            print(f"‚ÑπÔ∏è [PORT] –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {self.port} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ netstat")
            return False

        except subprocess.TimeoutExpired:
            print(f"‚è±Ô∏è [PORT] –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è netstat")
            return False
        except Exception as e:
            print(f"‚ùå [PORT] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return False

    def cleanup_zombie_connections(self):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≤–∏—Å—à–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            # Windows: netsh –¥–ª—è —Å–±—Ä–æ—Å–∞ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            subprocess.run(["netsh", "int", "ip", "reset"], capture_output=True, check=True)
            print("‚úÖ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")

    def wait_for_port_free(self, timeout: int = 30) -> bool:
        """–ñ–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞"""
        start_time = time.time()
        while time.time() - start_time < timeout:
            if not self.is_port_in_use():
                return True
            time.sleep(0.5)
        return False

    def is_app_responding(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ HTTP –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            response = requests.get(f"http://localhost:{self.port}", timeout=2)
            return response.status_code == 200
        except requests.RequestException:
            return False

    def smart_cleanup(self) -> bool:
        """–£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º"""
        if not self.is_port_in_use():
            print(f"‚úÖ [PORT] –ü–æ—Ä—Ç {self.port} —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω")
            return True

        print(f"üîç [PORT] –ü–æ—Ä—Ç {self.port} –∑–∞–Ω—è—Ç, –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞...")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å
        if self.is_app_responding():
            print("‚ÑπÔ∏è [PORT] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            return True  # –ù–µ —É–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        else:
            print("‚ö†Ô∏è [PORT] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å")

        if self.is_port_in_use():
            print(f"üîß [PORT] –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≤–∏—Å—à–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            success = self.kill_process_by_port()

            if success and self.wait_for_port_free():
                print(f"‚úÖ [PORT] –ü–æ—Ä—Ç {self.port} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
                return True
            else:
                print(f"‚ùå [PORT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {self.port}")
                return False

        return True


def cleanup_port(port: int = 5000) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Ä—Ç–∞"""
    manager = PortManager(port)
    return manager.smart_cleanup()


def cleanup_all_flask_processes():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ Flask –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    killed_count = 0
    for proc in psutil.process_iter(["pid", "name", "cmdline"]):
        try:
            cmdline = " ".join(proc.info["cmdline"] or [])
            if "python" in proc.info["name"].lower() and (
                "app.py" in cmdline or "flask" in cmdline.lower()
            ):
                print(f"üîß –ó–∞–≤–µ—Ä—à–∞–µ–º Flask –ø—Ä–æ—Ü–µ—Å—Å: {proc.info['pid']}")
                proc.terminate()
                killed_count += 1

        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

    if killed_count > 0:
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {killed_count} Flask –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    return killed_count


if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1:
        port = int(sys.argv[1])
    else:
        port = 5000

    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞ {port}...")
    success = cleanup_port(port)

    if not success:
        print("üîß –ü—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ Flask –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        cleanup_all_flask_processes()

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        manager = PortManager(port)
        if manager.wait_for_port_free():
            print("‚úÖ –ü–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
        else:
            print("‚ùå –ü–æ—Ä—Ç –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç")
            sys.exit(1)
