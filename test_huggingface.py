#!/usr/bin/env python3
"""–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HuggingFace API"""

import os
import sys

sys.path.append(".")

from services.ai_service import check_ai_model_availability, get_ai_models
from services.huggingface_service import HuggingFaceService


def test_huggingface_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ HuggingFace"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HuggingFace –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    hf_service = HuggingFaceService()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if hf_service.token:
        print(f"‚úÖ –¢–æ–∫–µ–Ω HuggingFace –Ω–∞–π–¥–µ–Ω: {hf_service.token[:10]}...")
    else:
        print("‚ùå –¢–æ–∫–µ–Ω HuggingFace –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ microsoft/DialoGPT-medium...")
        availability = hf_service.check_model_availability("microsoft/DialoGPT-medium")

        if availability["available"]:
            print("‚úÖ –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞!")
            print(f"   - –ò–º—è: {availability['model_name']}")
            print(f"   - –ê–≤—Ç–æ—Ä: {availability['author']}")
            return True
        else:
            print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {availability.get('error')}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False


def test_ai_models_file():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å AI –º–æ–¥–µ–ª—è–º–∏"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å AI –º–æ–¥–µ–ª—è–º–∏...")

    try:
        models = get_ai_models()
        if "error" in models:
            print(f"‚ùå –û—à–∏–±–∫–∞: {models['error']}")
            return False

        models_list = models.get("models", [])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(models_list)} –º–æ–¥–µ–ª–µ–π:")

        for model in models_list:
            status = "üü¢" if model.get("status") == "ready" else "üî¥"
            current = "‚≠ê" if model.get("is_current") else "  "
            print(f"   {status}{current} {model['name']} ({model['id']})")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return False


def test_simple_request():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ AI"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π AI –∑–∞–ø—Ä–æ—Å...")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏–∑ —Ñ–∞–π–ª–∞
        from services.ai_service import get_current_ai_model

        current_model = get_current_ai_model()
        if not current_model:
            print("‚ùå –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        test_model_id = current_model["id"]
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {current_model['name']} ({test_model_id})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        availability_result = check_ai_model_availability(test_model_id)

        if availability_result.get("success"):
            print(f"‚úÖ –ú–æ–¥–µ–ª—å {test_model_id} –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            from services.ai_service import generate_text

            print("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
            response = generate_text(
                "Hello, how are you today?", max_length=50, model_id=test_model_id
            )

            if response and not response.startswith("–û—à–∏–±–∫–∞"):
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response[:100]}...")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {response}")
                return False
        else:
            print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {availability_result.get('message')}")

            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
            print("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å...")
            return add_simple_test_model()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return False


def add_simple_test_model():
    """–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å"""
    try:
        from services.ai_service import add_model

        # –î–æ–±–∞–≤–ª—è–µ–º DistilGPT-2 –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
        model_data = {
            "id": "distilgpt2-test",
            "name": "DistilGPT-2 (Test)",
            "description": "–õ–µ–≥–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "huggingface_id": "distilgpt2",
            "type": "completion",
        }

        result = add_model(model_data)
        if result.get("success"):
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {model_data['name']}")

            # –í—ã–±–∏—Ä–∞–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—É—â—É—é
            from services.ai_service import select_ai_model

            select_result = select_ai_model("distilgpt2-test")

            if select_result.get("success"):
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è")

                # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å
                from services.ai_service import generate_text

                response = generate_text("Hello!", max_length=30, model_id="distilgpt2-test")

                if response and not response.startswith("–û—à–∏–±–∫–∞"):
                    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω: {response[:100]}...")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ: {response}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏: {select_result.get('message')}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {result.get('message')}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n")

    # –¢–µ—Å—Ç 1: HuggingFace –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    hf_ok = test_huggingface_connection()

    # –¢–µ—Å—Ç 2: AI –º–æ–¥–µ–ª–∏ —Ñ–∞–π–ª
    models_ok = test_ai_models_file()

    # –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–π AI –∑–∞–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –ø—Ä–æ—à–ª–∏)
    request_ok = False
    if hf_ok and models_ok:
        request_ok = test_simple_request()

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   HuggingFace API: {'‚úÖ' if hf_ok else '‚ùå'}")
    print(f"   AI –º–æ–¥–µ–ª–∏ —Ñ–∞–π–ª: {'‚úÖ' if models_ok else '‚ùå'}")
    print(f"   –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: {'‚úÖ' if request_ok else '‚ùå'}")

    if hf_ok and models_ok and request_ok:
        print("\nüéâ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("–ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å UI!")
    elif hf_ok and models_ok:
        print("\n‚ö° –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ç–æ–≤–∞, –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã")
    else:
        print("\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
