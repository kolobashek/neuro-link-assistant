"""–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""

import os
import signal  # ‚úÖ –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
import socket  # ‚úÖ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç–∞–º–∏
import subprocess
import sys
import time
from enum import Enum
from pathlib import Path
from typing import Any, Dict, Optional

import requests


# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ AppMode –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
class AppMode(Enum):
    TESTING = "testing"
    DEVELOPMENT = "development"
    PRODUCTION = "production"
    EXTERNAL = "external"


# ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú AppConfig - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
class AppConfig:
    def __init__(
        self,
        port: int = 5000,
        host: str = "127.0.0.1",
        mode: AppMode = AppMode.DEVELOPMENT,
        debug: bool = False,
        auto_cleanup: bool = True,
        force_kill: bool = False,
        timeout: int = 45,  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú
        health_endpoints: Optional[list] = None,  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú
    ):
        self.port = port
        self.host = host
        self.mode = mode
        self.debug = debug
        self.auto_cleanup = auto_cleanup
        self.force_kill = force_kill
        self.timeout = timeout  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú
        self.health_endpoints = health_endpoints or ["/", "/health"]  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú

    def get_port_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è PortManager"""
        return {"port": self.port, "host": self.host, "auto_cleanup": self.auto_cleanup}


# ‚úÖ –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç HealthChecker
# from .health_check import HealthChecker  # ‚ùå –£–ë–ò–†–ê–ï–ú

# ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –∏–º–ø–æ—Ä—Ç PortManager - –¥–µ–ª–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
try:
    from ..network.port_manager import PortManager
except ImportError:
    print("‚ö†Ô∏è PortManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
    PortManager = None


class AppManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""

    def __init__(self, config: Optional[AppConfig] = None):
        self.config = config or AppConfig()
        self.app_url = f"http://{self.config.host}:{self.config.port}"
        self.process: Optional[subprocess.Popen] = None
        self.app_dir = Path(__file__).parent.parent.parent
        self._start_time: Optional[float] = None
        self._metrics: Dict[str, Any] = {}

        # ‚úÖ –¢–û–õ–¨–ö–û ErrorHandler, –Ω–∏–∫–∞–∫–æ–≥–æ logging
        self.error_handler = None

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ErrorHandler —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–µ–∫—Ç–∞
            from core.common.error_handler import get_error_handler

            self.error_handler = get_error_handler()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            if self.error_handler and hasattr(self.error_handler, "log_info"):
                self.error_handler.log_info("üöÄ AppManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å ErrorHandler")
            else:
                print("‚ö†Ô∏è ErrorHandler –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
                self.error_handler = None

        except ImportError as e:
            print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å ErrorHandler –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            self.error_handler = None
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ErrorHandler: {e}")
            self.error_handler = None

        # ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é PortManager
        self.port_manager: Optional[Any] = None
        try:
            if PortManager is not None:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú - —Å–æ–∑–¥–∞–µ–º PortConfig –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                from ..network.port_manager import PortConfig

                port_config = PortConfig(
                    port=self.config.port,
                    host=self.config.host,
                    # auto_cleanup –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ PortConfig, —É–±–∏—Ä–∞–µ–º
                )
                self.port_manager = PortManager(config=port_config)

                if self.error_handler:
                    self.error_handler.log_info("üîå PortManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PortManager: {e}")
            self.port_manager = None

    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ===

    def start_app(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        self._start_time = time.perf_counter()
        self._log(
            "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", {"mode": self.config.mode.value, "port": self.config.port}
        )

        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self.is_app_running():
            elapsed = time.perf_counter() - self._start_time
            self._log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", {"check_time": f"{elapsed:.3f}s"})
            return True

        # –†–µ–∂–∏–º –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self.config.mode == AppMode.EXTERNAL:
            return self._handle_external_app()

        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if self.config.auto_cleanup and self._is_port_in_use(self.config.port):
            self._log("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞", {"port": self.config.port})

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
            if not self._cleanup_port(self.config.port):
                self._log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç, –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π...")
                try:
                    new_port = self._find_free_port()
                    self._log("‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç", {"new_port": new_port})

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    self.config.port = new_port
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º PortManager —Å –Ω–æ–≤—ã–º –ø–æ—Ä—Ç–æ–º
                    try:
                        if PortManager is not None:
                            from ..network.port_manager import PortConfig

                            port_config = PortConfig(
                                port=self.config.port,
                                host=self.config.host,
                                # auto_cleanup –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ PortConfig
                            )

                            self.port_manager = PortManager(config=port_config)
                    except Exception:
                        pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ PortManager –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
                    self.app_url = f"http://{self.config.host}:{self.config.port}"

                except Exception as e:
                    self._log_error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç", e)
                    return False

        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            if not self._launch_subprocess():
                return False

            # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±–µ—Ä—Ç–∫—É
            if not self._wait_for_port_free(self.config.port, timeout=2):
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

            if not self._wait_for_ready():
                self.stop_app()
                return False

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if not self.health_check():
                self._log("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
                self.stop_app()
                return False

            total_time = time.perf_counter() - self._start_time
            self._log(
                "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ",
                {
                    "total_time": f"{total_time:.3f}s",
                    "url": self.app_url,
                    "pid": self.process.pid if self.process else None,
                },
            )
            return True

        except Exception as e:
            self._log_error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", e)
            self.stop_app()
            return False

    def stop_app(self) -> bool:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        stop_start = time.perf_counter()
        self._log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        # –í–Ω–µ—à–Ω–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if self.config.mode == AppMode.EXTERNAL:
            self._log("‚ÑπÔ∏è –í–Ω–µ—à–Ω–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å")
            return True

        success = True

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if self.process and self.process.poll() is None:
            try:
                self._log("üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞", {"pid": self.process.pid})

                # –ú—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                if os.name == "nt":
                    try:
                        self.process.send_signal(signal.CTRL_BREAK_EVENT)
                    except (AttributeError, OSError):
                        # –ï—Å–ª–∏ CTRL_BREAK_EVENT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º terminate
                        self.process.terminate()
                else:
                    self.process.terminate()

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    self.process.wait(timeout=10)
                    self._log("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except subprocess.TimeoutExpired:
                    self._log("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                    self.process.kill()
                    self.process.wait()

            except Exception as e:
                self._log_error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞", e)
                success = False

        self.process = None

        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±–µ—Ä—Ç–∫—É
        if self.config.auto_cleanup:
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            if self._is_port_in_use(self.config.port):
                self._log("üßπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞")
                self._cleanup_port(self.config.port)

        stop_time = time.perf_counter() - stop_start
        self._log("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", {"time": f"{stop_time:.3f}s"})
        return success

    def restart_app(self) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self._log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        self.stop_app()
        time.sleep(2)
        return self.start_app()

    # === –ü–†–û–í–ï–†–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø ===

    def is_app_running(self) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            response = requests.get(self.app_url, timeout=2)
            return 200 <= response.status_code < 500
        except:
            return False

    def health_check(self) -> bool:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.is_app_running():
            return False

        try:
            for endpoint in self.config.health_endpoints:
                response = requests.get(f"{self.app_url}{endpoint}", timeout=5)
                if response.status_code >= 500:
                    return False
            return True
        except:
            return False

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return {
            "running": self.is_app_running(),
            "healthy": self.health_check(),
            "port_occupied": self._is_port_in_use(self.config.port),  # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ë–ï–†–¢–ö–ê
            "process_alive": self.process and self.process.poll() is None,
            "config": {
                "port": self.config.port,
                "mode": self.config.mode.value,
                "url": self.app_url,
            },
            "metrics": self._metrics,
        }

    # === –í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–¢–û–î–´ ===

    def _handle_external_app(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_app_running():
            self._log("‚úÖ –í–Ω–µ—à–Ω–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
            return True
        else:
            self._log("‚ùå –í–Ω–µ—à–Ω–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return False

    def _launch_subprocess(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç subprocess –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            launch_start = time.perf_counter()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è subprocess
            startup_info = None
            creation_flags = 0

            if os.name == "nt":  # Windows
                startup_info = subprocess.STARTUPINFO()
                startup_info.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                startup_info.wShowWindow = subprocess.SW_HIDE
                creation_flags = subprocess.CREATE_NEW_PROCESS_GROUP

            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—Ç–æ–º
            env = os.environ.copy()
            env.update(
                {
                    "FLASK_ENV": self.config.mode.value,
                    "TESTING": "true" if self.config.mode == AppMode.TESTING else "false",
                    "PYTHONIOENCODING": "utf-8",
                    "PYTHONPATH": str(self.app_dir),
                    "APP_PORT": str(self.config.port),
                    "TEST_PORT": str(self.config.port),
                }
            )

            # –ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–æ—Ä—Ç–∞
            self.process = subprocess.Popen(
                [sys.executable, "-m", "app", "--port", str(self.config.port)],
                cwd=self.app_dir,
                env=env,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                startupinfo=startup_info,
                creationflags=creation_flags,
                text=True,
            )

            launch_time = time.perf_counter() - launch_start
            self._log(
                "üöÄ Subprocess –∑–∞–ø—É—â–µ–Ω",
                {"pid": self.process.pid, "launch_time": f"{launch_time:.3f}s"},
            )
            return True

        except Exception as e:
            self._log_error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ subprocess", e)
            return False

    def _wait_for_ready(self) -> bool:
        """–û–∂–∏–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        wait_start = time.perf_counter()
        max_wait_time = self.config.timeout
        check_interval = 0.5

        self._log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", {"timeout": max_wait_time})

        while (time.perf_counter() - wait_start) < max_wait_time:
            if not self.process or self.process.poll() is not None:
                self._log("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ")
                return False

            if self.is_app_running():
                wait_time = time.perf_counter() - wait_start
                self._log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ", {"wait_time": f"{wait_time:.3f}s"})
                return True

            time.sleep(check_interval)

        self._log("‚ùå Timeout –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
        return False

    def _log_info(self, message: str, extra: Optional[Dict[str, Any]] = None) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ErrorHandler –∏–ª–∏ print"""
        full_message = message
        if extra:
            extra_str = ", ".join(f"{k}: {v}" for k, v in extra.items())
            full_message = f"{message} | {extra_str}"

        if self.error_handler and hasattr(self.error_handler, "log_info"):
            try:
                self.error_handler.log_info(full_message)
                return
            except Exception as e:
                print(f"[ERROR] ErrorHandler failed: {e}")

        # Fallback: –ø—Ä–æ—Å—Ç–æ–π print
        print(f"[INFO] {full_message}")

    def _log_debug(self, message: str, extra: Optional[Dict[str, Any]] = None) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ ErrorHandler –∏–ª–∏ print"""
        full_message = message
        if extra:
            extra_str = ", ".join(f"{k}: {v}" for k, v in extra.items())
            full_message = f"{message} | {extra_str}"

        if self.error_handler and hasattr(self.error_handler, "log_debug"):
            try:
                self.error_handler.log_debug(full_message)
                return
            except Exception as e:
                print(f"[ERROR] ErrorHandler debug failed: {e}")

        # Fallback: print —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
        if self.config.debug:
            print(f"[DEBUG] {full_message}")

    def _log_error(self, message: str, error: Exception, context: str = "AppManager") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ ErrorHandler –∏–ª–∏ print"""
        if self.error_handler and hasattr(self.error_handler, "handle_error"):
            try:
                self.error_handler.handle_error(error, f"{context}: {message}")
                return
            except Exception as e:
                print(f"[ERROR] ErrorHandler.handle_error failed: {e}")

        # Fallback: –ø—Ä–æ—Å—Ç–æ–π print
        print(f"[ERROR] {context}: {message} | Error: {error}")

    def _is_process_alive(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.process:
            return False
        try:
            return self.process.poll() is None
        except Exception:
            return False

    def _log(self, message: str, details: Optional[Dict[str, Any]] = None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if self.error_handler and hasattr(self.error_handler, "log_info"):
            full_message = f"{message}"
            if details:
                detail_str = ", ".join([f"{k}={v}" for k, v in details.items()])
                full_message += f" ({detail_str})"
            self.error_handler.log_info(full_message)
        else:
            detail_str = ""
            if details:
                detail_str = " " + str(details)
            print(f"[AppManager] {message}{detail_str}")

    def _is_port_in_use(self, port: int) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞"""
        if self.port_manager:
            try:
                return self.port_manager.is_port_in_use(port)
            except Exception as e:
                self._log_debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ PortManager: {e}")

        # Fallback: –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ socket
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(1)
                result = sock.connect_ex(("127.0.0.1", port))
                return result == 0
        except Exception:
            return False

    def _cleanup_port(self, port: int) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞"""
        if self.port_manager:
            try:
                return self.port_manager.smart_cleanup(port)
            except Exception as e:
                self._log_debug(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ PortManager: {e}")

        # Fallback: –ø—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞
        self._log_debug(f"PortManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ—Ä—Ç–∞ {port}")
        return True

    def _find_free_port(self, start_port: int = 5000) -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
        if self.port_manager:
            try:
                return self.port_manager.find_free_port(start_port)
            except Exception as e:
                self._log_debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ PortManager: {e}")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú fallback - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ socket.bind
        for port in range(start_port, start_port + 100):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                    sock.bind(("127.0.0.1", port))  # ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ—Ä—Ç–µ–∂
                    return port
            except OSError:
                continue

        raise Exception(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {start_port}-{start_port + 100}")

    def _wait_for_port_free(self, port: int, timeout: int = 30) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞"""
        if self.port_manager:
            try:
                return self.port_manager.wait_for_port_free(port, timeout)
            except Exception as e:
                self._log_debug(f"–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ PortManager: {e}")

        # Fallback: –ø—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        start_time = time.time()
        while (time.time() - start_time) < timeout:
            if not self._is_port_in_use(port):
                return True
            time.sleep(1)
        return False


# === –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò ===


def create_test_manager(port: int = 5000) -> AppManager:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    config = AppConfig(
        port=port,
        mode=AppMode.TESTING,
        debug=True,
        auto_cleanup=True,
        force_kill=True,
        timeout=45,
    )
    return AppManager(config)


def create_external_manager(port: int = 5000) -> AppManager:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    config = AppConfig(
        port=port,
        mode=AppMode.EXTERNAL,
        debug=False,
        auto_cleanup=False,
        force_kill=False,
        timeout=10,
    )
    return AppManager(config)


def create_dev_manager(port: int = 5000) -> AppManager:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    config = AppConfig(
        port=port,
        mode=AppMode.DEVELOPMENT,
        debug=True,
        auto_cleanup=True,
        force_kill=False,
        timeout=30,
    )
    return AppManager(config)


# === ENTRY POINT ===


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import argparse

    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
    parser.add_argument("--port", type=int, default=5000, help="–ü–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    parser.add_argument("--mode", choices=["test", "dev", "external"], default="dev")
    parser.add_argument("--debug", action="store_true", help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if args.mode == "test":
        manager = create_test_manager(args.port)
    elif args.mode == "external":
        manager = create_external_manager(args.port)
    else:
        manager = create_dev_manager(args.port)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if manager.start_app():
        print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: {manager.app_url}")
        try:
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while manager.is_app_running():
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            manager.stop_app()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        sys.exit(1)


if __name__ == "__main__":
    main()
