import time

import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait


class TestAIModels:
    @pytest.fixture(scope="function")
    def driver(self):
        driver = webdriver.Chrome()
        driver.maximize_window()
        yield driver
        driver.quit()

    def test_ai_models_container_elements(self, driver):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π –ò–ò"""
        driver.get("http://localhost:5001")
        wait = WebDriverWait(driver, 10)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π –ò–ò
        models_container = wait.until(
            EC.presence_of_element_located((By.CLASS_NAME, "ai-models-container"))
        )
        assert models_container is not None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        models_header = models_container.find_element(By.CLASS_NAME, "section-header")
        assert "–ú–æ–¥–µ–ª–∏ –ò–ò" in models_header.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        models_list = models_container.find_element(By.CLASS_NAME, "ai-models-list")
        assert models_list is not None

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        model_items_static = models_list.find_elements(By.CSS_SELECTOR, "div.ai-model-item")

        if len(model_items_static) > 0:
            model_items = model_items_static
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ ai-model-item: {len(model_items)}")
        else:
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ai-model-item...")
            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                wait.until(EC.presence_of_element_located((By.CLASS_NAME, "ai-model-item")))
                model_items = models_list.find_elements(By.CLASS_NAME, "ai-model-item")
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ ai-model-item: {len(model_items)}")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ai-model-item: {e}")
                inner_html_attr = models_list.get_attribute("innerHTML")
                inner_html = inner_html_attr if inner_html_attr is not None else ""
                print(
                    "üîç HTML models_list:"
                    f" {inner_html[:500] if inner_html else '–ê—Ç—Ä–∏–±—É—Ç innerHTML –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}..."
                )
                model_items = []

        assert len(model_items) > 0, f"–û–∂–∏–¥–∞–ª–∏—Å—å ai-model-item —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–∞–π–¥–µ–Ω–æ {len(model_items)}"

    def test_model_item_structure(self, driver):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –º–æ–¥–µ–ª–∏"""
        driver.get("http://localhost:5001")
        wait = WebDriverWait(driver, 10)

        # –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–æ–¥–µ–ª–∏
        model_item = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "ai-model-item")))
        assert model_item is not None

        model_info = model_item.find_element(By.CLASS_NAME, "model-info")
        assert model_info is not None

        model_name = model_info.find_element(By.CLASS_NAME, "model-name")
        assert model_name.text != ""

        model_status = model_info.find_element(By.CLASS_NAME, "model-status")
        assert model_status is not None
        print(f"‚úÖ –ú–æ–¥–µ–ª—å: {model_name.text}, –°—Ç–∞—Ç—É—Å: {model_status.text}")

    def test_model_status_indicator(self, driver):
        """–¢–µ—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏"""
        driver.get("http://localhost:5001")
        wait = WebDriverWait(driver, 10)

        try:
            # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –±—É–¥–µ—Ç –≤–∏–¥–∏–º—ã–º/–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º presence_of_all_elements_located, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫
            model_statuses = wait.until(
                EC.presence_of_all_elements_located(
                    (By.CSS_SELECTOR, ".ai-model-item .model-status")
                )
            )
            print(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã .model-status ({len(model_statuses)}) –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è.")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ .model-status –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
            try:
                models_container_html_attr = driver.find_element(
                    By.CLASS_NAME, "ai-models-container"
                ).get_attribute("innerHTML")
                models_container_html = (
                    models_container_html_attr if models_container_html_attr is not None else ""
                )
                print(f"üîç HTML ai-models-container: {models_container_html[:1000]}...")
            except:
                print("üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.")
            model_statuses = []

        assert len(model_statuses) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–æ–¥–µ–ª–µ–π"

        for status_element in model_statuses:
            parent_item = status_element.find_element(
                By.XPATH, "./ancestor::div[contains(@class, 'ai-model-item')]"
            )
            status_classes_attr = parent_item.get_attribute("class")
            status_classes = status_classes_attr if status_classes_attr is not None else ""
            status_text = status_element.text.lower()
            print(f"üîç –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: '{status_text}', –∫–ª–∞—Å—Å—ã —Ä–æ–¥–∏—Ç–µ–ª—è: '{status_classes}'")

            if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in status_text:
                assert "unavailable" in status_classes or "offline" in status_classes, (
                    f"–û–∂–∏–¥–∞–ª—Å—è –∫–ª–∞—Å—Å 'unavailable' –∏–ª–∏ 'offline' –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '{status_text}',"
                    f" –∫–ª–∞—Å—Å—ã: '{status_classes}'"
                )
            elif "–¥–æ—Å—Ç—É–ø–Ω–∞" in status_text:
                assert "available" in status_classes or "online" in status_classes, (
                    f"–û–∂–∏–¥–∞–ª—Å—è –∫–ª–∞—Å—Å 'available' –∏–ª–∏ 'online' –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '{status_text}', –∫–ª–∞—Å—Å—ã:"
                    f" '{status_classes}'"
                )

    def test_refresh_models_button(self, driver):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π"""
        driver.get("http://localhost:5001")
        wait = WebDriverWait(driver, 10)

        refresh_button = wait.until(EC.element_to_be_clickable((By.ID, "check-ai-models-btn")))
        assert refresh_button is not None
        refresh_button.click()

        try:
            time.sleep(1)
            all_statuses = wait.until(
                EC.presence_of_all_elements_located(
                    (By.CSS_SELECTOR, ".ai-model-item .model-status")
                )
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(all_statuses)}")
            assert (
                len(all_statuses) > 0
            ), "–°—Ç–∞—Ç—É—Å—ã –º–æ–¥–µ–ª–µ–π –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏."
        except Exception as e:
            print(
                "‚ùå –°—Ç–∞—Ç—É—Å—ã –º–æ–¥–µ–ª–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã/–Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏"
                f" –æ–∂–∏–¥–∞–Ω–∏—è: {e}"
            )
            pytest.fail(f"–°—Ç–∞—Ç—É—Å—ã –º–æ–¥–µ–ª–µ–π –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å: {e}")

    def test_model_selection(self, driver):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        driver.get("http://localhost:5001")
        wait = WebDriverWait(driver, 20)

        try:
            initial_model_items = wait.until(
                EC.presence_of_all_elements_located((By.CLASS_NAME, "ai-model-item"))
            )
            print(f"‚úÖ –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–æ {len(initial_model_items)} ai-model-item —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")
            assert len(initial_model_items) > 0, "–≠–ª–µ–º–µ–Ω—Ç—ã ai-model-item –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
        except Exception as e:
            print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã ai-model-item –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {e}")
            pytest.fail(f"–≠–ª–µ–º–µ–Ω—Ç—ã ai-model-item –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {e}")

        available_models_info = []
        for index, model_element in enumerate(initial_model_items):
            try:
                if not EC.staleness_of(model_element)(driver):
                    classes_attr = model_element.get_attribute("class")
                    classes = classes_attr if classes_attr is not None else ""
                    if "available" in classes or "online" in classes:
                        model_name_element = model_element.find_element(By.CLASS_NAME, "model-name")
                        available_models_info.append(
                            {
                                "index": index,
                                "name": model_name_element.text,
                                "original_classes": classes,
                            }
                        )
                else:
                    print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç {index} —É—Å—Ç–∞—Ä–µ–ª –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª–∞—Å—Å–æ–≤.")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {index}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

        print(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞: {len(available_models_info)}")

        if not available_models_info:
            print("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞. –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")
            return

        model_to_select_info = available_models_info[0]
        print(
            f"‚ÑπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å: '{model_to_select_info['name']}' —Å –∏–Ω–¥–µ–∫—Å–æ–º"
            f" {model_to_select_info['index']}"
        )

        try:
            current_model_items = driver.find_elements(By.CLASS_NAME, "ai-model-item")
            if model_to_select_info["index"] < len(current_model_items):
                model_to_click = current_model_items[model_to_select_info["index"]]

                wait.until(EC.element_to_be_clickable(model_to_click))
                print(f"üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –º–æ–¥–µ–ª–∏: '{model_to_select_info['name']}'")
                model_to_click.click()

                # –û–ñ–ò–î–ê–ù–ò–ï –ü–û–Ø–í–õ–ï–ù–ò–Ø –ö–õ–ê–°–°–ê
                def check_selection_class(driver_instance):
                    refreshed_items = driver_instance.find_elements(By.CLASS_NAME, "ai-model-item")
                    if model_to_select_info["index"] < len(refreshed_items):
                        selected_item_after_click = refreshed_items[model_to_select_info["index"]]
                        current_classes_attr = selected_item_after_click.get_attribute("class")
                        current_classes = (
                            current_classes_attr if current_classes_attr is not None else ""
                        )
                        print(
                            f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è '{model_to_select_info['name']}':"
                            f" '{current_classes}'"
                        )  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                        return "selected" in current_classes or "active" in current_classes
                    return False

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –∏–∑ 'wait' –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–≤–µ–Ω 20 —Å–µ–∫—É–Ω–¥–∞–º
                wait.until(
                    check_selection_class,
                    message=(
                        "–ö–ª–∞—Å—Å 'selected' –∏–ª–∏ 'active' –Ω–µ –ø–æ—è–≤–∏–ª—Å—è —É –º–æ–¥–µ–ª–∏"
                        f" '{model_to_select_info['name']}' –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ"
                        f" {wait._timeout} —Å–µ–∫—É–Ω–¥."
                    ),
                )

                final_model_items = driver.find_elements(By.CLASS_NAME, "ai-model-item")
                selected_model_element_final = final_model_items[model_to_select_info["index"]]
                updated_classes_attr = selected_model_element_final.get_attribute("class")
                updated_classes = updated_classes_attr if updated_classes_attr is not None else ""

                print(
                    f"‚úÖ –ú–æ–¥–µ–ª—å '{model_to_select_info['name']}' –≤—ã–±—Ä–∞–Ω–∞, –∫–ª–∞—Å—Å—ã: {updated_classes}"
                )
                assert "selected" in updated_classes or "active" in updated_classes, (
                    f"–ú–æ–¥–µ–ª—å '{model_to_select_info['name']}' –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∫–ª–∞—Å—Å 'selected' –∏–ª–∏"
                    f" 'active', –Ω–æ –∏–º–µ–µ—Ç '{updated_classes}'"
                )
            else:
                pytest.fail(
                    f"–ò–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏ {model_to_select_info['index']} –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ"
                    " –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
                )

        except Exception as e:
            print(
                "‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏"
                f" '{model_to_select_info['name']}': {e}"
            )
            timestamp = time.strftime("%Y%m%d-%H%M%S")
            screenshot_filename = f"error_model_selection_{timestamp}.png"
            driver.save_screenshot(screenshot_filename)
            print(f"üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_filename}")
            pytest.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏: {e}")
