"""Add chat session and message tables

Revision ID: 23f71567fb29
Revises: 001f5f096665
Create Date: 2025-06-27 18:10:48.483815

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "23f71567fb29"
down_revision: Union[str, None] = "001f5f096665"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "api_keys",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("provider", sa.String(length=100), nullable=False),
        sa.Column("key_value", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_default", sa.Boolean(), nullable=True),
        sa.Column("monthly_limit_usd", sa.Float(), nullable=True),
        sa.Column("current_usage_usd", sa.Float(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("last_used_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("api_keys", schema=None) as batch_op:
        batch_op.create_index(
            "idx_api_keys_user_provider", ["user_id", "provider", "is_active"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_api_keys_id"), ["id"], unique=False)

    op.create_table(
        "chat_sessions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=200), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "commands",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("command_text", sa.Text(), nullable=False),
        sa.Column("command_type", sa.String(length=100), nullable=True),
        sa.Column("category", sa.String(length=100), nullable=True),
        sa.Column("status", sa.String(length=50), nullable=True),
        sa.Column("priority", sa.Integer(), nullable=True),
        sa.Column("result_summary", sa.Text(), nullable=True),
        sa.Column("completion_percentage", sa.Float(), nullable=True),
        sa.Column("accuracy_percentage", sa.Float(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("duration_seconds", sa.Float(), nullable=True),
        sa.Column("source_ip", sa.String(length=45), nullable=True),
        sa.Column("user_agent", sa.String(length=500), nullable=True),
        sa.Column("session_id", sa.String(length=100), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("commands", schema=None) as batch_op:
        batch_op.create_index("idx_commands_user_created", ["user_id", "created_at"], unique=False)
        batch_op.create_index(batch_op.f("ix_commands_created_at"), ["created_at"], unique=False)
        batch_op.create_index(batch_op.f("ix_commands_id"), ["id"], unique=False)

    op.create_table(
        "model_performance",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("model_id", sa.Integer(), nullable=False),
        sa.Column("total_requests", sa.Integer(), nullable=True),
        sa.Column("successful_requests", sa.Integer(), nullable=True),
        sa.Column("failed_requests", sa.Integer(), nullable=True),
        sa.Column("avg_response_time_ms", sa.Float(), nullable=True),
        sa.Column("min_response_time_ms", sa.Float(), nullable=True),
        sa.Column("max_response_time_ms", sa.Float(), nullable=True),
        sa.Column("total_tokens_used", sa.Integer(), nullable=True),
        sa.Column("total_cost_usd", sa.Float(), nullable=True),
        sa.Column("avg_cost_per_request", sa.Float(), nullable=True),
        sa.Column("avg_user_rating", sa.Float(), nullable=True),
        sa.Column("success_rate_percentage", sa.Float(), nullable=True),
        sa.Column("measurement_period", sa.String(length=20), nullable=True),
        sa.Column("period_start", sa.DateTime(timezone=True), nullable=True),
        sa.Column("period_end", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["model_id"],
            ["ai_models.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("model_performance", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_model_performance_id"), ["id"], unique=False)

    op.create_table(
        "system_logs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("level", sa.String(length=20), nullable=False),
        sa.Column("message", sa.Text(), nullable=False),
        sa.Column("source", sa.String(length=100), nullable=True),
        sa.Column("category", sa.String(length=50), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("session_id", sa.String(length=100), nullable=True),
        sa.Column("request_id", sa.String(length=100), nullable=True),
        sa.Column("extra_data", sa.JSON(), nullable=True),
        sa.Column("stack_trace", sa.Text(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("system_logs", schema=None) as batch_op:
        batch_op.create_index(
            "idx_system_logs_level_created", ["level", "created_at"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_system_logs_created_at"), ["created_at"], unique=False)
        batch_op.create_index(batch_op.f("ix_system_logs_id"), ["id"], unique=False)

    op.create_table(
        "user_sessions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("session_token", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("user_agent", sa.String(length=500), nullable=True),
        sa.Column("ip_address", sa.String(length=45), nullable=True),
        sa.Column("device_info", sa.JSON(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "last_activity_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("user_sessions", schema=None) as batch_op:
        batch_op.create_index(
            "idx_user_sessions_token_active", ["session_token", "is_active"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_user_sessions_id"), ["id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_user_sessions_session_token"), ["session_token"], unique=True
        )

    op.create_table(
        "chat_messages",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("session_id", sa.Integer(), nullable=False),
        sa.Column("role", sa.String(length=50), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["chat_sessions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "command_executions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("command_id", sa.Integer(), nullable=False),
        sa.Column("ai_model_id", sa.Integer(), nullable=True),
        sa.Column("input_prompt", sa.Text(), nullable=True),
        sa.Column("model_response", sa.Text(), nullable=True),
        sa.Column("processed_result", sa.Text(), nullable=True),
        sa.Column("tokens_used", sa.Integer(), nullable=True),
        sa.Column("response_time_ms", sa.Integer(), nullable=True),
        sa.Column("cost_estimate", sa.Float(), nullable=True),
        sa.Column("status", sa.String(length=50), nullable=True),
        sa.Column("error_code", sa.String(length=100), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column(
            "started_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["ai_model_id"],
            ["ai_models.id"],
        ),
        sa.ForeignKeyConstraint(
            ["command_id"],
            ["commands.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("command_executions", schema=None) as batch_op:
        batch_op.create_index(
            "idx_command_executions_model_status", ["ai_model_id", "status"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_command_executions_id"), ["id"], unique=False)

    op.create_table(
        "command_steps",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("command_id", sa.Integer(), nullable=False),
        sa.Column("step_number", sa.Integer(), nullable=False),
        sa.Column("step_type", sa.String(length=100), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("generated_code", sa.Text(), nullable=True),
        sa.Column("execution_result", sa.Text(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("status", sa.String(length=50), nullable=True),
        sa.Column("completion_percentage", sa.Float(), nullable=True),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("duration_seconds", sa.Float(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["command_id"],
            ["commands.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("command_steps", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_command_steps_id"), ["id"], unique=False)

    with op.batch_alter_table("ai_models", schema=None) as batch_op:
        batch_op.alter_column(
            "is_api",
            existing_type=sa.BOOLEAN(),
            nullable=True,
            existing_server_default=sa.text("false"),
        )
        batch_op.alter_column(
            "is_local",
            existing_type=sa.BOOLEAN(),
            nullable=True,
            existing_server_default=sa.text("false"),
        )
        batch_op.alter_column(
            "is_free",
            existing_type=sa.BOOLEAN(),
            nullable=True,
            existing_server_default=sa.text("false"),
        )
        batch_op.alter_column(
            "status",
            existing_type=sa.VARCHAR(length=50),
            nullable=True,
            existing_server_default=sa.text("'inactive'::character varying"),
        )
        batch_op.alter_column(
            "pipeline_tag",
            existing_type=sa.VARCHAR(length=200),
            type_=sa.String(length=100),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "model_size",
            existing_type=sa.VARCHAR(length=200),
            type_=sa.String(length=50),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            nullable=True,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
            existing_server_default=sa.text("now()"),
        )
        batch_op.alter_column(
            "configuration",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=sa.JSON(),
            nullable=True,
            existing_server_default=sa.text("'{}'::jsonb"),
        )
        batch_op.alter_column(
            "capabilities",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=sa.JSON(),
            nullable=True,
            existing_server_default=sa.text("'{}'::jsonb"),
        )
        batch_op.create_index(
            "idx_ai_models_hf_sync", ["hf_model_id", "last_sync_at"], unique=False
        )
        batch_op.create_index("idx_ai_models_provider_status", ["provider", "status"], unique=False)
        batch_op.create_index(batch_op.f("ix_ai_models_id"), ["id"], unique=False)

    with op.batch_alter_table("routing_rules", schema=None) as batch_op:
        batch_op.add_column(sa.Column("rule_type", sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column("pattern", sa.String(length=255), nullable=False))
        batch_op.alter_column(
            "priority",
            existing_type=sa.INTEGER(),
            nullable=True,
            existing_server_default=sa.text("1"),
        )
        batch_op.alter_column(
            "is_active",
            existing_type=sa.BOOLEAN(),
            nullable=True,
            existing_server_default=sa.text("true"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            nullable=True,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            nullable=True,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.create_index(batch_op.f("ix_routing_rules_id"), ["id"], unique=False)
        batch_op.drop_column("conditions")
        batch_op.drop_column("user_id")

    with op.batch_alter_table("task_executions", schema=None) as batch_op:
        batch_op.add_column(sa.Column("input_data", sa.Text(), nullable=True))
        batch_op.add_column(sa.Column("output_data", sa.Text(), nullable=True))
        batch_op.alter_column("task_id", existing_type=sa.INTEGER(), nullable=False)
        batch_op.alter_column(
            "status",
            existing_type=sa.VARCHAR(length=50),
            nullable=True,
            existing_server_default=sa.text("'running'::character varying"),
        )
        batch_op.alter_column(
            "started_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            nullable=True,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "completed_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
        )
        batch_op.create_index(batch_op.f("ix_task_executions_id"), ["id"], unique=False)
        batch_op.drop_column("cost")
        batch_op.drop_column("error")
        batch_op.drop_column("execution_log")
        batch_op.drop_column("result")
        batch_op.drop_column("metrics")
        batch_op.drop_column("tokens_used")

    with op.batch_alter_table("tasks", schema=None) as batch_op:
        batch_op.add_column(sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True))
        batch_op.alter_column("user_id", existing_type=sa.INTEGER(), nullable=False)
        batch_op.alter_column(
            "status",
            existing_type=sa.VARCHAR(length=50),
            nullable=True,
            existing_server_default=sa.text("'created'::character varying"),
        )
        batch_op.alter_column(
            "priority",
            existing_type=sa.INTEGER(),
            nullable=True,
            existing_server_default=sa.text("1"),
        )
        batch_op.alter_column(
            "due_date",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            nullable=True,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            nullable=True,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.create_index("idx_tasks_user_status", ["user_id", "status"], unique=False)
        batch_op.create_index(batch_op.f("ix_tasks_id"), ["id"], unique=False)
        batch_op.drop_column("metadata")

    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.add_column(sa.Column("preferred_language", sa.String(length=10), nullable=True))
        batch_op.add_column(sa.Column("timezone", sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column("preferences", sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column("total_commands", sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column("successful_commands", sa.Integer(), nullable=True))
        batch_op.add_column(
            sa.Column("last_activity_at", sa.DateTime(timezone=True), nullable=True)
        )
        batch_op.alter_column(
            "is_active",
            existing_type=sa.BOOLEAN(),
            nullable=True,
            existing_server_default=sa.text("true"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            nullable=True,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.drop_constraint("users_email_key", type_="unique")
        batch_op.drop_constraint("users_username_key", type_="unique")
        batch_op.drop_column("settings")
        batch_op.drop_column("last_login")

    with op.batch_alter_table("workflow_steps", schema=None) as batch_op:
        batch_op.add_column(sa.Column("order", sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column("configuration", sa.JSON(), nullable=True))
        batch_op.add_column(
            sa.Column(
                "created_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("now()"),
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "updated_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("now()"),
                nullable=True,
            )
        )
        batch_op.alter_column("workflow_id", existing_type=sa.INTEGER(), nullable=False)
        batch_op.create_index(batch_op.f("ix_workflow_steps_id"), ["id"], unique=False)
        batch_op.drop_column("order_index")
        batch_op.drop_column("model_id")
        batch_op.drop_column("config")
        batch_op.drop_column("type")
        batch_op.drop_column("required")

    with op.batch_alter_table("workflows", schema=None) as batch_op:
        batch_op.add_column(sa.Column("is_active", sa.Boolean(), nullable=True))
        batch_op.alter_column("user_id", existing_type=sa.INTEGER(), nullable=False)
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            nullable=True,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            nullable=True,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.create_index(batch_op.f("ix_workflows_id"), ["id"], unique=False)
        batch_op.drop_column("is_public")
        batch_op.drop_column("config")
        batch_op.drop_column("is_template")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("workflows", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "is_template",
                sa.BOOLEAN(),
                server_default=sa.text("false"),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.add_column(
            sa.Column(
                "config",
                postgresql.JSONB(astext_type=sa.Text()),
                server_default=sa.text("'{}'::jsonb"),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.add_column(
            sa.Column(
                "is_public",
                sa.BOOLEAN(),
                server_default=sa.text("false"),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.drop_index(batch_op.f("ix_workflows_id"))
        batch_op.alter_column(
            "updated_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column("user_id", existing_type=sa.INTEGER(), nullable=True)
        batch_op.drop_column("is_active")

    with op.batch_alter_table("workflow_steps", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "required",
                sa.BOOLEAN(),
                server_default=sa.text("true"),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.add_column(
            sa.Column("type", sa.VARCHAR(length=100), autoincrement=False, nullable=False)
        )
        batch_op.add_column(
            sa.Column(
                "config",
                postgresql.JSONB(astext_type=sa.Text()),
                server_default=sa.text("'{}'::jsonb"),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.add_column(sa.Column("model_id", sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(
            sa.Column("order_index", sa.INTEGER(), autoincrement=False, nullable=False)
        )
        batch_op.drop_index(batch_op.f("ix_workflow_steps_id"))
        batch_op.alter_column("workflow_id", existing_type=sa.INTEGER(), nullable=True)
        batch_op.drop_column("updated_at")
        batch_op.drop_column("created_at")
        batch_op.drop_column("configuration")
        batch_op.drop_column("order")

    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("last_login", postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
        )
        batch_op.add_column(
            sa.Column(
                "settings",
                postgresql.JSONB(astext_type=sa.Text()),
                server_default=sa.text("'{}'::jsonb"),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.create_unique_constraint(
            "users_username_key", ["username"], postgresql_nulls_not_distinct=False
        )
        batch_op.create_unique_constraint(
            "users_email_key", ["email"], postgresql_nulls_not_distinct=False
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "is_active",
            existing_type=sa.BOOLEAN(),
            nullable=False,
            existing_server_default=sa.text("true"),
        )
        batch_op.drop_column("last_activity_at")
        batch_op.drop_column("successful_commands")
        batch_op.drop_column("total_commands")
        batch_op.drop_column("preferences")
        batch_op.drop_column("timezone")
        batch_op.drop_column("preferred_language")

    with op.batch_alter_table("tasks", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "metadata",
                postgresql.JSONB(astext_type=sa.Text()),
                server_default=sa.text("'{}'::jsonb"),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.drop_index(batch_op.f("ix_tasks_id"))
        batch_op.drop_index("idx_tasks_user_status")
        batch_op.alter_column(
            "updated_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "due_date",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "priority",
            existing_type=sa.INTEGER(),
            nullable=False,
            existing_server_default=sa.text("1"),
        )
        batch_op.alter_column(
            "status",
            existing_type=sa.VARCHAR(length=50),
            nullable=False,
            existing_server_default=sa.text("'created'::character varying"),
        )
        batch_op.alter_column("user_id", existing_type=sa.INTEGER(), nullable=True)
        batch_op.drop_column("completed_at")

    with op.batch_alter_table("task_executions", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "tokens_used",
                sa.INTEGER(),
                server_default=sa.text("0"),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "metrics",
                postgresql.JSONB(astext_type=sa.Text()),
                server_default=sa.text("'{}'::jsonb"),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "result",
                postgresql.JSONB(astext_type=sa.Text()),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column("execution_log", sa.TEXT(), autoincrement=False, nullable=True)
        )
        batch_op.add_column(sa.Column("error", sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(
            sa.Column(
                "cost",
                sa.NUMERIC(precision=10, scale=6),
                server_default=sa.text("0"),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.drop_index(batch_op.f("ix_task_executions_id"))
        batch_op.alter_column(
            "completed_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "started_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "status",
            existing_type=sa.VARCHAR(length=50),
            nullable=False,
            existing_server_default=sa.text("'running'::character varying"),
        )
        batch_op.alter_column("task_id", existing_type=sa.INTEGER(), nullable=True)
        batch_op.drop_column("output_data")
        batch_op.drop_column("input_data")

    with op.batch_alter_table("routing_rules", schema=None) as batch_op:
        batch_op.add_column(sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(
            sa.Column(
                "conditions",
                postgresql.JSONB(astext_type=sa.Text()),
                server_default=sa.text("'{}'::jsonb"),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.drop_index(batch_op.f("ix_routing_rules_id"))
        batch_op.alter_column(
            "updated_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "is_active",
            existing_type=sa.BOOLEAN(),
            nullable=False,
            existing_server_default=sa.text("true"),
        )
        batch_op.alter_column(
            "priority",
            existing_type=sa.INTEGER(),
            nullable=False,
            existing_server_default=sa.text("1"),
        )
        batch_op.drop_column("pattern")
        batch_op.drop_column("rule_type")

    with op.batch_alter_table("ai_models", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ai_models_id"))
        batch_op.drop_index("idx_ai_models_provider_status")
        batch_op.drop_index("idx_ai_models_hf_sync")
        batch_op.alter_column(
            "capabilities",
            existing_type=sa.JSON(),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            existing_server_default=sa.text("'{}'::jsonb"),
        )
        batch_op.alter_column(
            "configuration",
            existing_type=sa.JSON(),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            existing_server_default=sa.text("'{}'::jsonb"),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=True,
            existing_server_default=sa.text("now()"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
            existing_server_default=sa.text("CURRENT_TIMESTAMP"),
        )
        batch_op.alter_column(
            "model_size",
            existing_type=sa.String(length=50),
            type_=sa.VARCHAR(length=200),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "pipeline_tag",
            existing_type=sa.String(length=100),
            type_=sa.VARCHAR(length=200),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "status",
            existing_type=sa.VARCHAR(length=50),
            nullable=False,
            existing_server_default=sa.text("'inactive'::character varying"),
        )
        batch_op.alter_column(
            "is_free",
            existing_type=sa.BOOLEAN(),
            nullable=False,
            existing_server_default=sa.text("false"),
        )
        batch_op.alter_column(
            "is_local",
            existing_type=sa.BOOLEAN(),
            nullable=False,
            existing_server_default=sa.text("false"),
        )
        batch_op.alter_column(
            "is_api",
            existing_type=sa.BOOLEAN(),
            nullable=False,
            existing_server_default=sa.text("false"),
        )

    with op.batch_alter_table("command_steps", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_command_steps_id"))

    op.drop_table("command_steps")
    with op.batch_alter_table("command_executions", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_command_executions_id"))
        batch_op.drop_index("idx_command_executions_model_status")

    op.drop_table("command_executions")
    op.drop_table("chat_messages")
    with op.batch_alter_table("user_sessions", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_sessions_session_token"))
        batch_op.drop_index(batch_op.f("ix_user_sessions_id"))
        batch_op.drop_index("idx_user_sessions_token_active")

    op.drop_table("user_sessions")
    with op.batch_alter_table("system_logs", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_system_logs_id"))
        batch_op.drop_index(batch_op.f("ix_system_logs_created_at"))
        batch_op.drop_index("idx_system_logs_level_created")

    op.drop_table("system_logs")
    with op.batch_alter_table("model_performance", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_model_performance_id"))

    op.drop_table("model_performance")
    with op.batch_alter_table("commands", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_commands_id"))
        batch_op.drop_index(batch_op.f("ix_commands_created_at"))
        batch_op.drop_index("idx_commands_user_created")

    op.drop_table("commands")
    op.drop_table("chat_sessions")
    with op.batch_alter_table("api_keys", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_api_keys_id"))
        batch_op.drop_index("idx_api_keys_user_provider")

    op.drop_table("api_keys")
    # ### end Alembic commands ###
