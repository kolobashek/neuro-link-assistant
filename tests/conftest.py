import os
import sys
import tempfile
import uuid
from unittest.mock import patch

import pytest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç
TEST_PORT = 5100

print(f"üß™ [TESTS] –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç: {TEST_PORT}")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
os.environ["TEST_PORT"] = str(TEST_PORT)
os.environ["TESTING"] = "true"

# ===== –ë–ê–ó–û–í–´–ï –§–ò–ö–°–¢–£–†–´ =====


@pytest.fixture(scope="session")
def test_port():
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    return TEST_PORT


@pytest.fixture(scope="session")
def base_url(test_port):
    """–ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return f"http://localhost:{test_port}"


# ===== –§–ò–ö–°–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• =====


@pytest.fixture(scope="session")
def test_db_engine():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è SQLite
    db_fd, db_path = tempfile.mkstemp(suffix=".db")
    test_db_url = f"sqlite:///{db_path}"

    print(f"üîç [DB] –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î: {test_db_url}")

    # –ü–∞—Ç—á–∏–º DATABASE_URL –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
    with patch.dict(os.environ, {"DATABASE_URL": test_db_url}):
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –ø–∞—Ç—á–∏–Ω–≥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            from core.db.connection import get_engine
            from core.db.models import Base

            engine = get_engine()

            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            print("üîç [DB] –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
            Base.metadata.create_all(engine)
            print("‚úÖ [DB] –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

            yield engine

        except Exception as e:
            print(f"‚ùå [DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î: {e}")
            raise
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            try:
                print("üîç [DB] –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î...")
                Base.metadata.drop_all(engine)
                engine.dispose()
                os.close(db_fd)
                os.unlink(db_path)
                print("‚úÖ [DB] –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –æ—á–∏—â–µ–Ω–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è [DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


@pytest.fixture(scope="function")
def db_session(test_db_engine):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
    from sqlalchemy.orm import sessionmaker

    SessionLocal = sessionmaker(bind=test_db_engine)
    session = SessionLocal()

    try:
        yield session
    finally:
        session.rollback()
        session.close()


# ===== –§–ò–ö–°–¢–£–†–´ FLASK –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====


@pytest.fixture(scope="session")
def test_app(test_db_engine):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    # –ü–∞—Ç—á–∏–º DATABASE_URL –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    test_db_url = str(test_db_engine.url)

    print(f"üîç [APP] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ë–î: {test_db_url}")

    with patch.dict(os.environ, {"DATABASE_URL": test_db_url}):
        try:
            from app import init_app

            app = init_app()
            app.config.update(
                {
                    "TESTING": True,
                    "DEBUG": True,
                    "SECRET_KEY": "test-secret-key",
                    "WTF_CSRF_ENABLED": False,
                }
            )

            print("‚úÖ [APP] –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            yield app

        except Exception as e:
            print(f"‚ùå [APP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            raise


@pytest.fixture(scope="function")
def app_client(test_app, db_session):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Flask –¥–ª—è API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    # –ü–∞—Ç—á–∏–º get_db –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    def get_test_db():
        yield db_session

    import core.db.connection

    original_get_db = core.db.connection.get_db

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–∞—Ç—á–∏–Ω–≥
    core.db.connection.get_db = get_test_db

    try:
        with test_app.test_client() as client:
            with test_app.app_context():
                print("üîç [CLIENT] –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤")
                yield client
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        core.db.connection.get_db = original_get_db
        print("‚úÖ [CLIENT] –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –æ—á–∏—â–µ–Ω")


# ===== –§–ò–ö–°–¢–£–†–´ UI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====


@pytest.fixture(scope="session")
def ui_client(base_url):
    """–°–æ–∑–¥–∞–µ—Ç WebDriver –¥–ª—è UI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver...")

    chrome_options = Options()

    # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    debug_mode = os.environ.get("UI_DEBUG", "false").lower() == "true"

    if not debug_mode:
        chrome_options.add_argument("--headless")

    # –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è Windows
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1280,720")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--remote-debugging-port=0")
    chrome_options.add_argument("--disable-web-security")
    chrome_options.add_argument("--log-level=3")

    # Windows-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏
    if os.name == "nt":
        chrome_options.add_argument("--no-first-run")
        chrome_options.add_argument("--no-default-browser-check")
        chrome_options.add_argument("--disable-default-apps")

    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option("useAutomationExtension", False)

    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.set_page_load_timeout(60)
        driver.implicitly_wait(10)

        print("‚úÖ WebDriver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        driver.get("data:text/html,<html><body><h1>Test OK</h1></body></html>")
        print("‚úÖ WebDriver —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")

        yield driver

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {e}")
        pytest.skip(f"WebDriver –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    finally:
        try:
            driver.quit()
            print("‚úÖ WebDriver –∑–∞–∫—Ä—ã—Ç")
        except:
            pass


# ===== –§–ò–ö–°–¢–£–†–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò =====


@pytest.fixture(scope="function")
def sample_user(db_session):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    import secrets

    from core.db.models import User
    from core.security.password import hash_password

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    user_id = str(uuid.uuid4())[:8]
    salt = secrets.token_hex(16)
    password_hash, _ = hash_password("testpassword123", salt)

    user = User(
        username=f"testuser_{user_id}",
        email=f"test_{user_id}@example.com",
        password_hash=password_hash,
        salt=salt,
        display_name=f"Test User {user_id}",
        role="user",
        is_active=True,
    )

    db_session.add(user)
    db_session.commit()
    db_session.refresh(user)

    return user


@pytest.fixture(scope="function")
def authenticated_client(app_client, sample_user):
    """–ö–ª–∏–µ–Ω—Ç —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    import json

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
    login_data = {"username": sample_user.username, "password": "testpassword123"}

    response = app_client.post(
        "/api/auth/login", data=json.dumps(login_data), content_type="application/json"
    )

    assert response.status_code == 200
    result = response.get_json()
    token = result["access_token"]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º
    class AuthenticatedClient:
        def __init__(self, client, token):
            self.client = client
            self.token = token
            self.headers = {"Authorization": f"Bearer {token}"}

        def get(self, *args, **kwargs):
            kwargs.setdefault("headers", {}).update(self.headers)
            return self.client.get(*args, **kwargs)

        def post(self, *args, **kwargs):
            kwargs.setdefault("headers", {}).update(self.headers)
            return self.client.post(*args, **kwargs)

        def put(self, *args, **kwargs):
            kwargs.setdefault("headers", {}).update(self.headers)
            return self.client.put(*args, **kwargs)

        def delete(self, *args, **kwargs):
            kwargs.setdefault("headers", {}).update(self.headers)
            return self.client.delete(*args, **kwargs)

    yield AuthenticatedClient(app_client, token)


# ===== –£–¢–ò–õ–ò–¢–´ =====


@pytest.fixture(scope="function")
def unique_test_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
    return str(uuid.uuid4())[:8]


# ===== –ù–ê–°–¢–†–û–ô–ö–ò PYTEST =====


def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest."""
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
    config.addinivalue_line("markers", "ui: marks tests as UI tests")
    config.addinivalue_line("markers", "integration: marks tests as integration tests")
    config.addinivalue_line("markers", "auth: marks tests as authentication tests")
    config.addinivalue_line("markers", "slow: marks tests as slow running")


def pytest_collection_modifyitems(config, items):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ—Ç —Ç–µ—Å—Ç—ã –º–∞—Ä–∫–µ—Ä–∞–º–∏."""
    for item in items:
        # UI —Ç–µ—Å—Ç—ã
        if "ui" in item.nodeid.lower():
            item.add_marker(pytest.mark.ui)

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        if "integration" in item.nodeid:
            item.add_marker(pytest.mark.integration)

        # –¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if "auth" in item.nodeid:
            item.add_marker(pytest.mark.auth)


# ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê =====


@pytest.fixture(scope="session", autouse=True)
def cleanup_test_environment():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É."""
    print("üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")

    # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
    yield

    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞


# ===== –û–¢–õ–ê–î–û–ß–ù–´–ï –§–ò–ö–°–¢–£–†–´ =====


@pytest.fixture(autouse=True)
def test_debug_info(request):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    test_name = request.node.name
    test_file = request.fspath.basename

    print(f"\nüß™ [TEST] –ó–∞–ø—É—Å–∫: {test_file}::{test_name}")

    yield

    print(f"‚úÖ [TEST] –ó–∞–≤–µ—Ä—à–µ–Ω: {test_file}::{test_name}")


# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ =====


@pytest.fixture
def temp_file():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    import tempfile

    fd, path = tempfile.mkstemp()
    yield path

    try:
        os.close(fd)
        os.unlink(path)
    except OSError:
        pass


@pytest.fixture
def temp_dir():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    import shutil
    import tempfile

    temp_dir = tempfile.mkdtemp()
    yield temp_dir

    try:
        shutil.rmtree(temp_dir)
    except OSError:
        pass


# ===== MOCK –§–ò–ö–°–¢–£–†–´ =====


@pytest.fixture
def mock_huggingface_api():
    """–ú–æ–∫–∞–µ—Ç API HuggingFace –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    with patch("services.huggingface_service.requests.post") as mock_post:
        mock_post.return_value.json.return_value = {
            "generated_text": "Mock response from HuggingFace"
        }
        mock_post.return_value.status_code = 200
        yield mock_post


@pytest.fixture
def mock_openai_api():
    """–ú–æ–∫–∞–µ—Ç API OpenAI –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    with patch("services.ai_service.openai") as mock_openai:
        mock_openai.Completion.create.return_value = {
            "choices": [{"text": "Mock response from OpenAI"}]
        }
        yield mock_openai


# ===== –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï =====


@pytest.fixture
def sample_ai_model():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä AI –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return {
        "id": "test-model-1",
        "name": "Test Model",
        "provider": "test",
        "is_api": True,
        "base_url": "https://api.test.com",
        "api_key_name": "TEST_API_KEY",
        "is_active": True,
        "configuration": {"max_tokens": 100, "temperature": 0.7},
    }


@pytest.fixture
def sample_task():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return {
        "id": "test-task-1",
        "title": "Test Task",
        "description": "Test task description",
        "status": "created",
        "priority": 1,
    }


@pytest.fixture
def sample_workflow():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä workflow –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return {
        "id": "test-workflow-1",
        "name": "Test Workflow",
        "description": "Test workflow description",
        "is_active": True,
        "steps": [
            {"name": "Step 1", "description": "First step", "order": 1, "configuration": {}},
            {"name": "Step 2", "description": "Second step", "order": 2, "configuration": {}},
        ],
    }


# ===== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –§–ò–ö–°–¢–£–†–´ –î–õ–Ø WINDOWS =====


@pytest.fixture
def windows_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –Ω–∞ Windows."""
    if os.name != "nt":
        pytest.skip("–¢–µ—Å—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Windows")

    return {"platform": "windows", "powershell_available": True, "cmd_available": True}


# ===== –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ =====


@pytest.fixture
def performance_monitor():
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    import time

    import psutil

    start_time = time.time()
    start_memory = psutil.Process().memory_info().rss

    yield

    end_time = time.time()
    end_memory = psutil.Process().memory_info().rss

    duration = end_time - start_time
    memory_diff = end_memory - start_memory

    print(f"üìä [PERF] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f}s")
    print(f"üìä [PERF] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_diff / 1024 / 1024:.2f}MB")


# ===== –°–ï–¢–ï–í–´–ï –¢–ï–°–¢–´ =====


@pytest.fixture
def mock_requests():
    """–ú–æ–∫–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    with patch("requests.get") as mock_get, patch("requests.post") as mock_post:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {"status": "ok"}

        mock_post.return_value.status_code = 200
        mock_post.return_value.json.return_value = {"success": True}

        yield {"get": mock_get, "post": mock_post}


# ===== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í –¢–ï–°–¢–ê–• =====


@pytest.fixture
def capture_logs():
    """–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ç–µ—Å—Ç–∞—Ö."""
    import logging
    from io import StringIO

    log_capture = StringIO()
    handler = logging.StreamHandler(log_capture)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É
    root_logger = logging.getLogger()
    root_logger.addHandler(handler)

    yield log_capture

    # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    root_logger.removeHandler(handler)


# ===== –§–ò–ù–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò =====


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
def pytest_runtest_setup(item):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É
    os.environ["TESTING"] = "true"

    # –û—Ç–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ API –≤ —Ç–µ—Å—Ç–∞—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    os.environ["DISABLE_EXTERNAL_APIS"] = "true"


def pytest_runtest_teardown(item):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    test_vars = [k for k in os.environ.keys() if k.startswith("TEST_")]
    for var in test_vars:
        if var not in ["TEST_PORT", "TESTING"]:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            os.environ.pop(var, None)
