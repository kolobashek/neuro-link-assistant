"""
ü§ñ AI –∏ –º–æ–¥–µ–ª–∏ - –¥–æ–º–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
"""

import datetime
import logging
import time

from flask import Blueprint, jsonify, request

from config import Config
from core.db.connection import get_db
from core.db.models import AIModel
from services.ai_service import (
    check_ai_model_availability,
    get_ai_models,
    get_simple_ai_response,
    search_models,
    select_ai_model,
    update_models_from_huggingface,
)

ai_bp = Blueprint("ai_api", __name__)
logger = logging.getLogger("neuro_assistant")

# ============= AI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï =============


@ai_bp.route("/test", methods=["POST"])
def test_ai():
    try:
        data = request.get_json()
        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = data.get("messages", [])
        if not messages:
            return jsonify({"success": False, "error": "–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"}), 400

        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        prompt = messages[-1].get("content", "") if messages else ""

        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        model_name = "deepseek/deepseek-v3-0324"

        start_time = time.time()

        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–õ–ê–î–û–ß–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ
        debug_info = {
            "api_key_present": bool(Config.HUGGINGFACE_TOKEN),
            "api_key_prefix": (
                Config.HUGGINGFACE_TOKEN[:10] + "..." if Config.HUGGINGFACE_TOKEN else "NOT_SET"
            ),
            "models_attempted": [],
            "errors": [],
        }

        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        response = get_simple_ai_response(messages, model_name=model_name)
        end_time = time.time()

        return jsonify(
            {
                "success": True,
                "prompt": prompt,
                "response": response,
                "model": model_name,  # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è
                "tokens": len(response.split()),
                "response_time_ms": int((end_time - start_time) * 1000),
                "timestamp": datetime.datetime.now().isoformat(),
                # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–õ–ê–î–ö–£ –í –û–¢–í–ï–¢
                "debug": debug_info,
            }
        )
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


# ============= –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–î–ï–õ–Ø–ú–ò =============


@ai_bp.route("/models", methods=["GET"])
def get_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ AI –º–æ–¥–µ–ª–µ–π"""
    try:
        models = get_ai_models()
        return jsonify(models)
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@ai_bp.route("/models/check", methods=["POST"])
def check_ai_models():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
    model_id = request.json.get("model_id", None) if request.json else None
    results = check_ai_model_availability(model_id)
    return jsonify(results)


@ai_bp.route("/models/select", methods=["POST"])
def select_ai_model_route():
    """–í—ã–±–∏—Ä–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    model_id = request.json.get("model_id", None) if request.json else None

    if not model_id:
        return jsonify({"success": False, "message": "–ù–µ —É–∫–∞–∑–∞–Ω ID –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"})

    result = select_ai_model(model_id)
    return jsonify(result)


@ai_bp.route("/models/active", methods=["GET"])
def get_active_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        db = next(get_db())
        try:
            models = db.query(AIModel).filter(AIModel.is_active.is_(True)).all()

            models_data = []
            for model in models:
                models_data.append(
                    {
                        "id": model.id,
                        "name": model.name,
                        "description": model.description or "",
                        "provider": model.provider,
                        "model_type": model.model_type,
                        "status": model.status,
                        "is_api": model.is_api,
                        "is_local": model.is_local,
                        "is_free": model.is_free,
                        "downloads": model.downloads or 0,
                        "likes": model.likes or 0,
                        "created_at": (
                            model.created_at.isoformat() if model.created_at is not None else None
                        ),
                    }
                )

            return jsonify({"success": True, "models": models_data, "total": len(models_data)})

        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {e}")
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {str(e)}"}), 500


@ai_bp.route("/models/catalog", methods=["GET"])
def get_catalog_models():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        db = next(get_db())
        try:
            models = db.query(AIModel).order_by(AIModel.downloads.desc()).all()

            models_data = []
            for model in models:
                models_data.append(
                    {
                        "id": model.id,
                        "name": model.name,
                        "full_name": model.full_name,
                        "description": model.description or "",
                        "provider": model.provider,
                        "model_type": model.model_type,
                        "pipeline_tag": model.pipeline_tag,
                        "status": model.status,
                        "is_active": model.is_active,
                        "is_featured": model.is_featured,
                        "downloads": model.downloads or 0,
                        "likes": model.likes or 0,
                        "author": model.author,
                        "tags": model.tags or [],
                        "license": model.license,
                        "hf_model_id": model.hf_model_id,
                        "last_sync_at": (
                            model.last_sync_at.isoforma()
                            if model.last_sync_at is not None
                            else None
                        ),
                    }
                )

            return jsonify({"success": True, "models": models_data, "total": len(models_data)})

        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {str(e)}"}), 500


@ai_bp.route("/models/<int:model_id>/config", methods=["GET"])
def get_model_config(model_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏"""
    try:
        db = next(get_db())
        try:
            model = db.query(AIModel).filter(AIModel.id == model_id).first()
            if not model:
                return jsonify({"success": False, "error": "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

            config = model.configuration or {}

            return jsonify(
                {
                    "success": True,
                    "config": {
                        "model_id": model.id,
                        "api_key": config.get("api_key", ""),
                        "temperature": config.get("temperature", 0.7),
                        "max_tokens": config.get("max_tokens", 150),
                        "top_p": config.get("top_p", 0.9),
                        "frequency_penalty": config.get("frequency_penalty", 0),
                        "presence_penalty": config.get("presence_penalty", 0),
                        "is_active": model.is_active,
                    },
                }
            )

        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"}), 500


@ai_bp.route("/models/<int:model_id>/config", methods=["PUT"])
def update_model_config(model_id):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json()

        db = next(get_db())
        try:
            model = db.query(AIModel).filter(AIModel.id == model_id).first()
            if not model:
                return jsonify({"success": False, "error": "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

            config = model.configuration or {}
            config.update(
                {
                    "api_key": data.get("api_key", ""),
                    "temperature": float(data.get("temperature", 0.7)),
                    "max_tokens": int(data.get("max_tokens", 150)),
                    "top_p": float(data.get("top_p", 0.9)),
                    "frequency_penalty": float(data.get("frequency_penalty", 0)),
                    "presence_penalty": float(data.get("presence_penalty", 0)),
                }
            )

            db.query(AIModel).filter(AIModel.id == model_id).update(
                {"configuration": config, "is_active": data.get("is_active", True)}
            )

            db.commit()

            return jsonify({"success": True, "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"})

        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return (
            jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"}),
            500,
        )


@ai_bp.route("/models/check-all", methods=["POST"])
def check_all_models():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        db = next(get_db())
        try:
            models = db.query(AIModel).all()
            available = 0
            unavailable = 0

            for model in models:
                try:
                    provider = str(model.provider or "")
                    config = model.configuration or {}

                    if provider == "huggingface":
                        db.query(AIModel).filter(AIModel.id == model.id).update({"status": "ready"})
                        available += 1
                    elif isinstance(config, dict) and config.get("api_key"):
                        db.query(AIModel).filter(AIModel.id == model.id).update({"status": "ready"})
                        available += 1
                    else:
                        db.query(AIModel).filter(AIModel.id == model.id).update(
                            {"status": "unavailable"}
                        )
                        unavailable += 1

                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ {model.id}: {e}")
                    db.query(AIModel).filter(AIModel.id == model.id).update(
                        {"status": "unavailable"}
                    )
                    unavailable += 1

            db.commit()

            return jsonify(
                {
                    "success": True,
                    "available": available,
                    "unavailable": unavailable,
                    "total": len(models),
                }
            )

        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {str(e)}"}), 500


# ============= HUGGINGFACE –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø =============


@ai_bp.route("/models/update-from-huggingface", methods=["POST"])
def update_models_from_huggingface_route():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å HuggingFace Hub"""
    try:
        result = update_models_from_huggingface()
        return jsonify(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
        return jsonify(
            {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}"}
        )


@ai_bp.route("/models/search", methods=["GET"])
def search_hf_models():
    """–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –Ω–∞ HuggingFace"""
    query = request.args.get("q", "")
    limit = min(int(request.args.get("limit", 20)), 50)

    if not query or len(query) < 2:
        return jsonify({"success": False, "error": "–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"})

    from services.huggingface_service import search_models_for_ui

    result = search_models_for_ui(query, limit)
    return jsonify(result)


@ai_bp.route("/models/add", methods=["POST"])
def add_hf_model():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å HuggingFace –≤ –±–∞–∑—É"""
    data = request.get_json()
    model_id = data.get("model_id")

    if not model_id:
        return jsonify({"success": False, "error": "model_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})

    from services.huggingface_service import add_single_model_to_db

    result = add_single_model_to_db(model_id)
    return jsonify(result)


@ai_bp.route("/current-model", methods=["GET"])
def get_current_model():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    try:
        from services.ai_service import get_current_ai_model

        current_model = get_current_ai_model()
        if current_model:
            return jsonify(
                {
                    "success": True,
                    "model": {
                        "name": current_model.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"),
                        "status": current_model.get("status", "unknown"),
                        "description": current_model.get("description", ""),
                        "is_available": current_model.get("status") == "ready",
                    },
                }
            )
        else:
            return jsonify({"success": False, "message": "–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}), 500


@ai_bp.route("/check-api-key", methods=["GET"])
def check_api_key():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å HuggingFace API –∫–ª—é—á–∞"""
    try:
        import requests

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ whoami endpoint
        whoami_url = "https://huggingface.co/api/whoami"
        headers = {"Authorization": f"Bearer {Config.HUGGINGFACE_TOKEN}"}

        response = requests.get(whoami_url, headers=headers, timeout=10)

        if response.status_code == 200:
            user_info = response.json()
            return jsonify(
                {
                    "success": True,
                    "message": "API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                    "user_info": {
                        "name": user_info.get("name", "Unknown"),
                        "type": user_info.get("type", "Unknown"),
                    },
                }
            )
        else:
            return jsonify(
                {
                    "success": False,
                    "message": f"API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: HTTP {response.status_code}",
                    "details": response.text[:200],
                }
            )

    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞: {str(e)}"}), 500


@ai_bp.route("/debug-config", methods=["GET"])
def debug_config():
    """–û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π"""
    try:
        import os

        from config import Config

        debug_info = {
            "env_HUGGINGFACE_API_KEY": os.getenv("HUGGINGFACE_API_KEY", "NOT_SET"),
            "env_HUGGINGFACE_TOKEN": os.getenv("HUGGINGFACE_TOKEN", "NOT_SET"),
            "config_HUGGINGFACE_TOKEN": getattr(Config, "HUGGINGFACE_TOKEN", "NOT_SET"),
        }

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ—Ñ–∏–∫—Å—ã
        for key, value in debug_info.items():
            if value and value != "NOT_SET" and len(value) > 10:
                debug_info[key] = f"{value[:10]}...({len(value)} —Å–∏–º–≤–æ–ª–æ–≤)"

        return jsonify({"success": True, "debug": debug_info})

    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@ai_bp.route("/debug-bearer", methods=["GET"])
def debug_bearer():
    """–û—Ç–ª–∞–¥–∫–∞ Bearer —Ç–æ–∫–µ–Ω–∞"""
    try:
        import os

        from config import Config

        # –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        raw_token = os.getenv("HUGGINGFACE_TOKEN")
        raw_api_key = os.getenv("HUGGINGFACE_API_KEY")

        debug_data = {
            "raw_env_vars": {
                "HUGGINGFACE_TOKEN": repr(raw_token),  # repr –ø–æ–∫–∞–∂–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã
                "HUGGINGFACE_API_KEY": repr(raw_api_key),
            },
            "config_vars": {
                "HUGGINGFACE_TOKEN": repr(getattr(Config, "HUGGINGFACE_TOKEN", None)),
                "HUGGINGFACE_API_KEY": repr(getattr(Config, "HUGGINGFACE_API_KEY", None)),
            },
            "bearer_formation": {
                "raw_token": f"Bearer {raw_token}" if raw_token else "None",
                "config_token": (
                    f"Bearer {Config.HUGGINGFACE_TOKEN}"
                    if hasattr(Config, "HUGGINGFACE_TOKEN")
                    else "None"
                ),
            },
        }

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á–∏
        for category in debug_data.values():
            for key, value in category.items():
                if isinstance(value, str) and "hf_" in value and len(value) > 15:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
                    visible_part = value[:15] + "***" + value[-8:]
                    category[key] = visible_part

        return jsonify({"success": True, "debug": debug_data})

    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500
