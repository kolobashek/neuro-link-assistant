import os
import subprocess  # ‚Üê –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
import sys
import time
from typing import Any
from unittest.mock import MagicMock

import pytest
from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By

# from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

sys.path.append(os.path.join(os.path.dirname(__file__), ".."))
from scripts.port_cleanup import PortManager

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
TEST_CONFIG = {"base_url": "http://localhost:5000"}

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)8s] %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
test_logger = logging.getLogger("TEST")
test_logger.setLevel(logging.INFO)


@pytest.fixture
def mock_component():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    return MagicMock()


@pytest.fixture(scope="session", autouse=True)
def cleanup_ports():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –ø–æ—Ä—Ç—ã –ø–µ—Ä–µ–¥ –∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
    port_manager = PortManager(5000)

    # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
    print("üßπ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤...")
    port_manager.smart_cleanup()

    yield

    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    print("üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤...")
    port_manager.smart_cleanup()


def cleanup_port(port: int) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞"""
    import subprocess
    import time

    try:
        # –ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É
        result = subprocess.run(["netstat", "-ano"], capture_output=True, text=True)

        for line in result.stdout.split("\n"):
            if f":{port}" in line and "LISTENING" in line:
                pid = line.strip().split()[-1]
                print(f"üîß –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {pid} –Ω–∞ –ø–æ—Ä—Ç—É {port}")

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                subprocess.run(["taskkill", "/PID", pid, "/F"], capture_output=True)
                time.sleep(2)

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
        return False


@pytest.fixture
def empty_registry():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    try:
        from core.component_registry import ComponentRegistry

        return ComponentRegistry()
    except ImportError:
        # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
        class MockComponentRegistry:
            def __init__(self):
                self.components = {}

            def register(self, name, component):
                self.components[name] = component
                return True

            def get(self, name):
                return self.components.get(name)

        return MockComponentRegistry()


class UiTestDriver:
    """–û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ WebDriver —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤ UI."""

    def __init__(self, driver: webdriver.Chrome, base_url: str):
        self.driver = driver
        self.base_url = base_url

    def get_url(self, path: str) -> None:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –±–∞–∑–æ–≤—ã–π URL."""
        url = f"{self.base_url}{path}"
        self.driver.get(url)

    def get(self, url):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ URL."""
        return self.driver.get(url)

    def find_element(self, by, value):
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        return self.driver.find_element(by, value)

    def find_elements(self, by, value):
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        return self.driver.find_elements(by, value)

    def wait_for_element(self, by, value, timeout=5):
        """–û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π."""
        print(f"üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞: {by}={value}")
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((by, value))
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {by}={value}")
            return element
        except Exception as e:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞ {timeout}—Å: {by}={value}")
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"üìÑ –¢–µ–∫—É—â–∏–π URL: {self.driver.current_url}")
            print(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {self.driver.title}")
            self.take_screenshot(f"debug_timeout_{value.replace('/', '_')[:20]}.png")
            raise TimeoutException(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {by}={value}")

    def wait_for_clickable(self, by, value, timeout=10):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        return WebDriverWait(self.driver, timeout).until(EC.element_to_be_clickable((by, value)))

    def click(self, by, value):
        """–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏."""
        element = self.wait_for_clickable(by, value)
        element.click()
        return element

    def input(self, by, value, text):
        """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç."""
        element = self.wait_for_element(by, value)
        element.clear()
        element.send_keys(text)
        return element

    def execute_script(self, script, *args):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript-–∫–æ–¥–∞."""
        return self.driver.execute_script(script, *args)

    def back(self):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥."""
        return self.driver.back()

    def forward(self):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø–µ—Ä–µ–¥."""
        return self.driver.forward()

    def refresh(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        return self.driver.refresh()

    def get_current_url(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ URL."""
        return self.driver.current_url

    def switch_to_window(self, window_handle):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–µ –æ–∫–Ω–æ/–≤–∫–ª–∞–¥–∫—É."""
        return self.driver.switch_to.window(window_handle)

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞/–≤–∫–ª–∞–¥–∫–∏."""
        return self.driver.close()

    def set_window_size(self, width, height):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞."""
        return self.driver.set_window_size(width, height)

    def get_window_size(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞."""
        return self.driver.get_window_size()

    def get_page_source(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTML-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        return self.driver.page_source

    def take_screenshot(self, filename):
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        return self.driver.save_screenshot(filename)

    def __getattr__(self, name: str) -> Any:
        """–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫ –æ–±—ä–µ–∫—Ç—É WebDriver."""
        return getattr(self.driver, name)


from scripts.app_manager import AppManager

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
from scripts.test_app_manager import TestAppManager


# –ó–∞–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É app_server
@pytest.fixture(scope="session")
def app_server():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ UI —Ç–µ—Å—Ç–∞—Ö"""
    manager = TestAppManager(port=5000, timeout=45)

    print(f" [SESSION] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if not manager.start_app():
        pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if not manager.health_check():
        manager.stop_app()
        pytest.skip("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å, –Ω–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è")

    print(f"‚úÖ [SESSION] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤")

    yield manager

    print(f"üßπ [SESSION] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ UI —Ç–µ—Å—Ç–æ–≤...")
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    manager.stop_app()


def create_chrome_driver(base_url: str) -> webdriver.Chrome:
    """–°–æ–∑–¥–∞–Ω–∏–µ Chrome WebDriver —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö GPU"""
    chrome_options = Options()

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è Windows + —Å—Ç–∞—Ä–∞—è GPU
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--use-gl=swiftshader")  # –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
    chrome_options.add_argument("--disable-software-rasterizer")
    chrome_options.add_argument("--window-size=1280,720")
    chrome_options.add_argument("--disable-web-security")
    chrome_options.add_argument(
        "--disable-features=VizDisplayCompositor,AudioServiceOutOfProcess,TranslateUI"
    )
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-logging")
    chrome_options.add_argument("--log-level=3")
    chrome_options.add_argument("--silent")

    chrome_options.binary_location = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"

    try:
        from webdriver_manager.chrome import ChromeDriverManager

        service = ChromeService(ChromeDriverManager().install())

        driver = webdriver.Chrome(service=service, options=chrome_options)
        # –ö–æ—Ä–æ—Ç–∫–∏–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        driver.set_page_load_timeout(15)
        driver.implicitly_wait(5)

        print("‚úÖ Chrome WebDriver –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Windows + —Å—Ç–∞—Ä–∞—è GPU")
        return driver

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Chrome WebDriver: {e}")
        pytest.skip(f"Chrome WebDriver –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


# –ò –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —Ñ–∏–∫—Å—Ç—É—Ä–µ:
@pytest.fixture(scope="session")  # –±—ã–ª–æ: function
def ui_client(base_url, app_server):  # –£–±—Ä–∞—Ç—å request –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤"""
    # –£–±—Ä–∞—Ç—å —ç—Ç–∏ 2 —Å—Ç—Ä–æ—á–∫–∏:
    # test_file = str(request.fspath)
    # if not ("ui" in test_file or "e2e" in test_file):
    #     pytest.skip("ui_client —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤")

    if not app_server.is_app_running():
        pytest.skip("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è UI —Ç–µ—Å—Ç–∞")

    # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
    driver = create_chrome_driver(base_url)
    ui_driver = UiTestDriver(driver, base_url)

    yield ui_driver

    driver.quit()


# –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–∫—Å—Ç—É—Ä—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
@pytest.fixture(autouse=True)
def smart_cleanup_browser_state(request):
    """–£—Å–ª–æ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ UI —Ç–µ—Å—Ç–æ–º
    if "ui" in str(request.fspath) or "e2e" in str(request.fspath):
        # –î–ª—è UI —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ui_client
        ui_client = request.getfixturevalue("ui_client")

        yield

        # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ UI —Ç–µ—Å—Ç–∞
        try:
            ui_client.driver.delete_all_cookies()
            ui_client.execute_script("window.localStorage.clear();")
            ui_client.execute_script("window.sessionStorage.clear();")
        except Exception:
            pass
    else:
        # –î–ª—è –Ω–µ-UI —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        yield


@pytest.fixture(scope="session")  # –¢–æ–ª—å–∫–æ –¥–ª—è base_url
def base_url():
    """–§–∏–∫—Å—Ç—É—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –±–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return TEST_CONFIG["base_url"]


@pytest.fixture(scope="class")  # –î–ª—è ui_client
def authenticated_ui_client(ui_client):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è UI-—Ç–µ—Å—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞ –∏ –≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    """
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    ui_client.get("http://localhost:5000/login")

    try:
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞
        WebDriverWait(ui_client.driver, 10).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, "form input[type='email'], form input[name='username']")
            )
        )

        # –í–≤–æ–¥–∏–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        username_input = ui_client.find_element(
            By.CSS_SELECTOR, "input[type='email'], input[name='username']"
        )
        username_input.send_keys("test@example.com")

        password_input = ui_client.find_element(By.CSS_SELECTOR, "input[type='password']")
        password_input.send_keys("testpassword")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        login_button = ui_client.find_element(
            By.CSS_SELECTOR, "button[type='submit'], input[type='submit']"
        )
        login_button.click()

        # –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        WebDriverWait(ui_client.driver, 10).until(lambda driver: "login" not in driver.current_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        assert "login" not in ui_client.current_url, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        pytest.skip(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É: {str(e)}")

    # –ü–µ—Ä–µ–¥–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–µ—Å—Ç
    yield ui_client

    # –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    try:
        ui_client.get("http://localhost:5000/logout")
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã—Ö–æ–¥–∞
    except Exception:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        pass


@pytest.fixture
def mobile_ui_client(ui_client):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞ UI-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–±–∏–ª—å–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É,
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    original_size = ui_client.get_window_size()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∫–∞–∫ —É iPhone X
    ui_client.set_window_size(375, 812)

    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤ —Ç–µ—Å—Ç
    yield ui_client

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    ui_client.set_window_size(original_size["width"], original_size["height"])


@pytest.fixture
def take_screenshot_on_failure(ui_client, request):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤.

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª,
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ screenshots.
    """
    yield

    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –ø–∞–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    if request.node.rep_setup.failed or request.node.rep_call.failed:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        screenshots_dir = "screenshots"
        if not os.path.exists(screenshots_dir):
            os.makedirs(screenshots_dir)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        timestamp = time.strftime("%Y%m%d-%H%M%S")
        screenshot_name = f"{screenshots_dir}/{request.node.name}-{timestamp}.png"

        # –î–µ–ª–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        ui_client.take_screenshot(screenshot_name)
        print(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_name}")


# –•—É–∫ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —Ç–µ—Å—Ç–∞ –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–∏–≤—à–µ–≥–æ—Å—è –≤ —Ä–µ–ø–æ—Ä—Ç–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, f"rep_{rep.when}", rep)


@pytest.fixture(scope="function")
def mobile_driver():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å —ç–º—É–ª—è—Ü–∏–µ–π"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏
    mobile_emulation = {"deviceName": "iPhone X"}
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_experimental_option("mobileEmulation", mobile_emulation)

    # –î–ª—è CI/CD –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if os.environ.get("CI") == "true":
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")

    driver = webdriver.Chrome(options=chrome_options)
    yield driver
    driver.quit()


import psycopg2
import pytest
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from sqlalchemy import create_engine
from sqlalchemy.orm import Session

from core.db.crud import create_user
from core.db.models import Base


@pytest.fixture(scope="module")
def db_engine():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –ë–î —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    db_user = "neurolink"
    db_password = "secure_password"
    db_host = "localhost"
    db_port = "5432"

    test_db_name = "neurolink_test_db"
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    conn = psycopg2.connect(
        user=db_user,
        password=db_password,
        host=db_host,
        port=db_port,
        database="neurolink",  # –û—Å–Ω–æ–≤–Ω–∞—è –ë–î –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    )
    conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
    cursor = conn.cursor()

    cursor.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", (test_db_name,))
    db_exists = cursor.fetchone()
    if not db_exists:
        cursor.execute(f"CREATE DATABASE {test_db_name}")
    cursor.close()
    conn.close()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É
    test_db_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{test_db_name}"
    engine = create_engine(test_db_url)
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(engine)

    yield engine

    # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    Base.metadata.drop_all(engine)


@pytest.fixture
def db_session(db_engine):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞.
    """
    connection = db_engine.connect()
    transaction = connection.begin()
    session = Session(bind=connection)

    yield session

    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    session.close()
    if transaction.is_active:
        transaction.rollback()
    connection.close()


@pytest.fixture
def test_user(db_session):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö.
    """
    user_data = {
        "username": "test_user",
        "email": "test@example.com",
        "password_hash": "hashed_password",
    }

    user = create_user(db_session, **user_data)
    db_session.commit()  # –í–∞–∂–Ω–æ: –¥–µ–ª–∞–µ–º commit, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ë–î

    return user


# UI —Ç–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    # –î–ª—è UI —Ç–µ—Å—Ç–æ–≤ –≤–∫–ª—é—á–∞–µ–º verbose —Ä–µ–∂–∏–º
    if hasattr(config.option, "verbose"):
        config.option.verbose = max(config.option.verbose, 1)


def pytest_runtest_setup(item):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ UI —Ç–µ—Å—Ç–æ–º
    test_file = str(item.fspath)
    if "ui" in test_file or "e2e" in test_file:
        print(f"\nüöÄ [UI-TEST] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {item.name}")


def pytest_runtest_teardown(item):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    test_file = str(item.fspath)
    if "ui" in test_file or "e2e" in test_file:
        print(f"üèÅ [UI-TEST] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {item.name}")


def pytest_collection_modifyitems(config, items):
    """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    for item in items:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä ui –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤
        test_file = str(item.fspath)
        if "ui" in test_file or "e2e" in test_file:
            item.add_marker(pytest.mark.ui)
