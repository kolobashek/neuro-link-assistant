#!/usr/bin/env python3
"""–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤"""

import os
import signal
import subprocess
import sys
import time
from pathlib import Path
from typing import Optional

import psutil
import requests


class TestAppManager:
    def __init__(self, port=5000, timeout=45):
        self.port = port
        self.app_url = f"http://localhost:{port}"
        self.timeout = timeout
        self.process: Optional[subprocess.Popen] = None
        self.app_dir = Path(__file__).parent.parent

    def cleanup_port(self) -> bool:
        """–û—á–∏—â–∞–µ—Ç –ø–æ—Ä—Ç –æ—Ç –∑–∞–≤–∏—Å—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print(f"üßπ [APP] –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞ {self.port}...")

        killed_count = 0
        for proc in psutil.process_iter(["pid", "name", "connections"]):
            try:
                connections = proc.info.get("connections", [])
                if not connections:
                    continue

                for conn in connections:
                    if hasattr(conn, "laddr") and conn.laddr.port == self.port:
                        print(
                            f"üî™ [APP] –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {proc.info['name']} (PID:"
                            f" {proc.info['pid']})"
                        )
                        psutil.Process(proc.info["pid"]).terminate()
                        killed_count += 1
                        break
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue

        if killed_count > 0:
            print(f"‚úÖ [APP] –ó–∞–≤–µ—Ä—à–µ–Ω–æ {killed_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞

        return True

    def is_app_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            response = requests.get(self.app_url, timeout=3)
            return 200 <= response.status_code < 500
        except:
            return False

    def start_app(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        print(f"üöÄ [APP] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ
        if self.is_app_running():
            print(f"‚úÖ [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {self.app_url}")
            return True

        # –û—á–∏—â–∞–µ–º –ø–æ—Ä—Ç
        self.cleanup_port()

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            os.chdir(self.app_dir)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è subprocess
            startup_info = None
            creation_flags = 0

            if os.name == "nt":  # Windows
                startup_info = subprocess.STARTUPINFO()
                startup_info.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                startup_info.wShowWindow = subprocess.SW_HIDE
                creation_flags = subprocess.CREATE_NEW_PROCESS_GROUP

            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env.update(
                {
                    "FLASK_ENV": "testing",
                    "TESTING": "true",
                    "PYTHONIOENCODING": "utf-8",
                    "PYTHONPATH": str(self.app_dir),
                }
            )

            print(f"‚è≥ [APP] –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.process = subprocess.Popen(
                [sys.executable, "app.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                startupinfo=startup_info,
                creationflags=creation_flags,
                env=env,
                encoding="utf-8",
                errors="replace",
                cwd=self.app_dir,
            )

            print(f"‚è±Ô∏è [APP] –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–¥–æ {self.timeout}—Å)...")

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            for i in range(self.timeout * 2):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫
                if self.is_app_running():
                    print(f"‚úÖ [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –Ω–∞ {self.app_url} –∑–∞ {(i+1)*0.5:.1f}—Å")

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    time.sleep(1)
                    if self.is_app_running():
                        print(f"‚úÖ [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                if (i + 1) % 10 == 0:
                    print(f"‚è≥ [APP] –û–∂–∏–¥–∞–Ω–∏–µ... {(i+1)*0.5:.0f}—Å/{self.timeout}—Å")

                time.sleep(0.5)

            print(f"‚ùå [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∑–∞ {self.timeout}—Å")
            self._show_process_output()
            self.stop_app()
            return False

        except Exception as e:
            print(f"‚ùå [APP] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self._show_process_output()
            return False

    def stop_app(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        print(f"üõë [APP] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        if self.process:
            try:
                if os.name == "nt":  # Windows
                    self.process.send_signal(signal.CTRL_BREAK_EVENT)
                else:  # Unix
                    self.process.terminate()

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    self.process.wait(timeout=5)
                    print(f"‚úÖ [APP] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except subprocess.TimeoutExpired:
                    print(f"‚ö†Ô∏è [APP] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")
                    self.process.kill()
                    self.process.wait()

            except Exception as e:
                print(f"‚ö†Ô∏è [APP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞
        self.cleanup_port()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        time.sleep(1)
        if not self.is_app_running():
            print(f"‚úÖ [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ö†Ô∏è [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –æ—Ç–≤–µ—á–∞–µ—Ç")

    def _show_process_output(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        if not self.process:
            return

        try:
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ stdout –∏ stderr
            if self.process.stdout:
                stdout_data = self.process.stdout.read()
                if stdout_data:
                    print(f"\nüìÑ [APP STDOUT]:\n{stdout_data}")

            if self.process.stderr:
                stderr_data = self.process.stderr.read()
                if stderr_data:
                    print(f"\nüìÑ [APP STDERR]:\n{stderr_data}")

        except Exception as e:
            print(f"‚ö†Ô∏è [APP] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

    def health_check(self) -> bool:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.is_app_running():
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            endpoints = ["/", "/health"] if hasattr(self, "_check_health_endpoint") else ["/"]

            for endpoint in endpoints:
                response = requests.get(f"{self.app_url}{endpoint}", timeout=5)
                if response.status_code >= 500:
                    return False

            return True
        except:
            return False


def main():
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
    parser.add_argument("action", choices=["start", "stop", "restart", "status"])
    parser.add_argument("--port", type=int, default=5000, help="–ü–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    parser.add_argument("--timeout", type=int, default=45, help="–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞")

    args = parser.parse_args()

    manager = TestAppManager(port=args.port, timeout=args.timeout)

    if args.action == "start":
        success = manager.start_app()
        sys.exit(0 if success else 1)
    elif args.action == "stop":
        manager.stop_app()
    elif args.action == "restart":
        manager.stop_app()
        time.sleep(2)
        success = manager.start_app()
        sys.exit(0 if success else 1)
    elif args.action == "status":
        if manager.is_app_running():
            print(f"‚úÖ [APP] –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {manager.app_url}")
            sys.exit(0)
        else:
            print(f"‚ùå [APP] –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            sys.exit(1)


if __name__ == "__main__":
    main()
