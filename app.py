print("üîç –ò–º–ø–æ—Ä—Ç Flask...")
from flask import Flask, render_template, request

print("üîç –ò–º–ø–æ—Ä—Ç routes...")
from routes.api_routes import api_bp
from routes.main_routes import main_bp

print("üîç –ò–º–ø–æ—Ä—Ç utils...")
from utils.logging_utils import setup_logging

print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
command_interrupt_flag = False

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
app = Flask(__name__)


@app.route("/ai_models")
def ai_models_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏"""
    return render_template("ai_models.html")


@app.route("/health")
def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ UI —Ç–µ—Å—Ç–æ–≤"""
    import time

    print(f"üîç Health check called at {time.time()}")
    return {"status": "ok", "timestamp": time.time()}, 200


@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ç–æ–∂–µ –Ω—É–∂–Ω–∞ –¥–ª—è health check"""
    print(f"üîç Index page called")
    return render_template("index.html")


def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global command_interrupt_flag

    print("üîç –ù–∞—á–∞–ª–æ init_app()")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        from utils.logging_utils import init_logging_system

        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        init_logging_system()
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
        print("üîç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        app.register_blueprint(main_bp)
        app.register_blueprint(api_bp, url_prefix="/api")
        print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        history_logger, detailed_logger, system_logger = setup_logging(app)
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
        print("üîç –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤...")
        from utils.log_maintenance import ensure_log_files_exist

        ensure_log_files_exist()
        print("‚úÖ –§–∞–π–ª—ã –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω—ã")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        app.config.from_object("config.Config")
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        command_interrupt_flag = False
        print("‚úÖ init_app() –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        system_logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ init_app(): {e}")
        import traceback

        traceback.print_exc()
        raise


def run_app(port: int | None = None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask"""
    print(f"üöÄ –ù–∞—á–∞–ª–æ run_app(), port={port}")

    try:
        init_app()
        print("‚úÖ init_app() –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ init_app(): {e}")
        return

    # –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–∞—á–∏–Ω–∞—è —Å 5000
    if port is None:
        try:
            from scripts.network.port_manager import PortManager

            port = PortManager.find_any_free_port(5000)
            print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: {port}")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ä—Ç–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 5000")
            port = 5000

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º debug –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import os

    debug_mode = os.environ.get("FLASK_ENV") != "testing"

    print(f"üöÄ –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}, debug={debug_mode}")

    try:
        app.run(host="127.0.0.1", port=port, debug=debug_mode, use_reloader=False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Neuro-Link Assistant")
    parser.add_argument("--port", type=int, help="–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    parser.add_argument("port_positional", nargs="?", type=int, help="–ü–æ—Ä—Ç (–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç)")
    parser.add_argument("--debug", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º")
    parser.add_argument("--host", default="127.0.0.1", help="–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏")

    args = parser.parse_args()

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: --port > –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç > None
    port = args.port or args.port_positional

    if port is not None:
        print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç: {port}")

    run_app(port)
