class ModalManager {
  constructor() {
    this.activeModals = new Set();

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –¥–ª—è —á–∞—Ç–∞
    this.chatModal = null;
    this.currentSessionId = null;
    this.isLoading = false;

    // DOM-—ç–ª–µ–º–µ–Ω—Ç—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞
    this.chatListEl = null;
    this.chatHistoryEl = null;
    this.chatTitleEl = null;
    this.promptForm = null;
    this.promptInput = null;
    this.sendButton = null;
    this.newChatButton = null;

    this.init();
  }

  init() {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.initEventHandlers());
    } else {
      this.initEventHandlers();
    }
    console.log('‚úÖ ModalManager (with Chat) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  initEventHandlers() {
    // –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.addEventListener('click', (e) => {
      const trigger = e.target.closest('[data-modal-open]');
      if (trigger) {
        e.preventDefault();
        this.open(trigger.getAttribute('data-modal-open'));
      }
    });

    // –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    document.addEventListener('click', (e) => {
      const closeBtn = e.target.closest('[data-modal-close], .modal-close');
      if (closeBtn) {
        e.preventDefault();
        const modalId = closeBtn.closest('.modal')?.id;
        if (modalId) this.close(modalId);
      }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('modal') && this.isOpen(e.target.id)) {
        this.close(e.target.id);
      }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && this.activeModals.size > 0) {
        const lastModal = Array.from(this.activeModals).pop();
        this.close(lastModal);
      }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞, –µ—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    this.chatModal = document.getElementById('aiTestModal');
    if (this.chatModal) {
      this._initChatFunctionality();
    }
  }

  // --- –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω ---

  open(modalId) {
    const modal = document.getElementById(modalId);
    if (!modal) return false;

    this.activeModals.add(modalId);
    modal.classList.add('active');
    document.body.classList.add('modal-open');

    // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–∞—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
    if (modalId === 'aiTestModal') {
      this.loadChatList();
    }
    return true;
  }

  close(modalId) {
    const modal = document.getElementById(modalId);
    if (!modal) return false;

    this.activeModals.delete(modalId);
    modal.classList.remove('active');

    if (this.activeModals.size === 0) {
      document.body.classList.remove('modal-open');
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    if (modalId === 'aiTestModal') {
      this.currentSessionId = null;
      if (this.chatHistoryEl) this.chatHistoryEl.innerHTML = '';
      if (this.chatListEl) this.chatListEl.innerHTML = '';
    }
    return true;
  }

  isOpen(modalId) {
    return this.activeModals.has(modalId);
  }

  // --- –ú–µ—Ç–æ–¥—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞ ---

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è _initChatFunctionality
  _initChatFunctionality() {
    // –ü—Ä–∏–≤—è–∑–∫–∞ DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.chatListEl = this.chatModal.querySelector('#chatList');
    this.chatHistoryEl = this.chatModal.querySelector('#chatHistory');
    this.chatTitleEl = this.chatModal.querySelector('#chatTitle');
    this.promptForm = this.chatModal.querySelector('#aiTestForm');
    this.promptInput = this.chatModal.querySelector('#aiPrompt');
    this.sendButton = this.chatModal.querySelector('.send-btn');
    this.newChatButton = this.chatModal.querySelector('#newChatBtn');

    // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
    if (this.promptForm) {
      this.promptForm.addEventListener('submit', (e) => e.preventDefault());
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    if (this.promptInput) {
      this.promptInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          if (e.ctrlKey || e.shiftKey) {
            // Ctrl+Enter –∏–ª–∏ Shift+Enter = –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            return true;
          }
          // –û–±—ã—á–Ω—ã–π Enter = –æ—Ç–ø—Ä–∞–≤–∫–∞
          e.preventDefault();
          this.sendMessage();
        }
      });

      // –ê–≤—Ç–æ–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã
      this.promptInput.addEventListener('input', () => {
        this.promptInput.style.height = 'auto';
        this.promptInput.style.height = Math.min(this.promptInput.scrollHeight, 120) + 'px';
      });
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
    if (this.newChatButton) {
      this.newChatButton.addEventListener('click', () => this.createNewChat());
    }

    if (this.sendButton) {
      this.sendButton.addEventListener('click', (e) => {
        e.preventDefault();
        this.sendMessage();
      });
    }

    if (this.chatListEl) {
      this.chatListEl.addEventListener('click', (e) => {
        const chatItem = e.target.closest('.chat-list-item');
        if (!chatItem) return;

        const sessionId = chatItem.dataset.sessionId;
        if (e.target.closest('.delete-chat-btn')) {
          this.deleteChat(sessionId, chatItem);
        } else {
          this.selectChat(sessionId);
        }
      });
    }
  }


  async loadChatList() {
    this.setLoading(true);

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
    const token = localStorage.getItem('accessToken');
    if (!token) {
      this.chatHistoryEl.innerHTML = `
            <div class="message ai-message">
                <div class="message-content">
                    <strong>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.</strong><br>
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Ç.
                </div>
            </div>`;
      this.setLoading(false);
      return;
    }

    try {
      const response = await fetch('/api/chat/chats', {
        headers: {
          'Authorization': `Bearer ${ token }`
        }
      });
      if (!response.ok) {
        if (response.status === 401) {
          this.chatHistoryEl.innerHTML = `<div class="message ai-message"><div class="message-content">–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.</div></div>`;
          return;
        }
        throw new Error('Failed to load chats');
      }

      const chats = await response.json();
      this.renderChatList(chats);

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
      if (chats.length > 0) {
        await this.selectChat(chats[0].id);
      } else {
        // –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        console.log('üìù –ß–∞—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        await this.createNewChat();
      }
    } catch (error) {
      console.error("Error loading chat list:", error);
      // ‚úÖ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, —Ç–æ–∂–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
      await this.createNewChat();
    } finally {
      this.setLoading(false);
    }
  }

  renderChatList(chats) {
    this.chatListEl.innerHTML = '';
    chats.forEach(chat => {
      const li = document.createElement('li');
      li.className = 'chat-list-item';
      li.dataset.sessionId = chat.id;
      li.innerHTML = `
                <span class="chat-title" title="${ chat.title }">${ chat.title }</span>
                <button class="delete-chat-btn" title="–£–¥–∞–ª–∏—Ç—å —á–∞—Ç"><i class="fas fa-trash-alt"></i></button>
            `;
      this.chatListEl.appendChild(li);
    });
  }

  async createNewChat() {
    this.setLoading(true);
    try {
      // ‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —á–∞—Ç–∞
      const now = new Date();
      const dateStr = now.toLocaleDateString('ru-RU');
      const timeStr = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      const chatNumber = Date.now() % 10000; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã timestamp –∫–∞–∫ –Ω–æ–º–µ—Ä

      const chatTitle = `–ß–∞—Ç #${ chatNumber } –æ—Ç ${ dateStr } ${ timeStr }`;

      const response = await fetch('/api/chat/chats', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${ localStorage.getItem('accessToken') }`
        },
        body: JSON.stringify({
          title: chatTitle  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        })
      });
      if (!response.ok) throw new Error('Failed to create chat');

      const newChat = await response.json();
      console.log('‚úÖ –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω:', newChat);

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
      await this.loadChatList();
      await this.selectChat(newChat.id);
    } catch (error) {
      console.error("Error creating new chat:", error);
      // ‚úÖ –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      this.chatHistoryEl.innerHTML = `
        <div class="message ai-message">
          <div class="message-content">
            ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.
          </div>
        </div>`;
    } finally {
      this.setLoading(false);
    }
  }

  async selectChat(sessionId) {
    if (this.isLoading || this.currentSessionId === sessionId) return;

    this.setLoading(true);
    this.currentSessionId = sessionId;

    this.chatListEl.querySelectorAll('.chat-list-item').forEach(item => {
      item.classList.toggle('active', item.dataset.sessionId === sessionId);
    });

    this.chatHistoryEl.innerHTML = '<div class="message ai-message"><div class="spinner"></div></div>';
    try {
      const response = await fetch(`/api/chat/chats/${ sessionId }/messages`, {
        headers: { 'Authorization': `Bearer ${ localStorage.getItem('accessToken') }` }
      });
      if (!response.ok) throw new Error('Failed to load messages');

      const messages = await response.json();
      this.renderMessages(messages);
      const selectedChat = this.chatListEl.querySelector(`[data-session-id="${ sessionId }"] .chat-title`);
      this.chatTitleEl.textContent = selectedChat ? selectedChat.textContent : "–ß–∞—Ç";

    } catch (error) {
      console.error(`Error loading chat ${ sessionId }:`, error);
      this.chatHistoryEl.innerHTML = `<div class="message ai-message"><div class="message-content">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.</div></div>`;
    } finally {
      this.setLoading(false);
    }
  }

  async deleteChat(sessionId, listItemElement) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?')) return;

    try {
      await fetch(`/api/chat/chats/${ sessionId }`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${ localStorage.getItem('accessToken') }` }
      });

      listItemElement.remove();

      if (this.currentSessionId === sessionId) {
        const firstChat = this.chatListEl.querySelector('.chat-list-item');
        if (firstChat) {
          await this.selectChat(firstChat.dataset.sessionId);
        } else {
          await this.createNewChat();
        }
      }
    } catch (error) {
      console.error(`Error deleting chat ${ sessionId }:`, error);
    }
  }

  async sendMessage() {
    const prompt = this.promptInput.value.trim();
    if (!prompt || this.isLoading) return;

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if (!this.currentSessionId) {
      console.log('üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è');
      await this.createNewChat();

      // –ï—Å–ª–∏ —á–∞—Ç –≤—Å–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, –≤—ã—Ö–æ–¥–∏–º
      if (!this.currentSessionId) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
      }
    }

    this.setLoading(true);
    this.addMessageToUI('user', prompt);
    this.promptInput.value = '';
    this.promptInput.style.height = 'auto';

    try {
      const response = await fetch(`/api/chat/chats/${ this.currentSessionId }/messages`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${ localStorage.getItem('accessToken') }`
        },
        body: JSON.stringify({ prompt: prompt })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        const errorMessage = errorData.error || `HTTP ${ response.status }: ${ response.statusText }`;
        throw new Error(errorMessage);
      }

      const aiMessage = await response.json();
      this.addMessageToUI(aiMessage.role, aiMessage.content);
    } catch (error) {
      console.error("Error sending message:", error);

      let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.';

      if (error.message.includes('Failed to fetch')) {
        errorMessage = 'üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É.';
      } else if (error.message.includes('401')) {
        errorMessage = 'üîê –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.';
      } else if (error.message.includes('500')) {
        errorMessage = '‚öôÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.message) {
        errorMessage = `‚ùå ${ error.message }`;
      }

      this.addMessageToUI('ai', errorMessage);
    } finally {
      this.setLoading(false);
    }
  }

  renderMessages(messages) {
    this.chatHistoryEl.innerHTML = '';
    if (messages.length === 0) {
      this.chatHistoryEl.innerHTML = `<div class="message ai-message"><div class="bot-avatar">ü§ñ</div><div class="message-content">–≠—Ç–æ –Ω–æ–≤—ã–π —á–∞—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!</div></div>`;
    } else {
      messages.forEach(msg => this.addMessageToUI(msg.role, msg.content, false));
    }
    this.chatHistoryEl.scrollTop = this.chatHistoryEl.scrollHeight;
  }

  addMessageToUI(role, content, scroll = true) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${ role }-message`;

    const avatar = role === 'user' ? 'üë§' : 'ü§ñ';

    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ \n –Ω–∞ <br> –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    const formattedContent = content.replace(/\n/g, '<br>');

    messageDiv.innerHTML = `
            <div class="bot-avatar">${ avatar }</div>
            <div class="message-content">${ formattedContent }</div>
        `;

    this.chatHistoryEl.appendChild(messageDiv);
    if (scroll) {
      this.chatHistoryEl.scrollTop = this.chatHistoryEl.scrollHeight;
    }
  }

  setLoading(isLoading) {
    this.isLoading = isLoading;
    this.promptInput.disabled = isLoading;
    this.sendButton.disabled = isLoading;
    this.newChatButton.disabled = isLoading;
    this.chatListEl.style.pointerEvents = isLoading ? 'none' : 'auto';
    this.chatListEl.style.opacity = isLoading ? 0.7 : 1;
  }
}
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
window.modalManager = new ModalManager();
