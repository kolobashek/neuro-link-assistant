"""
üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –¥–æ–º–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
"""

import logging
from functools import wraps  # ‚úÖ –î–û–ë–ê–í–ò–¢–¨

from flask import Blueprint, g, jsonify, request  # ‚úÖ –î–û–ë–ê–í–ò–¢–¨ g

from core.db.connection import get_db
from core.services.auth_service import AuthService

auth_bp = Blueprint("auth_api", __name__)
logger = logging.getLogger("neuro_assistant")


@auth_bp.route("/register", methods=["POST"])
def register():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"}), 400

        username = data.get("username")
        email = data.get("email")
        password = data.get("password")
        display_name = data.get("display_name")

        if not all([username, email, password]):
            return jsonify({"success": False, "message": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

        db_session = next(get_db())
        auth_service = AuthService(db_session)

        user = auth_service.register_user(
            username=username, email=email, password=password, display_name=display_name
        )

        if not user:
            return (
                jsonify(
                    {
                        "success": False,
                        "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    }
                ),
                409,
            )

        access_token = auth_service.create_access_token_for_user(user)

        return (
            jsonify(
                {
                    "success": True,
                    "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                    "access_token": access_token,
                    "user": {
                        "id": user.id,
                        "username": user.username,
                        "email": user.email,
                        "display_name": user.display_name,
                    },
                }
            ),
            201,
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return jsonify({"success": False, "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500


@auth_bp.route("/login", methods=["POST"])
def login():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"}), 400

        username = data.get("username")
        password = data.get("password")

        if not all([username, password]):
            return (
                jsonify({"success": False, "message": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}),
                400,
            )

        db_session = next(get_db())
        auth_service = AuthService(db_session)

        user = auth_service.authenticate_user(username, password)

        if not user:
            return jsonify({"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}), 401

        access_token = auth_service.create_access_token_for_user(user)

        return (
            jsonify(
                {
                    "success": True,
                    "message": "–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                    "access_token": access_token,
                    "user": {
                        "id": user.id,
                        "username": user.username,
                        "email": user.email,
                        "display_name": user.display_name,
                    },
                }
            ),
            200,
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return jsonify({"success": False, "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500


@auth_bp.route("/me", methods=["GET"])
def get_current_user():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        auth_header = request.headers.get("Authorization")
        if not auth_header or not auth_header.startswith("Bearer "):
            return jsonify({"success": False, "message": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"}), 401

        token = auth_header.split(" ")[1]

        db_session = next(get_db())
        auth_service = AuthService(db_session)

        user = auth_service.get_current_user(token)
        if not user:
            return jsonify({"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"}), 401

        return (
            jsonify(
                {
                    "success": True,
                    "user": {
                        "id": user.id,
                        "username": user.username,
                        "email": user.email,
                        "display_name": user.display_name,
                        "role": getattr(user, "role", "user"),
                    },
                }
            ),
            200,
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return jsonify({"success": False, "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500
