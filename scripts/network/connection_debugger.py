"""–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥—á–∏–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""

import json
import subprocess
import time
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

import psutil


class ConnectionDebugger:
    """–û—Ç–ª–∞–¥—á–∏–∫ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""

    def __init__(self, port: int = 5000):
        self.port = port
        self.logs_dir = Path("logs")
        self.logs_dir.mkdir(exist_ok=True)

    def get_connections_info(self) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö –Ω–∞ –ø–æ—Ä—Ç—É"""
        connections = []

        for conn in psutil.net_connections():
            try:
                if hasattr(conn, "laddr") and conn.laddr and hasattr(conn.laddr, "port"):
                    if conn.laddr.port == self.port:
                        proc_info = self._get_process_info(conn.pid)
                        raddr_str = self._format_remote_addr(conn)

                        connections.append(
                            {
                                "timestamp": datetime.now().isoformat(),
                                "laddr": f"{conn.laddr.ip}:{conn.laddr.port}",
                                "raddr": raddr_str,
                                "status": conn.status,
                                "pid": conn.pid,
                                "process": proc_info,
                            }
                        )
            except (AttributeError, IndexError):
                continue

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ netstat
        netstat_lines = self._get_netstat_info()

        return {
            "timestamp": datetime.now().isoformat(),
            "port": self.port,
            "psutil_connections": connections,
            "netstat_lines": netstat_lines,
        }

    def trace_connections(self, duration: int = 300, interval: int = 5) -> List[Dict]:
        """–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        print(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç–∞ {self.port} –≤ —Ç–µ—á–µ–Ω–∏–µ {duration}—Å...")

        start_time = time.time()
        data_log = []

        while (time.time() - start_time) < duration:
            info = self.get_connections_info()
            data_log.append(info)

            conn_count = len(info["psutil_connections"])
            zombie_count = sum(1 for c in info["psutil_connections"] if c["process"] == "ZOMBIE")

            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"‚è∞ {timestamp} | –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {conn_count} | –ó–æ–º–±–∏: {zombie_count}")

            # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∑–æ–º–±–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if zombie_count > 0:
                print("   üßü –ó–û–ú–ë–ò-–°–û–ï–î–ò–ù–ï–ù–ò–Ø:")
                for conn in info["psutil_connections"]:
                    if conn["process"] == "ZOMBIE":
                        print(
                            f"     PID:{conn['pid']} {conn['laddr']} ->"
                            f" {conn['raddr']} ({conn['status']})"
                        )

            time.sleep(interval)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏
        self._save_logs(data_log)
        return data_log

    def _get_process_info(self, pid: Optional[int]) -> Union[Dict[str, Any], str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        if not pid:
            return "NO_PID"

        try:
            proc = psutil.Process(pid)
            return {
                "name": proc.name(),
                "cmdline": proc.cmdline(),
                "status": proc.status(),
                "create_time": proc.create_time(),
            }
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            return "ZOMBIE"

    def _format_remote_addr(self, conn) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
        if hasattr(conn, "raddr") and conn.raddr and hasattr(conn.raddr, "ip"):
            return f"{conn.raddr.ip}:{conn.raddr.port}"
        return "N/A"

    def _get_netstat_info(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ netstat"""
        try:
            result = subprocess.run(["netstat", "-ano"], capture_output=True, text=True, timeout=10)
            return [line for line in result.stdout.split("\n") if f":{self.port}" in line]
        except:
            return []

    def _save_logs(self, data_log: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª—ã"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        json_file = self.logs_dir / f"connections_debug_{timestamp}.json"

        with open(json_file, "w", encoding="utf-8") as f:
            json.dump(data_log, f, indent=2, ensure_ascii=False)

        print(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_file}")


def trace_port_connections(port: int = 5000, duration: int = 60) -> None:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç–∞"""
    debugger = ConnectionDebugger(port)
    debugger.trace_connections(duration, interval=2)


def main():
    """CLI –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    import argparse

    parser = argparse.ArgumentParser(description="–û—Ç–ª–∞–¥–∫–∞ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    parser.add_argument("--port", type=int, default=5000, help="–ü–æ—Ä—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    parser.add_argument("--duration", type=int, default=300, help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    parser.add_argument("--interval", type=int, default=5, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏")
    parser.add_argument("--once", action="store_true", help="–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

    args = parser.parse_args()

    debugger = ConnectionDebugger(args.port)

    if args.once:
        info = debugger.get_connections_info()
        print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç–∞ {args.port}:")
        print(f"  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(info['psutil_connections'])}")
        for conn in info["psutil_connections"]:
            status = "üßü –ó–û–ú–ë–ò" if conn["process"] == "ZOMBIE" else "‚úÖ –ñ–ò–í–û–ô"
            print(f"  {status} PID:{conn['pid']} {conn['laddr']} -> {conn['raddr']}")
    else:
        debugger.trace_connections(args.duration, args.interval)


if __name__ == "__main__":
    main()
