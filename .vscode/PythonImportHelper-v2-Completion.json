[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "pythoncom",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pythoncom",
        "description": "pythoncom",
        "detail": "pythoncom",
        "documentation": {}
    },
    {
        "label": "win32api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32api",
        "description": "win32api",
        "detail": "win32api",
        "documentation": {}
    },
    {
        "label": "win32con",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32con",
        "description": "win32con",
        "detail": "win32con",
        "documentation": {}
    },
    {
        "label": "win32file",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32file",
        "description": "win32file",
        "detail": "win32file",
        "documentation": {}
    },
    {
        "label": "wmi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wmi",
        "description": "wmi",
        "detail": "wmi",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "cgi",
        "description": "cgi",
        "isExtraImport": true,
        "detail": "cgi",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "cgi",
        "description": "cgi",
        "isExtraImport": true,
        "detail": "cgi",
        "documentation": {}
    },
    {
        "label": "make_server",
        "importPath": "wsgiref.simple_server",
        "description": "wsgiref.simple_server",
        "isExtraImport": true,
        "detail": "wsgiref.simple_server",
        "documentation": {}
    },
    {
        "label": "make_server",
        "importPath": "wsgiref.simple_server",
        "description": "wsgiref.simple_server",
        "isExtraImport": true,
        "detail": "wsgiref.simple_server",
        "documentation": {}
    },
    {
        "label": "request_uri",
        "importPath": "wsgiref.util",
        "description": "wsgiref.util",
        "isExtraImport": true,
        "detail": "wsgiref.util",
        "documentation": {}
    },
    {
        "label": "application_uri",
        "importPath": "wsgiref.util",
        "description": "wsgiref.util",
        "isExtraImport": true,
        "detail": "wsgiref.util",
        "documentation": {}
    },
    {
        "label": "shift_path_info",
        "importPath": "wsgiref.util",
        "description": "wsgiref.util",
        "isExtraImport": true,
        "detail": "wsgiref.util",
        "documentation": {}
    },
    {
        "label": "request_uri",
        "importPath": "wsgiref.util",
        "description": "wsgiref.util",
        "isExtraImport": true,
        "detail": "wsgiref.util",
        "documentation": {}
    },
    {
        "label": "application_uri",
        "importPath": "wsgiref.util",
        "description": "wsgiref.util",
        "isExtraImport": true,
        "detail": "wsgiref.util",
        "documentation": {}
    },
    {
        "label": "shift_path_info",
        "importPath": "wsgiref.util",
        "description": "wsgiref.util",
        "isExtraImport": true,
        "detail": "wsgiref.util",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "win32gui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32gui",
        "description": "win32gui",
        "detail": "win32gui",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "KeyboardController",
        "importPath": "core.input.keyboard_controller",
        "description": "core.input.keyboard_controller",
        "isExtraImport": true,
        "detail": "core.input.keyboard_controller",
        "documentation": {}
    },
    {
        "label": "MouseController",
        "importPath": "core.input.mouse_controller",
        "description": "core.input.mouse_controller",
        "isExtraImport": true,
        "detail": "core.input.mouse_controller",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "isExtraImport": true,
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "pynput.mouse",
        "description": "pynput.mouse",
        "isExtraImport": true,
        "detail": "pynput.mouse",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "pynput.mouse",
        "description": "pynput.mouse",
        "isExtraImport": true,
        "detail": "pynput.mouse",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "pynput.mouse",
        "description": "pynput.mouse",
        "isExtraImport": true,
        "detail": "pynput.mouse",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "RequestException",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_llm_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "ErrorHandler",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_llm_error",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_warning",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "ErrorHandler",
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "isExtraImport": true,
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "AbstractKeyboard",
        "importPath": "core.common.input.base",
        "description": "core.common.input.base",
        "isExtraImport": true,
        "detail": "core.common.input.base",
        "documentation": {}
    },
    {
        "label": "AbstractMouse",
        "importPath": "core.common.input.base",
        "description": "core.common.input.base",
        "isExtraImport": true,
        "detail": "core.common.input.base",
        "documentation": {}
    },
    {
        "label": "AbstractFileSystem",
        "importPath": "core.common.file_system",
        "description": "core.common.file_system",
        "isExtraImport": true,
        "detail": "core.common.file_system",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "ElementRecognition",
        "importPath": "core.vision.element_recognition",
        "description": "core.vision.element_recognition",
        "isExtraImport": true,
        "detail": "core.vision.element_recognition",
        "documentation": {}
    },
    {
        "label": "ElementRecognition",
        "importPath": "core.vision.element_recognition",
        "description": "core.vision.element_recognition",
        "isExtraImport": true,
        "detail": "core.vision.element_recognition",
        "documentation": {}
    },
    {
        "label": "ScreenCapture",
        "importPath": "core.vision.screen_capture",
        "description": "core.vision.screen_capture",
        "isExtraImport": true,
        "detail": "core.vision.screen_capture",
        "documentation": {}
    },
    {
        "label": "ScreenCapture",
        "importPath": "core.vision.screen_capture",
        "description": "core.vision.screen_capture",
        "isExtraImport": true,
        "detail": "core.vision.screen_capture",
        "documentation": {}
    },
    {
        "label": "ScreenCapture",
        "importPath": "core.vision.screen_capture",
        "description": "core.vision.screen_capture",
        "isExtraImport": true,
        "detail": "core.vision.screen_capture",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pytesseract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytesseract",
        "description": "pytesseract",
        "detail": "pytesseract",
        "documentation": {}
    },
    {
        "label": "ImageComparison",
        "importPath": "core.vision.image_comparison",
        "description": "core.vision.image_comparison",
        "isExtraImport": true,
        "detail": "core.vision.image_comparison",
        "documentation": {}
    },
    {
        "label": "ImageComparison",
        "importPath": "core.vision.image_comparison",
        "description": "core.vision.image_comparison",
        "isExtraImport": true,
        "detail": "core.vision.image_comparison",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.edge.options",
        "description": "selenium.webdriver.edge.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.edge.options",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.edge.service",
        "description": "selenium.webdriver.edge.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.edge.service",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.firefox.options",
        "description": "selenium.webdriver.firefox.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.firefox.options",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.firefox.service",
        "description": "selenium.webdriver.firefox.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.firefox.service",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "GeckoDriverManager",
        "importPath": "webdriver_manager.firefox",
        "description": "webdriver_manager.firefox",
        "isExtraImport": true,
        "detail": "webdriver_manager.firefox",
        "documentation": {}
    },
    {
        "label": "EdgeChromiumDriverManager",
        "importPath": "webdriver_manager.microsoft",
        "description": "webdriver_manager.microsoft",
        "isExtraImport": true,
        "detail": "webdriver_manager.microsoft",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "win32process",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32process",
        "description": "win32process",
        "detail": "win32process",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CommandExecution",
        "importPath": "models.command_models",
        "description": "models.command_models",
        "isExtraImport": true,
        "detail": "models.command_models",
        "documentation": {}
    },
    {
        "label": "CommandStep",
        "importPath": "models.command_models",
        "description": "models.command_models",
        "isExtraImport": true,
        "detail": "models.command_models",
        "documentation": {}
    },
    {
        "label": "CommandExecution",
        "importPath": "models.command_models",
        "description": "models.command_models",
        "isExtraImport": true,
        "detail": "models.command_models",
        "documentation": {}
    },
    {
        "label": "CommandStep",
        "importPath": "models.command_models",
        "description": "models.command_models",
        "isExtraImport": true,
        "detail": "models.command_models",
        "documentation": {}
    },
    {
        "label": "update_models_from_huggingface",
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "isExtraImport": true,
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "check_ai_model_availability",
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "isExtraImport": true,
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "get_ai_models",
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "isExtraImport": true,
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "search_models",
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "isExtraImport": true,
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "select_ai_model",
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "isExtraImport": true,
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "get_ai_response",
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "isExtraImport": true,
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "execute_command_with_error_handling",
        "importPath": "services.command_service",
        "description": "services.command_service",
        "isExtraImport": true,
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "execute_command_with_steps",
        "importPath": "services.command_service",
        "description": "services.command_service",
        "isExtraImport": true,
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "execute_python_code",
        "importPath": "services.command_service",
        "description": "services.command_service",
        "isExtraImport": true,
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "process_command",
        "importPath": "services.command_service",
        "description": "services.command_service",
        "isExtraImport": true,
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "log_execution_summary",
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "isExtraImport": true,
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "log_execution_summary",
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "isExtraImport": true,
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "isExtraImport": true,
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "HfApi",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "HfApi",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "HfFolder",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "Repository",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "HuggingFaceService",
        "importPath": "services.huggingface_service",
        "description": "services.huggingface_service",
        "isExtraImport": true,
        "detail": "services.huggingface_service",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "pyperclip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyperclip",
        "description": "pyperclip",
        "detail": "pyperclip",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "speak_text",
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "isExtraImport": true,
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "COMMAND_ALIASES",
        "importPath": "commands",
        "description": "commands",
        "isExtraImport": true,
        "detail": "commands",
        "documentation": {}
    },
    {
        "label": "COMMANDS",
        "importPath": "commands",
        "description": "commands",
        "isExtraImport": true,
        "detail": "commands",
        "documentation": {}
    },
    {
        "label": "get_command_function",
        "importPath": "commands",
        "description": "commands",
        "isExtraImport": true,
        "detail": "commands",
        "documentation": {}
    },
    {
        "label": "add_interrupt_checks",
        "importPath": "utils.helpers",
        "description": "utils.helpers",
        "isExtraImport": true,
        "detail": "utils.helpers",
        "documentation": {}
    },
    {
        "label": "extract_code_from_response",
        "importPath": "utils.helpers",
        "description": "utils.helpers",
        "isExtraImport": true,
        "detail": "utils.helpers",
        "documentation": {}
    },
    {
        "label": "extract_math_expression",
        "importPath": "utils.helpers",
        "description": "utils.helpers",
        "isExtraImport": true,
        "detail": "utils.helpers",
        "documentation": {}
    },
    {
        "label": "RepositoryNotFoundError",
        "importPath": "huggingface_hub.errors",
        "description": "huggingface_hub.errors",
        "isExtraImport": true,
        "detail": "huggingface_hub.errors",
        "documentation": {}
    },
    {
        "label": "RevisionNotFoundError",
        "importPath": "huggingface_hub.errors",
        "description": "huggingface_hub.errors",
        "isExtraImport": true,
        "detail": "huggingface_hub.errors",
        "documentation": {}
    },
    {
        "label": "AutoConfig",
        "importPath": "transformers.models.auto.configuration_auto",
        "description": "transformers.models.auto.configuration_auto",
        "isExtraImport": true,
        "detail": "transformers.models.auto.configuration_auto",
        "documentation": {}
    },
    {
        "label": "AutoModel",
        "importPath": "transformers.models.auto.modeling_auto",
        "description": "transformers.models.auto.modeling_auto",
        "isExtraImport": true,
        "detail": "transformers.models.auto.modeling_auto",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers.models.auto.tokenization_auto",
        "description": "transformers.models.auto.tokenization_auto",
        "isExtraImport": true,
        "detail": "transformers.models.auto.tokenization_auto",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "PropertyMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "PropertyMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "ResponseParser",
        "importPath": "core.llm.response_parser",
        "description": "core.llm.response_parser",
        "isExtraImport": true,
        "detail": "core.llm.response_parser",
        "documentation": {}
    },
    {
        "label": "ElementLocalization",
        "importPath": "core.vision.element_localization",
        "description": "core.vision.element_localization",
        "isExtraImport": true,
        "detail": "core.vision.element_localization",
        "documentation": {}
    },
    {
        "label": "ScreenChanges",
        "importPath": "core.vision.screen_changes",
        "description": "core.vision.screen_changes",
        "isExtraImport": true,
        "detail": "core.vision.screen_changes",
        "documentation": {}
    },
    {
        "label": "FileSystemManager",
        "importPath": "core.windows.filesystem_manager",
        "description": "core.windows.filesystem_manager",
        "isExtraImport": true,
        "detail": "core.windows.filesystem_manager",
        "documentation": {}
    },
    {
        "label": "FileSystem",
        "importPath": "core.windows.file_system",
        "description": "core.windows.file_system",
        "isExtraImport": true,
        "detail": "core.windows.file_system",
        "documentation": {}
    },
    {
        "label": "RegistryManager",
        "importPath": "core.windows.registry_manager",
        "description": "core.windows.registry_manager",
        "isExtraImport": true,
        "detail": "core.windows.registry_manager",
        "documentation": {}
    },
    {
        "label": "WindowManager",
        "importPath": "core.windows",
        "description": "core.windows",
        "isExtraImport": true,
        "detail": "core.windows",
        "documentation": {}
    },
    {
        "label": "WindowsWindowManager",
        "importPath": "core.platform.windows.window_manager",
        "description": "core.platform.windows.window_manager",
        "isExtraImport": true,
        "detail": "core.platform.windows.window_manager",
        "documentation": {}
    },
    {
        "label": "PluginManager",
        "importPath": "core.plugin_manager",
        "description": "core.plugin_manager",
        "isExtraImport": true,
        "detail": "core.plugin_manager",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "api_bp",
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "isExtraImport": true,
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "main_bp",
        "importPath": "routes.main_routes",
        "description": "routes.main_routes",
        "isExtraImport": true,
        "detail": "routes.main_routes",
        "documentation": {}
    },
    {
        "label": "ElementFinder",
        "importPath": "core.web.element_finder",
        "description": "core.web.element_finder",
        "isExtraImport": true,
        "detail": "core.web.element_finder",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'neuro-link-assistant-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'neuro-link-assistant-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'neuro-link-assistant-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'neuro-link-assistant-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = 'neuro-link-assistant-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "TestBasicConnections",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):\n        \"Check that a standard connection works\"\n        self.assert_(wmi.WMI())\n    def test_remote_connection(self):\n        \"Check that a remote connection works, if specified\"\n        if \"machine\" in settings:\n            self.assert_(wmi.WMI(settings['machine']))\n        else:\n            warnings.warn(\"Skipping test_remote_connection\")",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestThreadedConnection",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestThreadedConnection(unittest.TestCase):\n    def test_initialised_thread(self):\n        \"\"\"A WMI connection in a thread which has been initialised for COM\n        should succeed.\n        \"\"\"\n        def f(q):\n            pythoncom.CoInitialize()\n            try:\n                try:\n                    wmi.WMI()",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestMoniker",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestMoniker(unittest.TestCase):\n    def test_moniker(self):\n        \"\"\"Look at all possible options for moniker construction and pass\n        them through to a WMI connector\n        \"\"\"\n        for computer in COMPUTERS:\n            if computer in (None, \".\"):\n                local_authorities = [None]\n            else:\n                local_authorities = AUTHORITIES",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestFunctions",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestFunctions(unittest.TestCase):\n    times = [\n       ((2000, 1, 1), \"20000101******.******+***\"),\n       ((2000, 1, 1, 10, 0, 0), \"20000101100000.******+***\"),\n       ((2000, 1, 1, 10, 0, 0, 100), \"20000101100000.000100+***\"),\n       ((2000, 1, 1, 10, 0, 0, 100, \"GMT\"), \"20000101100000.000100+GMT\")\n    ]\n    def test_signed_to_unsigned(self):\n        tests = [\n           (0, 0),",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestWMI",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestWMI(unittest.TestCase):\n    def setUp(self):\n        self.connection = wmi.WMI(namespace=\"root/cimv2\", find_classes=False)\n        self.logical_disks = set(self.connection.Win32_LogicalDisk())\nclass TestNamespace(TestWMI):\n    def test_subclasses_of_simple(self):\n        self.assert_(\"Win32_ComputerSystem\" in self.connection.subclasses_of())\n    def test_subclasses_of_subtree(self):\n        self.assert_(\"Win32_Desktop\" in self.connection.subclasses_of(\"CIM_Setting\"))\n    def test_subclasses_of_pattern(self):",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestNamespace",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestNamespace(TestWMI):\n    def test_subclasses_of_simple(self):\n        self.assert_(\"Win32_ComputerSystem\" in self.connection.subclasses_of())\n    def test_subclasses_of_subtree(self):\n        self.assert_(\"Win32_Desktop\" in self.connection.subclasses_of(\"CIM_Setting\"))\n    def test_subclasses_of_pattern(self):\n        self.assert_(set([\"Win32_LogicalDisk\", \"Win32_MappedLogicalDisk\"]) <= set(self.connection.subclasses_of(\"CIM_LogicalDevice\", \"Win32_.*Disk\")))\n    def test_instances(self):\n        self.assertEquals(self.logical_disks, set(self.connection.instances(\"Win32_LogicalDisk\")))\n    def test_new(self):",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestClass",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestClass(TestWMI):\n    def test_class_from_namespace(self):\n        self.assert_(self.connection.Win32_ComputerSystem._namespace is self.connection)\n    def test_class_without_namespace(self):\n        wmi_class = wmi.GetObject(\"winmgmts:Win32_ComputerSystem\")\n        self.assert_(wmi._wmi_class(None, wmi_class)._namespace)\n    def test_query(self):\n        self.assertEquals(\n            set(self.connection.Win32_ComputerSystem.query()),\n            set(self.connection.query(\"SELECT * FROM Win32_ComputerSystem\"))",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestWatcher",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestWatcher(TestWMI):\n    def new_letter(self):\n        return \\\n            set(\"%s:\" % chr(i) for i in range(ord('A'), 1 + ord('Z'))).\\\n            difference(d.DeviceID for d in self.connection.Win32_LogicalDisk()).\\\n            pop()\n    @staticmethod\n    def create(new_letter):\n        #~ print(\"about to create drive with letter\", new_letter)\n        here = os.path.dirname(os.path.abspath(__file__))",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestMethods",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestMethods(TestWMI):\n    def test_exists(self):\n        \"Check that a well-known method is available by attribute\"\n        self.assert_(self.connection.Win32_Process.Create)\n    def test_params(self):\n        \"Check that the names and arrayness of params are picked up when not arrays\"\n        self.assertEquals(\n            [(n, False) for n in [\"CommandLine\", \"CurrentDirectory\", \"ProcessStartupInformation\"]],\n            self.connection.Win32_Process.Create.in_parameter_names\n        )",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestProperties",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestProperties(TestWMI):\n    def test_access(self):\n        \"Check that all properties are available as attributes\"\n        for d in self.logical_disks:\n            break\n        for p in d.ole_object.Properties_:\n            self.assertEqual(p.Value, getattr(d, p.Name))\n    def test_attribute_passthrough(self):\n        \"Check that unknown attributes are passed through to the underlying object\"\n        for d in self.logical_disks:",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestInstances",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestInstances(TestWMI):\n    def test_hashable(self):\n        \"Ensure instances are hashable so can be used in a set/dict\"\n        self.assert_(dict.fromkeys(self.logical_disks))\n    def test_equalable(self):\n        \"Ensure instances compare equal\"\n        self.assertEqual(self.logical_disks, self.logical_disks)\n    def test_not_equal_to_anything_else(self):\n        \"Ensure WMI instances are not equal to non-WMI instances\"\n        for d in self.logical_disks:",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestInstanceCreation",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestInstanceCreation(TestWMI):\n    def test_create_instance(self):\n        self.assert_(isinstance(self.connection.Win32_ProcessStartup.new(ShowWindow=2), wmi._wmi_object))\nclass TestAssociations(TestWMI):\n    def test_all_properties_available(self):\n        #\n        # An association can contain not only the associated\n        # classes but also extra information as well. Ensure\n        # that both types of data are correctly handled.\n        #",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestAssociations",
        "kind": 6,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "class TestAssociations(TestWMI):\n    def test_all_properties_available(self):\n        #\n        # An association can contain not only the associated\n        # classes but also extra information as well. Ensure\n        # that both types of data are correctly handled.\n        #\n        for q in self.connection.Win32_DiskQuota():\n            for p in q.properties:\n                try:",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "ini",
        "kind": 5,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "ini = ConfigParser.SafeConfigParser()\nini.read([\"wmitest.master.ini\", \"wmitest.ini\"])\nsettings = {}\nif ini.has_section(\"settings\"):\n    settings.update(ini.items(\"settings\"))\nexcludes = [i.strip() for i in settings.get(\"excludes\", \"\").split(\",\")]\nCOMPUTERS = [None, \".\"]\nif \"machine\" in settings:\n    COMPUTERS.append(settings['machine'])\nIMPERSONATION_LEVELS = [None, \"identify\", \"impersonate\", \"delegate\"]",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "settings = {}\nif ini.has_section(\"settings\"):\n    settings.update(ini.items(\"settings\"))\nexcludes = [i.strip() for i in settings.get(\"excludes\", \"\").split(\",\")]\nCOMPUTERS = [None, \".\"]\nif \"machine\" in settings:\n    COMPUTERS.append(settings['machine'])\nIMPERSONATION_LEVELS = [None, \"identify\", \"impersonate\", \"delegate\"]\nAUTHENTICATION_LEVELS = [None, \"default\", \"none\", \"connect\", \"call\", \"pkt\", \"pktintegrity\", \"pktprivacy\"]\nAUTHORITIES = [None]",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "excludes",
        "kind": 5,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "excludes = [i.strip() for i in settings.get(\"excludes\", \"\").split(\",\")]\nCOMPUTERS = [None, \".\"]\nif \"machine\" in settings:\n    COMPUTERS.append(settings['machine'])\nIMPERSONATION_LEVELS = [None, \"identify\", \"impersonate\", \"delegate\"]\nAUTHENTICATION_LEVELS = [None, \"default\", \"none\", \"connect\", \"call\", \"pkt\", \"pktintegrity\", \"pktprivacy\"]\nAUTHORITIES = [None]\nif set([\"domain\", \"machine\"]) <= set(settings):\n    #~ AUTHORITIES.append(\"kerberos:%s\" % settings['domain'])\n    AUTHORITIES.append(\"ntlmdomain:%s\" % settings['domain'])",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "COMPUTERS",
        "kind": 5,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "COMPUTERS = [None, \".\"]\nif \"machine\" in settings:\n    COMPUTERS.append(settings['machine'])\nIMPERSONATION_LEVELS = [None, \"identify\", \"impersonate\", \"delegate\"]\nAUTHENTICATION_LEVELS = [None, \"default\", \"none\", \"connect\", \"call\", \"pkt\", \"pktintegrity\", \"pktprivacy\"]\nAUTHORITIES = [None]\nif set([\"domain\", \"machine\"]) <= set(settings):\n    #~ AUTHORITIES.append(\"kerberos:%s\" % settings['domain'])\n    AUTHORITIES.append(\"ntlmdomain:%s\" % settings['domain'])\nPRIVILEGES = [None, ['security', '!shutdown']]",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "IMPERSONATION_LEVELS",
        "kind": 5,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "IMPERSONATION_LEVELS = [None, \"identify\", \"impersonate\", \"delegate\"]\nAUTHENTICATION_LEVELS = [None, \"default\", \"none\", \"connect\", \"call\", \"pkt\", \"pktintegrity\", \"pktprivacy\"]\nAUTHORITIES = [None]\nif set([\"domain\", \"machine\"]) <= set(settings):\n    #~ AUTHORITIES.append(\"kerberos:%s\" % settings['domain'])\n    AUTHORITIES.append(\"ntlmdomain:%s\" % settings['domain'])\nPRIVILEGES = [None, ['security', '!shutdown']]\nNAMESPACES = [None, \"root/cimv2\", \"default\"]\nclass TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_LEVELS",
        "kind": 5,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "AUTHENTICATION_LEVELS = [None, \"default\", \"none\", \"connect\", \"call\", \"pkt\", \"pktintegrity\", \"pktprivacy\"]\nAUTHORITIES = [None]\nif set([\"domain\", \"machine\"]) <= set(settings):\n    #~ AUTHORITIES.append(\"kerberos:%s\" % settings['domain'])\n    AUTHORITIES.append(\"ntlmdomain:%s\" % settings['domain'])\nPRIVILEGES = [None, ['security', '!shutdown']]\nNAMESPACES = [None, \"root/cimv2\", \"default\"]\nclass TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):\n        \"Check that a standard connection works\"",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "AUTHORITIES",
        "kind": 5,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "AUTHORITIES = [None]\nif set([\"domain\", \"machine\"]) <= set(settings):\n    #~ AUTHORITIES.append(\"kerberos:%s\" % settings['domain'])\n    AUTHORITIES.append(\"ntlmdomain:%s\" % settings['domain'])\nPRIVILEGES = [None, ['security', '!shutdown']]\nNAMESPACES = [None, \"root/cimv2\", \"default\"]\nclass TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):\n        \"Check that a standard connection works\"\n        self.assert_(wmi.WMI())",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "PRIVILEGES",
        "kind": 5,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "PRIVILEGES = [None, ['security', '!shutdown']]\nNAMESPACES = [None, \"root/cimv2\", \"default\"]\nclass TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):\n        \"Check that a standard connection works\"\n        self.assert_(wmi.WMI())\n    def test_remote_connection(self):\n        \"Check that a remote connection works, if specified\"\n        if \"machine\" in settings:\n            self.assert_(wmi.WMI(settings['machine']))",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "NAMESPACES",
        "kind": 5,
        "importPath": ".venv.Scripts.wmitest",
        "description": ".venv.Scripts.wmitest",
        "peekOfCode": "NAMESPACES = [None, \"root/cimv2\", \"default\"]\nclass TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):\n        \"Check that a standard connection works\"\n        self.assert_(wmi.WMI())\n    def test_remote_connection(self):\n        \"Check that a remote connection works, if specified\"\n        if \"machine\" in settings:\n            self.assert_(wmi.WMI(settings['machine']))\n        else:",
        "detail": ".venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "link",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def link(text, computer, namespace=None, wmi_class=None):\n    link = '<a href=\"/' + quote(computer)\n    if namespace:\n        link += \"/\" + quote(namespace)\n    if wmi_class:\n        link += \"/\" + quote(wmi_class)\n    return link + '\">' + escape(text) + '</a>'\ndef start_doc(title):\n    doc[:] = []\n    doc.append(\"\"\"",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "start_doc",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def start_doc(title):\n    doc[:] = []\n    doc.append(\"\"\"\n    <html>\n    <head>\n    <title>%(title)s</title>\n    <style>\n    body {font-family : Verdana, sans-serif; font-size : 84%%; margin : 3em;}\n    table.items {padding-left : 30px;}\n    li, td {font-family : \"Courier New\", monospace;}",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "finish_doc",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def finish_doc():\n    doc.append(\"\"\"\n    </body>\n    </html>\n    \"\"\" % locals())\ndef doc_table(items, n_cols=3, callback=None):\n    n_rows, n_spare_cols = divmod(len(items), n_cols)\n    doc.append('<table cellspacing=0 class=\"items\">')\n    for n_row in range(n_rows):\n        doc.append(\"<tr>\")",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "doc_table",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def doc_table(items, n_cols=3, callback=None):\n    n_rows, n_spare_cols = divmod(len(items), n_cols)\n    doc.append('<table cellspacing=0 class=\"items\">')\n    for n_row in range(n_rows):\n        doc.append(\"<tr>\")\n        for n_col in range(n_cols):\n            item = items[n_cols * n_col + n_row]\n            if callback:\n                item = callback(item)\n            doc.append(\"<td><li>%s</li></td>\" % item)",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "doc_breadcrumbs",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def doc_breadcrumbs(computer, namespace, wmi_class=None):\n    doc.append('<p class=\"breadcrumbs\">')\n    doc.append('%s &rarr; %s' % (link(computer, computer), link(namespace, computer, namespace)))\n    if wmi_class:\n        doc.append(' &rarr; %s' % (link(wmi_class, computer, namespace, wmi_class)))\n    doc.append('</p>')\ndef doc_wmi_class(computer, namespace, wmi_class, wmi_connection):\n    start_doc(\"WMI: Class %(wmi_class)s in namespace %(namespace)s on %(computer)s\" % locals())\n    doc_breadcrumbs(computer, namespace, wmi_class)\n    doc.append(\"<h2>%(wmi_class)s</h2>\" % locals())",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "doc_wmi_class",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def doc_wmi_class(computer, namespace, wmi_class, wmi_connection):\n    start_doc(\"WMI: Class %(wmi_class)s in namespace %(namespace)s on %(computer)s\" % locals())\n    doc_breadcrumbs(computer, namespace, wmi_class)\n    doc.append(\"<h2>%(wmi_class)s</h2>\" % locals())\n    klass = getattr(wmi_connection, wmi_class)\n    def property_callback(property_name):\n        property = klass.wmi_property(property_name)\n        mapping = property.qualifiers.get(\"MappingStrings\")\n        if mapping is None:\n            return property_name",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "doc_namespace",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def doc_namespace(computer, namespace, wmi_connection):\n    start_doc(\"WMI: Namespace %(namespace)s on %(computer)s\" % locals())\n    doc_breadcrumbs(computer, namespace)\n    namespaces = namespace.split(\"\\\\\")\n    namespace_links = []\n    for i, n in enumerate(namespaces):\n        namespace_links.append(link(n, computer, \"\\\\\".join(namespaces[:i+1])))\n    doc.append(\"<h2>%s</h2>\" % \"\\\\\".join(namespace_links))\n    doc.append(\"<hr>\")\n    subnamespaces = sorted(wmi_connection.__NAMESPACE())",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "handle_namespace",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def handle_namespace(environ, computer, namespace):\n    if not namespace:\n        wmi_connection = wmi.WMI(computer, namespace=\"root/cimv2\")\n        for setting in wmi_connection.Win32_WMISetting():\n            namespace=setting.ASPScriptDefaultNamespace\n            break\n    wmi_connection = wmi.WMI(computer, namespace=namespace, find_classes=True)\n    wmi_class = shift_path_info(environ)\n    if wmi_class:\n        doc_wmi_class(computer, namespace, wmi_class, wmi_connection)",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "handle_computer",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def handle_computer(environ, computer):\n    handle_namespace(environ, computer, shift_path_info(environ))\ndef app(environ, start_response):\n    computer = shift_path_info(environ)\n    if computer == \"favicon.ico\":\n        start_response(\"404 Not Found\", [(\"Content-Type\", \"text/plain\")])\n        return []\n    elif computer:\n        start_response(\"200 OK\", [(\"Content-Type\", \"text/html; charset=utf-8\")])\n        handle_computer(environ, computer)",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def app(environ, start_response):\n    computer = shift_path_info(environ)\n    if computer == \"favicon.ico\":\n        start_response(\"404 Not Found\", [(\"Content-Type\", \"text/plain\")])\n        return []\n    elif computer:\n        start_response(\"200 OK\", [(\"Content-Type\", \"text/html; charset=utf-8\")])\n        handle_computer(environ, computer)\n        return(unicode(d).encode(\"utf8\") + unicode(\"\\n\").encode(\"utf8\") for d in doc)\n    else:",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "run_browser",
        "kind": 2,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "def run_browser():\n    import os\n    os.startfile(\"http://localhost:%d\" % PORT)\nif __name__ == '__main__':\n    threading.Timer(3.0, run_browser).start()\n    httpd = make_server('', PORT, app)\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:\n        print(\"Shutting down gracefully...\")",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "doc",
        "kind": 5,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "doc = []\ndef link(text, computer, namespace=None, wmi_class=None):\n    link = '<a href=\"/' + quote(computer)\n    if namespace:\n        link += \"/\" + quote(namespace)\n    if wmi_class:\n        link += \"/\" + quote(wmi_class)\n    return link + '\">' + escape(text) + '</a>'\ndef start_doc(title):\n    doc[:] = []",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".venv.Scripts.wmiweb",
        "description": ".venv.Scripts.wmiweb",
        "peekOfCode": "PORT = 8010\ndef run_browser():\n    import os\n    os.startfile(\"http://localhost:%d\" % PORT)\nif __name__ == '__main__':\n    threading.Timer(3.0, run_browser).start()\n    httpd = make_server('', PORT, app)\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:",
        "detail": ".venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "open_calculator",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_calculator():\n    \"\"\"Открыть калькулятор\"\"\"\n    os.system(\"calc\")\n    return \"Калькулятор открыт\"\ndef calculate_expression(expression):\n    \"\"\"\n    Вычисляет выражение с помощью калькулятора Windows\n    Args:\n        expression: Математическое выражение для вычисления\n    Returns:",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "calculate_expression",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def calculate_expression(expression):\n    \"\"\"\n    Вычисляет выражение с помощью калькулятора Windows\n    Args:\n        expression: Математическое выражение для вычисления\n    Returns:\n        Строка с результатом вычисления\n    \"\"\"\n    # Открываем калькулятор\n    os.system(\"calc\")",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_notepad",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_notepad():\n    \"\"\"Открыть блокнот\"\"\"\n    os.system(\"notepad\")\n    return \"Блокнот открыт\"\ndef open_explorer(path=None):\n    \"\"\"Открыть проводник\"\"\"\n    if path:\n        os.system(f'explorer \"{path}\"')\n    else:\n        os.system(\"explorer\")",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_explorer",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_explorer(path=None):\n    \"\"\"Открыть проводник\"\"\"\n    if path:\n        os.system(f'explorer \"{path}\"')\n    else:\n        os.system(\"explorer\")\n    return \"Проводник открыт\"\ndef open_control_panel():\n    \"\"\"Открыть панель управления\"\"\"\n    os.system(\"control\")",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_control_panel",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_control_panel():\n    \"\"\"Открыть панель управления\"\"\"\n    os.system(\"control\")\n    return \"Панель управления открыта\"\ndef open_settings():\n    \"\"\"Открыть настройки Windows\"\"\"\n    os.system(\"start ms-settings:\")\n    return \"Настройки Windows открыты\"\ndef open_task_manager():\n    \"\"\"Открыть диспетчер задач\"\"\"",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_settings",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_settings():\n    \"\"\"Открыть настройки Windows\"\"\"\n    os.system(\"start ms-settings:\")\n    return \"Настройки Windows открыты\"\ndef open_task_manager():\n    \"\"\"Открыть диспетчер задач\"\"\"\n    os.system(\"taskmgr\")\n    return \"Диспетчер задач открыт\"\ndef open_command_prompt(admin=False):\n    \"\"\"Открыть командную строку\"\"\"",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_task_manager",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_task_manager():\n    \"\"\"Открыть диспетчер задач\"\"\"\n    os.system(\"taskmgr\")\n    return \"Диспетчер задач открыт\"\ndef open_command_prompt(admin=False):\n    \"\"\"Открыть командную строку\"\"\"\n    if admin:\n        os.system(\"powershell Start-Process cmd -Verb RunAs\")\n    else:\n        os.system(\"start cmd\")",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_command_prompt",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_command_prompt(admin=False):\n    \"\"\"Открыть командную строку\"\"\"\n    if admin:\n        os.system(\"powershell Start-Process cmd -Verb RunAs\")\n    else:\n        os.system(\"start cmd\")\n    return \"Командная строка открыта\"\ndef open_powershell(admin=False):\n    \"\"\"Открыть PowerShell\"\"\"\n    if admin:",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_powershell",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_powershell(admin=False):\n    \"\"\"Открыть PowerShell\"\"\"\n    if admin:\n        os.system(\"powershell Start-Process powershell -Verb RunAs\")\n    else:\n        os.system(\"start powershell\")\n    return \"PowerShell открыт\"\n# Функции калькулятора\ndef convert_units(value, from_unit, to_unit):\n    \"\"\"Конвертировать величину из одних единиц в другие\"\"\"",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "convert_units",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def convert_units(value, from_unit, to_unit):\n    \"\"\"Конвертировать величину из одних единиц в другие\"\"\"\n    # Реализация конвертации единиц (упрощенно)\n    return f\"Конвертация {value} из {from_unit} в {to_unit}\"\ndef calculate_date_difference(date1, date2):\n    \"\"\"Вычислить разницу между двумя датами\"\"\"\n    # Реализация расчета разницы дат\n    return f\"Разница между {date1} и {date2}\"\n# Сторонние приложения\ndef open_word(file_path=None):",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "calculate_date_difference",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def calculate_date_difference(date1, date2):\n    \"\"\"Вычислить разницу между двумя датами\"\"\"\n    # Реализация расчета разницы дат\n    return f\"Разница между {date1} и {date2}\"\n# Сторонние приложения\ndef open_word(file_path=None):\n    \"\"\"Открыть Microsoft Word\"\"\"\n    if file_path:\n        os.system(f'start winword.exe \"{file_path}\"')\n    else:",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_word",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_word(file_path=None):\n    \"\"\"Открыть Microsoft Word\"\"\"\n    if file_path:\n        os.system(f'start winword.exe \"{file_path}\"')\n    else:\n        os.system(\"start winword.exe\")\n    return \"Microsoft Word открыт\"\ndef open_excel(file_path=None):\n    \"\"\"Открыть Microsoft Excel\"\"\"\n    if file_path:",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_excel",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_excel(file_path=None):\n    \"\"\"Открыть Microsoft Excel\"\"\"\n    if file_path:\n        os.system(f'start excel.exe \"{file_path}\"')\n    else:\n        os.system(\"start excel.exe\")\n    return \"Microsoft Excel открыт\"\ndef open_vlc(file_path=None):\n    \"\"\"Открыть VLC Media Player\"\"\"\n    if file_path:",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_vlc",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_vlc(file_path=None):\n    \"\"\"Открыть VLC Media Player\"\"\"\n    if file_path:\n        os.system(f'start vlc.exe \"{file_path}\"')\n    else:\n        os.system(\"start vlc.exe\")\n    return \"VLC Media Player открыт\"\ndef open_custom_application(path, args=None):\n    \"\"\"Открыть произвольное приложение по пути\"\"\"\n    if args:",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "open_custom_application",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def open_custom_application(path, args=None):\n    \"\"\"Открыть произвольное приложение по пути\"\"\"\n    if args:\n        os.system(f'start \"\" \"{path}\" {args}')\n    else:\n        os.system(f'start \"\" \"{path}\"')\n    return f\"Приложение {path} открыто\"\ndef get_commands():\n    \"\"\"\n    Возвращает словарь команд модуля",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "get_commands",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def get_commands():\n    \"\"\"\n    Возвращает словарь команд модуля\n    Returns:\n        dict: Словарь с соответствием названий команд функциям\n    \"\"\"\n    return {\n        \"открыть калькулятор\": open_calculator,\n        \"вычислить\": calculate_expression,\n        \"открыть блокнот\": open_notepad,",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "get_aliases",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def get_aliases():\n    \"\"\"\n    Возвращает словарь псевдонимов команд модуля\n    Returns:\n        dict: Словарь с соответствием псевдонимов оригинальным командам\n    \"\"\"\n    return {\n        \"калькулятор\": \"открыть калькулятор\",\n        \"блокнот\": \"открыть блокнот\",\n        \"проводник\": \"открыть проводник\",",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "get_intents",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def get_intents():\n    \"\"\"\n    Возвращает словарь намерений команд модуля\n    Returns:\n        dict: Словарь с группировкой команд по намерениям\n    \"\"\"\n    return {\n        \"приложения\": [\n            \"открыть калькулятор\",\n            \"открыть блокнот\",",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "get_categories",
        "kind": 2,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "def get_categories():\n    \"\"\"\n    Возвращает словарь категорий команд модуля\n    Returns:\n        dict: Словарь с группировкой намерений по категориям\n    \"\"\"\n    return {\"Приложения\": [\"приложения\", \"расчеты\"]}",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.app_commands",
        "description": "commands.app_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\ndef open_calculator():\n    \"\"\"Открыть калькулятор\"\"\"\n    os.system(\"calc\")\n    return \"Калькулятор открыт\"\ndef calculate_expression(expression):\n    \"\"\"\n    Вычисляет выражение с помощью калькулятора Windows\n    Args:\n        expression: Математическое выражение для вычисления",
        "detail": "commands.app_commands",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "commands.assistant_commands",
        "description": "commands.assistant_commands",
        "peekOfCode": "def send_email(to, subject, body, attachments=None):\n    \"\"\"Отправить электронное письмо\"\"\"\ndef check_email():\n    \"\"\"Проверить электронную почту\"\"\"\ndef open_email_client():\n    \"\"\"Открыть почтовый клиент\"\"\"\n# Мессенджеры\ndef open_messenger(messenger_name):\n    \"\"\"Открыть мессенджер (WhatsApp, Telegram, и т.д.)\"\"\"\n    pyautogui.press(\"win\")",
        "detail": "commands.assistant_commands",
        "documentation": {}
    },
    {
        "label": "check_email",
        "kind": 2,
        "importPath": "commands.assistant_commands",
        "description": "commands.assistant_commands",
        "peekOfCode": "def check_email():\n    \"\"\"Проверить электронную почту\"\"\"\ndef open_email_client():\n    \"\"\"Открыть почтовый клиент\"\"\"\n# Мессенджеры\ndef open_messenger(messenger_name):\n    \"\"\"Открыть мессенджер (WhatsApp, Telegram, и т.д.)\"\"\"\n    pyautogui.press(\"win\")\n    pyautogui.write(messenger_name)\n    pyautogui.press(\"enter\")",
        "detail": "commands.assistant_commands",
        "documentation": {}
    },
    {
        "label": "open_email_client",
        "kind": 2,
        "importPath": "commands.assistant_commands",
        "description": "commands.assistant_commands",
        "peekOfCode": "def open_email_client():\n    \"\"\"Открыть почтовый клиент\"\"\"\n# Мессенджеры\ndef open_messenger(messenger_name):\n    \"\"\"Открыть мессенджер (WhatsApp, Telegram, и т.д.)\"\"\"\n    pyautogui.press(\"win\")\n    pyautogui.write(messenger_name)\n    pyautogui.press(\"enter\")\ndef send_message(messenger, recipient, message):\n    \"\"\"Отправить сообщение через мессенджер\"\"\"",
        "detail": "commands.assistant_commands",
        "documentation": {}
    },
    {
        "label": "open_messenger",
        "kind": 2,
        "importPath": "commands.assistant_commands",
        "description": "commands.assistant_commands",
        "peekOfCode": "def open_messenger(messenger_name):\n    \"\"\"Открыть мессенджер (WhatsApp, Telegram, и т.д.)\"\"\"\n    pyautogui.press(\"win\")\n    pyautogui.write(messenger_name)\n    pyautogui.press(\"enter\")\ndef send_message(messenger, recipient, message):\n    \"\"\"Отправить сообщение через мессенджер\"\"\"\ndef make_voice_call(messenger, recipient):\n    \"\"\"Сделать голосовой вызов\"\"\"\ndef make_video_call(messenger, recipient):",
        "detail": "commands.assistant_commands",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "commands.assistant_commands",
        "description": "commands.assistant_commands",
        "peekOfCode": "def send_message(messenger, recipient, message):\n    \"\"\"Отправить сообщение через мессенджер\"\"\"\ndef make_voice_call(messenger, recipient):\n    \"\"\"Сделать голосовой вызов\"\"\"\ndef make_video_call(messenger, recipient):\n    \"\"\"Сделать видеозвонок\"\"\"",
        "detail": "commands.assistant_commands",
        "documentation": {}
    },
    {
        "label": "make_voice_call",
        "kind": 2,
        "importPath": "commands.assistant_commands",
        "description": "commands.assistant_commands",
        "peekOfCode": "def make_voice_call(messenger, recipient):\n    \"\"\"Сделать голосовой вызов\"\"\"\ndef make_video_call(messenger, recipient):\n    \"\"\"Сделать видеозвонок\"\"\"",
        "detail": "commands.assistant_commands",
        "documentation": {}
    },
    {
        "label": "make_video_call",
        "kind": 2,
        "importPath": "commands.assistant_commands",
        "description": "commands.assistant_commands",
        "peekOfCode": "def make_video_call(messenger, recipient):\n    \"\"\"Сделать видеозвонок\"\"\"",
        "detail": "commands.assistant_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.assistant_commands",
        "description": "commands.assistant_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\n# Электронная почта\ndef send_email(to, subject, body, attachments=None):\n    \"\"\"Отправить электронное письмо\"\"\"\ndef check_email():\n    \"\"\"Проверить электронную почту\"\"\"\ndef open_email_client():\n    \"\"\"Открыть почтовый клиент\"\"\"\n# Мессенджеры\ndef open_messenger(messenger_name):",
        "detail": "commands.assistant_commands",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "commands.communication_commands",
        "description": "commands.communication_commands",
        "peekOfCode": "def send_email(to, subject, body, attachments=None):\n    \"\"\"Отправить электронное письмо\"\"\"\ndef check_email():\n    \"\"\"Проверить электронную почту\"\"\"\ndef open_email_client():\n    \"\"\"Открыть почтовый клиент\"\"\"\n# Мессенджеры\ndef open_messenger(messenger_name):\n    \"\"\"Открыть мессенджер (WhatsApp, Telegram, и т.д.)\"\"\"\n    pyautogui.press(\"win\")",
        "detail": "commands.communication_commands",
        "documentation": {}
    },
    {
        "label": "check_email",
        "kind": 2,
        "importPath": "commands.communication_commands",
        "description": "commands.communication_commands",
        "peekOfCode": "def check_email():\n    \"\"\"Проверить электронную почту\"\"\"\ndef open_email_client():\n    \"\"\"Открыть почтовый клиент\"\"\"\n# Мессенджеры\ndef open_messenger(messenger_name):\n    \"\"\"Открыть мессенджер (WhatsApp, Telegram, и т.д.)\"\"\"\n    pyautogui.press(\"win\")\n    pyautogui.write(messenger_name)\n    pyautogui.press(\"enter\")",
        "detail": "commands.communication_commands",
        "documentation": {}
    },
    {
        "label": "open_email_client",
        "kind": 2,
        "importPath": "commands.communication_commands",
        "description": "commands.communication_commands",
        "peekOfCode": "def open_email_client():\n    \"\"\"Открыть почтовый клиент\"\"\"\n# Мессенджеры\ndef open_messenger(messenger_name):\n    \"\"\"Открыть мессенджер (WhatsApp, Telegram, и т.д.)\"\"\"\n    pyautogui.press(\"win\")\n    pyautogui.write(messenger_name)\n    pyautogui.press(\"enter\")\ndef send_message(messenger, recipient, message):\n    \"\"\"Отправить сообщение через мессенджер\"\"\"",
        "detail": "commands.communication_commands",
        "documentation": {}
    },
    {
        "label": "open_messenger",
        "kind": 2,
        "importPath": "commands.communication_commands",
        "description": "commands.communication_commands",
        "peekOfCode": "def open_messenger(messenger_name):\n    \"\"\"Открыть мессенджер (WhatsApp, Telegram, и т.д.)\"\"\"\n    pyautogui.press(\"win\")\n    pyautogui.write(messenger_name)\n    pyautogui.press(\"enter\")\ndef send_message(messenger, recipient, message):\n    \"\"\"Отправить сообщение через мессенджер\"\"\"\ndef make_voice_call(messenger, recipient):\n    \"\"\"Сделать голосовой вызов\"\"\"\ndef make_video_call(messenger, recipient):",
        "detail": "commands.communication_commands",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "commands.communication_commands",
        "description": "commands.communication_commands",
        "peekOfCode": "def send_message(messenger, recipient, message):\n    \"\"\"Отправить сообщение через мессенджер\"\"\"\ndef make_voice_call(messenger, recipient):\n    \"\"\"Сделать голосовой вызов\"\"\"\ndef make_video_call(messenger, recipient):\n    \"\"\"Сделать видеозвонок\"\"\"",
        "detail": "commands.communication_commands",
        "documentation": {}
    },
    {
        "label": "make_voice_call",
        "kind": 2,
        "importPath": "commands.communication_commands",
        "description": "commands.communication_commands",
        "peekOfCode": "def make_voice_call(messenger, recipient):\n    \"\"\"Сделать голосовой вызов\"\"\"\ndef make_video_call(messenger, recipient):\n    \"\"\"Сделать видеозвонок\"\"\"",
        "detail": "commands.communication_commands",
        "documentation": {}
    },
    {
        "label": "make_video_call",
        "kind": 2,
        "importPath": "commands.communication_commands",
        "description": "commands.communication_commands",
        "peekOfCode": "def make_video_call(messenger, recipient):\n    \"\"\"Сделать видеозвонок\"\"\"",
        "detail": "commands.communication_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.communication_commands",
        "description": "commands.communication_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\n# Электронная почта\ndef send_email(to, subject, body, attachments=None):\n    \"\"\"Отправить электронное письмо\"\"\"\ndef check_email():\n    \"\"\"Проверить электронную почту\"\"\"\ndef open_email_client():\n    \"\"\"Открыть почтовый клиент\"\"\"\n# Мессенджеры\ndef open_messenger(messenger_name):",
        "detail": "commands.communication_commands",
        "documentation": {}
    },
    {
        "label": "open_vscode",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def open_vscode(path=None):\n    \"\"\"Открыть Visual Studio Code\"\"\"\n    pyautogui.press(\"win\")\n    pyautogui.write(\"code\")\n    pyautogui.press(\"enter\")\ndef open_pycharm(path=None):\n    \"\"\"Открыть PyCharm\"\"\"\ndef open_github_desktop():\n    \"\"\"Открыть GitHub Desktop\"\"\"\ndef open_terminal():",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "open_pycharm",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def open_pycharm(path=None):\n    \"\"\"Открыть PyCharm\"\"\"\ndef open_github_desktop():\n    \"\"\"Открыть GitHub Desktop\"\"\"\ndef open_terminal():\n    \"\"\"Открыть терминал\"\"\"\n# Git и контроль версий\ndef git_clone(repo_url, path=None):\n    \"\"\"Клонировать Git-репозиторий\"\"\"\ndef git_pull():",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "open_github_desktop",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def open_github_desktop():\n    \"\"\"Открыть GitHub Desktop\"\"\"\ndef open_terminal():\n    \"\"\"Открыть терминал\"\"\"\n# Git и контроль версий\ndef git_clone(repo_url, path=None):\n    \"\"\"Клонировать Git-репозиторий\"\"\"\ndef git_pull():\n    \"\"\"Выполнить git pull в текущем репозитории\"\"\"\ndef git_commit(message):",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "open_terminal",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def open_terminal():\n    \"\"\"Открыть терминал\"\"\"\n# Git и контроль версий\ndef git_clone(repo_url, path=None):\n    \"\"\"Клонировать Git-репозиторий\"\"\"\ndef git_pull():\n    \"\"\"Выполнить git pull в текущем репозитории\"\"\"\ndef git_commit(message):\n    \"\"\"Сделать коммит с указанным сообщением\"\"\"\ndef git_push():",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "git_clone",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def git_clone(repo_url, path=None):\n    \"\"\"Клонировать Git-репозиторий\"\"\"\ndef git_pull():\n    \"\"\"Выполнить git pull в текущем репозитории\"\"\"\ndef git_commit(message):\n    \"\"\"Сделать коммит с указанным сообщением\"\"\"\ndef git_push():\n    \"\"\"Отправить изменения на удаленный репозиторий\"\"\"\n# Тестирование и отладка\ndef run_tests(path=None):",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "git_pull",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def git_pull():\n    \"\"\"Выполнить git pull в текущем репозитории\"\"\"\ndef git_commit(message):\n    \"\"\"Сделать коммит с указанным сообщением\"\"\"\ndef git_push():\n    \"\"\"Отправить изменения на удаленный репозиторий\"\"\"\n# Тестирование и отладка\ndef run_tests(path=None):\n    \"\"\"Запустить тесты\"\"\"\ndef run_script(path):",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "git_commit",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def git_commit(message):\n    \"\"\"Сделать коммит с указанным сообщением\"\"\"\ndef git_push():\n    \"\"\"Отправить изменения на удаленный репозиторий\"\"\"\n# Тестирование и отладка\ndef run_tests(path=None):\n    \"\"\"Запустить тесты\"\"\"\ndef run_script(path):\n    \"\"\"Выполнить скрипт\"\"\"\ndef debug_script(path):",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "git_push",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def git_push():\n    \"\"\"Отправить изменения на удаленный репозиторий\"\"\"\n# Тестирование и отладка\ndef run_tests(path=None):\n    \"\"\"Запустить тесты\"\"\"\ndef run_script(path):\n    \"\"\"Выполнить скрипт\"\"\"\ndef debug_script(path):\n    \"\"\"Запустить скрипт в режиме отладки\"\"\"\ndef check_code_quality(path):",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "run_tests",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def run_tests(path=None):\n    \"\"\"Запустить тесты\"\"\"\ndef run_script(path):\n    \"\"\"Выполнить скрипт\"\"\"\ndef debug_script(path):\n    \"\"\"Запустить скрипт в режиме отладки\"\"\"\ndef check_code_quality(path):\n    \"\"\"Проверить качество кода\"\"\"",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "run_script",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def run_script(path):\n    \"\"\"Выполнить скрипт\"\"\"\ndef debug_script(path):\n    \"\"\"Запустить скрипт в режиме отладки\"\"\"\ndef check_code_quality(path):\n    \"\"\"Проверить качество кода\"\"\"",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "debug_script",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def debug_script(path):\n    \"\"\"Запустить скрипт в режиме отладки\"\"\"\ndef check_code_quality(path):\n    \"\"\"Проверить качество кода\"\"\"",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "check_code_quality",
        "kind": 2,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "def check_code_quality(path):\n    \"\"\"Проверить качество кода\"\"\"",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.developer_commands",
        "description": "commands.developer_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\n# IDE и инструменты\ndef open_vscode(path=None):\n    \"\"\"Открыть Visual Studio Code\"\"\"\n    pyautogui.press(\"win\")\n    pyautogui.write(\"code\")\n    pyautogui.press(\"enter\")\ndef open_pycharm(path=None):\n    \"\"\"Открыть PyCharm\"\"\"\ndef open_github_desktop():",
        "detail": "commands.developer_commands",
        "documentation": {}
    },
    {
        "label": "create_file",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def create_file(path, content=\"\"):\n    \"\"\"Создать файл с указанным содержимым\"\"\"\n    with open(path, \"w\") as file:\n        file.write(content)\ndef read_file(path):\n    \"\"\"Прочитать содержимое файла\"\"\"\n    with open(path, \"r\") as file:\n        return file.read()\ndef write_file(path, content, append=False):\n    \"\"\"Записать содержимое в файл\"\"\"",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def read_file(path):\n    \"\"\"Прочитать содержимое файла\"\"\"\n    with open(path, \"r\") as file:\n        return file.read()\ndef write_file(path, content, append=False):\n    \"\"\"Записать содержимое в файл\"\"\"\ndef delete_file(path):\n    \"\"\"Удалить файл\"\"\"\n    os.remove(path)\ndef copy_file(source, destination):",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "write_file",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def write_file(path, content, append=False):\n    \"\"\"Записать содержимое в файл\"\"\"\ndef delete_file(path):\n    \"\"\"Удалить файл\"\"\"\n    os.remove(path)\ndef copy_file(source, destination):\n    \"\"\"Скопировать файл\"\"\"\ndef move_file(source, destination):\n    \"\"\"Переместить файл\"\"\"\ndef rename_file(path, new_name):",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "delete_file",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def delete_file(path):\n    \"\"\"Удалить файл\"\"\"\n    os.remove(path)\ndef copy_file(source, destination):\n    \"\"\"Скопировать файл\"\"\"\ndef move_file(source, destination):\n    \"\"\"Переместить файл\"\"\"\ndef rename_file(path, new_name):\n    \"\"\"Переименовать файл\"\"\"\n# Работа с папками",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "copy_file",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def copy_file(source, destination):\n    \"\"\"Скопировать файл\"\"\"\ndef move_file(source, destination):\n    \"\"\"Переместить файл\"\"\"\ndef rename_file(path, new_name):\n    \"\"\"Переименовать файл\"\"\"\n# Работа с папками\ndef create_directory(path):\n    \"\"\"Создать папку\"\"\"\n    os.mkdir(path)",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "move_file",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def move_file(source, destination):\n    \"\"\"Переместить файл\"\"\"\ndef rename_file(path, new_name):\n    \"\"\"Переименовать файл\"\"\"\n# Работа с папками\ndef create_directory(path):\n    \"\"\"Создать папку\"\"\"\n    os.mkdir(path)\ndef delete_directory(path, recursive=False):\n    \"\"\"Удалить папку\"\"\"",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "rename_file",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def rename_file(path, new_name):\n    \"\"\"Переименовать файл\"\"\"\n# Работа с папками\ndef create_directory(path):\n    \"\"\"Создать папку\"\"\"\n    os.mkdir(path)\ndef delete_directory(path, recursive=False):\n    \"\"\"Удалить папку\"\"\"\ndef list_directory(path):\n    \"\"\"Показать содержимое папки\"\"\"",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "create_directory",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def create_directory(path):\n    \"\"\"Создать папку\"\"\"\n    os.mkdir(path)\ndef delete_directory(path, recursive=False):\n    \"\"\"Удалить папку\"\"\"\ndef list_directory(path):\n    \"\"\"Показать содержимое папки\"\"\"\ndef search_files(directory, pattern):\n    \"\"\"Поиск файлов, соответствующих шаблону\"\"\"\ndef get_file_info(path):",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "delete_directory",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def delete_directory(path, recursive=False):\n    \"\"\"Удалить папку\"\"\"\ndef list_directory(path):\n    \"\"\"Показать содержимое папки\"\"\"\ndef search_files(directory, pattern):\n    \"\"\"Поиск файлов, соответствующих шаблону\"\"\"\ndef get_file_info(path):\n    \"\"\"Получить информацию о файле\"\"\"\n    return os.stat(path)",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "list_directory",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def list_directory(path):\n    \"\"\"Показать содержимое папки\"\"\"\ndef search_files(directory, pattern):\n    \"\"\"Поиск файлов, соответствующих шаблону\"\"\"\ndef get_file_info(path):\n    \"\"\"Получить информацию о файле\"\"\"\n    return os.stat(path)",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "search_files",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def search_files(directory, pattern):\n    \"\"\"Поиск файлов, соответствующих шаблону\"\"\"\ndef get_file_info(path):\n    \"\"\"Получить информацию о файле\"\"\"\n    return os.stat(path)",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "get_file_info",
        "kind": 2,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "def get_file_info(path):\n    \"\"\"Получить информацию о файле\"\"\"\n    return os.stat(path)",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.file_commands",
        "description": "commands.file_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\n# Основные операции с файлами\ndef create_file(path, content=\"\"):\n    \"\"\"Создать файл с указанным содержимым\"\"\"\n    with open(path, \"w\") as file:\n        file.write(content)\ndef read_file(path):\n    \"\"\"Прочитать содержимое файла\"\"\"\n    with open(path, \"r\") as file:\n        return file.read()",
        "detail": "commands.file_commands",
        "documentation": {}
    },
    {
        "label": "media_pause",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def media_pause():\n    \"\"\"Пауза/воспроизведение медиа\"\"\"\n    pyautogui.press(\"playpause\")\n    return \"Управление воспроизведением\"\ndef media_next():\n    \"\"\"Следующий трек\"\"\"\n    pyautogui.press(\"nexttrack\")\n    return \"Переключение на следующий трек\"\n# Управление воспроизведением\ndef media_play():",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "media_next",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def media_next():\n    \"\"\"Следующий трек\"\"\"\n    pyautogui.press(\"nexttrack\")\n    return \"Переключение на следующий трек\"\n# Управление воспроизведением\ndef media_play():\n    \"\"\"Начать воспроизведение медиа\"\"\"\ndef media_stop():\n    \"\"\"Остановить воспроизведение медиа\"\"\"\ndef media_previous():",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "media_play",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def media_play():\n    \"\"\"Начать воспроизведение медиа\"\"\"\ndef media_stop():\n    \"\"\"Остановить воспроизведение медиа\"\"\"\ndef media_previous():\n    \"\"\"Перейти к предыдущему треку\"\"\"\ndef media_fast_forward(seconds=10):\n    \"\"\"Перемотка вперед\"\"\"\ndef media_rewind(seconds=10):\n    \"\"\"Перемотка назад\"\"\"",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "media_stop",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def media_stop():\n    \"\"\"Остановить воспроизведение медиа\"\"\"\ndef media_previous():\n    \"\"\"Перейти к предыдущему треку\"\"\"\ndef media_fast_forward(seconds=10):\n    \"\"\"Перемотка вперед\"\"\"\ndef media_rewind(seconds=10):\n    \"\"\"Перемотка назад\"\"\"\n# Управление громкостью медиа\ndef media_volume_up():",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "media_previous",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def media_previous():\n    \"\"\"Перейти к предыдущему треку\"\"\"\ndef media_fast_forward(seconds=10):\n    \"\"\"Перемотка вперед\"\"\"\ndef media_rewind(seconds=10):\n    \"\"\"Перемотка назад\"\"\"\n# Управление громкостью медиа\ndef media_volume_up():\n    \"\"\"Увеличить громкость медиа\"\"\"\ndef media_volume_down():",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "media_fast_forward",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def media_fast_forward(seconds=10):\n    \"\"\"Перемотка вперед\"\"\"\ndef media_rewind(seconds=10):\n    \"\"\"Перемотка назад\"\"\"\n# Управление громкостью медиа\ndef media_volume_up():\n    \"\"\"Увеличить громкость медиа\"\"\"\ndef media_volume_down():\n    \"\"\"Уменьшить громкость медиа\"\"\"\ndef media_mute():",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "media_rewind",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def media_rewind(seconds=10):\n    \"\"\"Перемотка назад\"\"\"\n# Управление громкостью медиа\ndef media_volume_up():\n    \"\"\"Увеличить громкость медиа\"\"\"\ndef media_volume_down():\n    \"\"\"Уменьшить громкость медиа\"\"\"\ndef media_mute():\n    \"\"\"Отключить звук медиа\"\"\"\n# Плейлисты и файлы",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "media_volume_up",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def media_volume_up():\n    \"\"\"Увеличить громкость медиа\"\"\"\ndef media_volume_down():\n    \"\"\"Уменьшить громкость медиа\"\"\"\ndef media_mute():\n    \"\"\"Отключить звук медиа\"\"\"\n# Плейлисты и файлы\ndef open_media_file(file_path):\n    \"\"\"Открыть медиа-файл в плеере по умолчанию\"\"\"\ndef create_playlist(files, name=None):",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "media_volume_down",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def media_volume_down():\n    \"\"\"Уменьшить громкость медиа\"\"\"\ndef media_mute():\n    \"\"\"Отключить звук медиа\"\"\"\n# Плейлисты и файлы\ndef open_media_file(file_path):\n    \"\"\"Открыть медиа-файл в плеере по умолчанию\"\"\"\ndef create_playlist(files, name=None):\n    \"\"\"Создать плейлист из файлов\"\"\"\ndef save_playlist(playlist, path):",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "media_mute",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def media_mute():\n    \"\"\"Отключить звук медиа\"\"\"\n# Плейлисты и файлы\ndef open_media_file(file_path):\n    \"\"\"Открыть медиа-файл в плеере по умолчанию\"\"\"\ndef create_playlist(files, name=None):\n    \"\"\"Создать плейлист из файлов\"\"\"\ndef save_playlist(playlist, path):\n    \"\"\"Сохранить плейлист в файл\"\"\"\ndef load_playlist(path):",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "open_media_file",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def open_media_file(file_path):\n    \"\"\"Открыть медиа-файл в плеере по умолчанию\"\"\"\ndef create_playlist(files, name=None):\n    \"\"\"Создать плейлист из файлов\"\"\"\ndef save_playlist(playlist, path):\n    \"\"\"Сохранить плейлист в файл\"\"\"\ndef load_playlist(path):\n    \"\"\"Загрузить плейлист из файла\"\"\"\ndef get_commands():\n    return {",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "create_playlist",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def create_playlist(files, name=None):\n    \"\"\"Создать плейлист из файлов\"\"\"\ndef save_playlist(playlist, path):\n    \"\"\"Сохранить плейлист в файл\"\"\"\ndef load_playlist(path):\n    \"\"\"Загрузить плейлист из файла\"\"\"\ndef get_commands():\n    return {\n        \"начать воспроизведение\": media_play,\n        \"пауза\": media_pause,",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "save_playlist",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def save_playlist(playlist, path):\n    \"\"\"Сохранить плейлист в файл\"\"\"\ndef load_playlist(path):\n    \"\"\"Загрузить плейлист из файла\"\"\"\ndef get_commands():\n    return {\n        \"начать воспроизведение\": media_play,\n        \"пауза\": media_pause,\n        \"стоп\": media_stop,\n        \"следующий трек\": media_next,",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "load_playlist",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def load_playlist(path):\n    \"\"\"Загрузить плейлист из файла\"\"\"\ndef get_commands():\n    return {\n        \"начать воспроизведение\": media_play,\n        \"пауза\": media_pause,\n        \"стоп\": media_stop,\n        \"следующий трек\": media_next,\n        \"предыдущий трек\": media_previous,\n        \"перемотать вперед\": media_fast_forward,",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "get_commands",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def get_commands():\n    return {\n        \"начать воспроизведение\": media_play,\n        \"пауза\": media_pause,\n        \"стоп\": media_stop,\n        \"следующий трек\": media_next,\n        \"предыдущий трек\": media_previous,\n        \"перемотать вперед\": media_fast_forward,\n        \"перемотать назад\": media_rewind,\n        \"увеличить громкость медиа\": media_volume_up,",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "get_aliases",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def get_aliases():\n    return {\n        \"следующая песня\": \"следующий трек\",\n        \"следующая композиция\": \"следующий трек\",\n        \"пауза воспроизведения\": \"пауза\",\n        \"плей\": \"начать воспроизведение\",\n        \"пуск\": \"начать воспроизведение\",\n        \"остановить\": \"стоп\",\n    }\ndef get_intents():",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "get_intents",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def get_intents():\n    return {\n        \"управление_медиа\": [\n            \"начать воспроизведение\",\n            \"пауза\",\n            \"стоп\",\n            \"следующий трек\",\n            \"предыдущий трек\",\n            \"перемотать вперед\",\n            \"перемотать назад\",",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "get_categories",
        "kind": 2,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "def get_categories():\n    return {\"Медиа\": [\"управление_медиа\", \"управление_звуком_медиа\", \"плейлисты\"]}",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.media_commands",
        "description": "commands.media_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\ndef media_pause():\n    \"\"\"Пауза/воспроизведение медиа\"\"\"\n    pyautogui.press(\"playpause\")\n    return \"Управление воспроизведением\"\ndef media_next():\n    \"\"\"Следующий трек\"\"\"\n    pyautogui.press(\"nexttrack\")\n    return \"Переключение на следующий трек\"\n# Управление воспроизведением",
        "detail": "commands.media_commands",
        "documentation": {}
    },
    {
        "label": "switch_to_application",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def switch_to_application(app_name):\n    \"\"\"Переключиться на указанное приложение\"\"\"\n    pyautogui.hotkey(\"alt\", \"tab\")\n    pyautogui.write(app_name)\n    pyautogui.press(\"enter\")\ndef switch_to_next_window():\n    \"\"\"Переключиться на следующее окно (Alt+Tab)\"\"\"\ndef switch_to_previous_window():\n    \"\"\"Переключиться на предыдущее окно (Alt+Shift+Tab)\"\"\"\ndef list_open_windows():",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "switch_to_next_window",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def switch_to_next_window():\n    \"\"\"Переключиться на следующее окно (Alt+Tab)\"\"\"\ndef switch_to_previous_window():\n    \"\"\"Переключиться на предыдущее окно (Alt+Shift+Tab)\"\"\"\ndef list_open_windows():\n    \"\"\"Показать список открытых окон\"\"\"\n# Навигация по рабочим столам\ndef switch_to_desktop(desktop_number):\n    \"\"\"Переключиться на виртуальный рабочий стол\"\"\"\ndef create_virtual_desktop():",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "switch_to_previous_window",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def switch_to_previous_window():\n    \"\"\"Переключиться на предыдущее окно (Alt+Shift+Tab)\"\"\"\ndef list_open_windows():\n    \"\"\"Показать список открытых окон\"\"\"\n# Навигация по рабочим столам\ndef switch_to_desktop(desktop_number):\n    \"\"\"Переключиться на виртуальный рабочий стол\"\"\"\ndef create_virtual_desktop():\n    \"\"\"Создать новый виртуальный рабочий стол\"\"\"\ndef close_virtual_desktop():",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "list_open_windows",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def list_open_windows():\n    \"\"\"Показать список открытых окон\"\"\"\n# Навигация по рабочим столам\ndef switch_to_desktop(desktop_number):\n    \"\"\"Переключиться на виртуальный рабочий стол\"\"\"\ndef create_virtual_desktop():\n    \"\"\"Создать новый виртуальный рабочий стол\"\"\"\ndef close_virtual_desktop():\n    \"\"\"Закрыть текущий виртуальный рабочий стол\"\"\"\n# Навигация по веб-страницам",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "switch_to_desktop",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def switch_to_desktop(desktop_number):\n    \"\"\"Переключиться на виртуальный рабочий стол\"\"\"\ndef create_virtual_desktop():\n    \"\"\"Создать новый виртуальный рабочий стол\"\"\"\ndef close_virtual_desktop():\n    \"\"\"Закрыть текущий виртуальный рабочий стол\"\"\"\n# Навигация по веб-страницам\ndef open_tab(url=None):\n    \"\"\"Открыть новую вкладку в браузере\"\"\"\ndef close_tab():",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "create_virtual_desktop",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def create_virtual_desktop():\n    \"\"\"Создать новый виртуальный рабочий стол\"\"\"\ndef close_virtual_desktop():\n    \"\"\"Закрыть текущий виртуальный рабочий стол\"\"\"\n# Навигация по веб-страницам\ndef open_tab(url=None):\n    \"\"\"Открыть новую вкладку в браузере\"\"\"\ndef close_tab():\n    \"\"\"Закрыть текущую вкладку\"\"\"\ndef switch_to_tab(tab_number):",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "close_virtual_desktop",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def close_virtual_desktop():\n    \"\"\"Закрыть текущий виртуальный рабочий стол\"\"\"\n# Навигация по веб-страницам\ndef open_tab(url=None):\n    \"\"\"Открыть новую вкладку в браузере\"\"\"\ndef close_tab():\n    \"\"\"Закрыть текущую вкладку\"\"\"\ndef switch_to_tab(tab_number):\n    \"\"\"Переключиться на вкладку по номеру\"\"\"\ndef switch_to_next_tab():",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "open_tab",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def open_tab(url=None):\n    \"\"\"Открыть новую вкладку в браузере\"\"\"\ndef close_tab():\n    \"\"\"Закрыть текущую вкладку\"\"\"\ndef switch_to_tab(tab_number):\n    \"\"\"Переключиться на вкладку по номеру\"\"\"\ndef switch_to_next_tab():\n    \"\"\"Переключиться на следующую вкладку\"\"\"\ndef switch_to_previous_tab():\n    \"\"\"Переключиться на предыдущую вкладку\"\"\"",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "close_tab",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def close_tab():\n    \"\"\"Закрыть текущую вкладку\"\"\"\ndef switch_to_tab(tab_number):\n    \"\"\"Переключиться на вкладку по номеру\"\"\"\ndef switch_to_next_tab():\n    \"\"\"Переключиться на следующую вкладку\"\"\"\ndef switch_to_previous_tab():\n    \"\"\"Переключиться на предыдущую вкладку\"\"\"",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "switch_to_tab",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def switch_to_tab(tab_number):\n    \"\"\"Переключиться на вкладку по номеру\"\"\"\ndef switch_to_next_tab():\n    \"\"\"Переключиться на следующую вкладку\"\"\"\ndef switch_to_previous_tab():\n    \"\"\"Переключиться на предыдущую вкладку\"\"\"",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "switch_to_next_tab",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def switch_to_next_tab():\n    \"\"\"Переключиться на следующую вкладку\"\"\"\ndef switch_to_previous_tab():\n    \"\"\"Переключиться на предыдущую вкладку\"\"\"",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "switch_to_previous_tab",
        "kind": 2,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "def switch_to_previous_tab():\n    \"\"\"Переключиться на предыдущую вкладку\"\"\"",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.navigation_commands",
        "description": "commands.navigation_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\n# Перемещение по приложениям\ndef switch_to_application(app_name):\n    \"\"\"Переключиться на указанное приложение\"\"\"\n    pyautogui.hotkey(\"alt\", \"tab\")\n    pyautogui.write(app_name)\n    pyautogui.press(\"enter\")\ndef switch_to_next_window():\n    \"\"\"Переключиться на следующее окно (Alt+Tab)\"\"\"\ndef switch_to_previous_window():",
        "detail": "commands.navigation_commands",
        "documentation": {}
    },
    {
        "label": "discover_devices",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def discover_devices():\n    \"\"\"Обнаружить устройства умного дома\"\"\"\ndef list_devices():\n    \"\"\"Вывести список устройств\"\"\"\ndef get_device_status(device_id):\n    \"\"\"Получить статус устройства\"\"\"\n# Освещение\ndef turn_on_light(device_id=None, room=None):\n    \"\"\"Включить свет\"\"\"\ndef turn_off_light(device_id=None, room=None):",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "list_devices",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def list_devices():\n    \"\"\"Вывести список устройств\"\"\"\ndef get_device_status(device_id):\n    \"\"\"Получить статус устройства\"\"\"\n# Освещение\ndef turn_on_light(device_id=None, room=None):\n    \"\"\"Включить свет\"\"\"\ndef turn_off_light(device_id=None, room=None):\n    \"\"\"Выключить свет\"\"\"\ndef set_brightness(device_id, level):",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "get_device_status",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def get_device_status(device_id):\n    \"\"\"Получить статус устройства\"\"\"\n# Освещение\ndef turn_on_light(device_id=None, room=None):\n    \"\"\"Включить свет\"\"\"\ndef turn_off_light(device_id=None, room=None):\n    \"\"\"Выключить свет\"\"\"\ndef set_brightness(device_id, level):\n    \"\"\"Установить яркость света\"\"\"\ndef set_light_color(device_id, color):",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "turn_on_light",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def turn_on_light(device_id=None, room=None):\n    \"\"\"Включить свет\"\"\"\ndef turn_off_light(device_id=None, room=None):\n    \"\"\"Выключить свет\"\"\"\ndef set_brightness(device_id, level):\n    \"\"\"Установить яркость света\"\"\"\ndef set_light_color(device_id, color):\n    \"\"\"Установить цвет света\"\"\"\n# Климат\ndef set_temperature(device_id, temperature):",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "turn_off_light",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def turn_off_light(device_id=None, room=None):\n    \"\"\"Выключить свет\"\"\"\ndef set_brightness(device_id, level):\n    \"\"\"Установить яркость света\"\"\"\ndef set_light_color(device_id, color):\n    \"\"\"Установить цвет света\"\"\"\n# Климат\ndef set_temperature(device_id, temperature):\n    \"\"\"Установить температуру\"\"\"\ndef get_temperature(device_id=None, room=None):",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "set_brightness",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def set_brightness(device_id, level):\n    \"\"\"Установить яркость света\"\"\"\ndef set_light_color(device_id, color):\n    \"\"\"Установить цвет света\"\"\"\n# Климат\ndef set_temperature(device_id, temperature):\n    \"\"\"Установить температуру\"\"\"\ndef get_temperature(device_id=None, room=None):\n    \"\"\"Получить текущую температуру\"\"\"\ndef turn_on_climate_device(device_id, mode=None):",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "set_light_color",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def set_light_color(device_id, color):\n    \"\"\"Установить цвет света\"\"\"\n# Климат\ndef set_temperature(device_id, temperature):\n    \"\"\"Установить температуру\"\"\"\ndef get_temperature(device_id=None, room=None):\n    \"\"\"Получить текущую температуру\"\"\"\ndef turn_on_climate_device(device_id, mode=None):\n    \"\"\"Включить устройство климат-контроля\"\"\"\ndef turn_off_climate_device(device_id):",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "set_temperature",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def set_temperature(device_id, temperature):\n    \"\"\"Установить температуру\"\"\"\ndef get_temperature(device_id=None, room=None):\n    \"\"\"Получить текущую температуру\"\"\"\ndef turn_on_climate_device(device_id, mode=None):\n    \"\"\"Включить устройство климат-контроля\"\"\"\ndef turn_off_climate_device(device_id):\n    \"\"\"Выключить устройство климат-контроля\"\"\"\n# Безопасность\ndef arm_security_system():",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "get_temperature",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def get_temperature(device_id=None, room=None):\n    \"\"\"Получить текущую температуру\"\"\"\ndef turn_on_climate_device(device_id, mode=None):\n    \"\"\"Включить устройство климат-контроля\"\"\"\ndef turn_off_climate_device(device_id):\n    \"\"\"Выключить устройство климат-контроля\"\"\"\n# Безопасность\ndef arm_security_system():\n    \"\"\"Активировать охранную систему\"\"\"\ndef disarm_security_system():",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "turn_on_climate_device",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def turn_on_climate_device(device_id, mode=None):\n    \"\"\"Включить устройство климат-контроля\"\"\"\ndef turn_off_climate_device(device_id):\n    \"\"\"Выключить устройство климат-контроля\"\"\"\n# Безопасность\ndef arm_security_system():\n    \"\"\"Активировать охранную систему\"\"\"\ndef disarm_security_system():\n    \"\"\"Деактивировать охранную систему\"\"\"\ndef get_security_status():",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "turn_off_climate_device",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def turn_off_climate_device(device_id):\n    \"\"\"Выключить устройство климат-контроля\"\"\"\n# Безопасность\ndef arm_security_system():\n    \"\"\"Активировать охранную систему\"\"\"\ndef disarm_security_system():\n    \"\"\"Деактивировать охранную систему\"\"\"\ndef get_security_status():\n    \"\"\"Получить статус охранной системы\"\"\"\ndef check_cameras():",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "arm_security_system",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def arm_security_system():\n    \"\"\"Активировать охранную систему\"\"\"\ndef disarm_security_system():\n    \"\"\"Деактивировать охранную систему\"\"\"\ndef get_security_status():\n    \"\"\"Получить статус охранной системы\"\"\"\ndef check_cameras():\n    \"\"\"Проверить камеры наблюдения\"\"\"",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "disarm_security_system",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def disarm_security_system():\n    \"\"\"Деактивировать охранную систему\"\"\"\ndef get_security_status():\n    \"\"\"Получить статус охранной системы\"\"\"\ndef check_cameras():\n    \"\"\"Проверить камеры наблюдения\"\"\"",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "get_security_status",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def get_security_status():\n    \"\"\"Получить статус охранной системы\"\"\"\ndef check_cameras():\n    \"\"\"Проверить камеры наблюдения\"\"\"",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "check_cameras",
        "kind": 2,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "def check_cameras():\n    \"\"\"Проверить камеры наблюдения\"\"\"",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.smart_home_commands",
        "description": "commands.smart_home_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\n# Общие функции\ndef discover_devices():\n    \"\"\"Обнаружить устройства умного дома\"\"\"\ndef list_devices():\n    \"\"\"Вывести список устройств\"\"\"\ndef get_device_status(device_id):\n    \"\"\"Получить статус устройства\"\"\"\n# Освещение\ndef turn_on_light(device_id=None, room=None):",
        "detail": "commands.smart_home_commands",
        "documentation": {}
    },
    {
        "label": "minimize_all_windows",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def minimize_all_windows():\n    \"\"\"Свернуть все окна (Win+D)\"\"\"\n    logger.info(\"Начало выполнения функции minimize_all_windows()\")\n    try:\n        # Метод с использованием PowerShell\n        logger.info(\"Попытка использования PowerShell для сворачивания всех окон\")\n        os.system('powershell -command \"(New-Object -ComObject Shell.Application).MinimizeAll()\"')\n        logger.info(\"Команда PowerShell выполнена\")\n        return \"Все окна свернуты\"\n    except Exception as e:",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "open_browser",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def open_browser():\n    \"\"\"Открыть браузер по умолчанию\"\"\"\n    os.system(\"start https://www.google.com\")\n    return \"Браузер открыт\"\ndef take_screenshot(path=None):\n    \"\"\"Сделать скриншот и сохранить по указанному пути\"\"\"\n    screenshot_path = path or Config.SCREENSHOT_DIR\n    os.makedirs(screenshot_path, exist_ok=True)\n    filename = f\"screenshot_{int(time.time())}.png\"\n    full_path = os.path.join(screenshot_path, filename)",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def take_screenshot(path=None):\n    \"\"\"Сделать скриншот и сохранить по указанному пути\"\"\"\n    screenshot_path = path or Config.SCREENSHOT_DIR\n    os.makedirs(screenshot_path, exist_ok=True)\n    filename = f\"screenshot_{int(time.time())}.png\"\n    full_path = os.path.join(screenshot_path, filename)\n    pyautogui.screenshot(full_path)\n    return f\"Скриншот сохранен: {filename}\"\ndef volume_up(steps=5):\n    \"\"\"Увеличить громкость системы\"\"\"",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "volume_up",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def volume_up(steps=5):\n    \"\"\"Увеличить громкость системы\"\"\"\n    for _ in range(steps):  # Увеличиваем на заданное количество шагов\n        pyautogui.press(\"volumeup\")\n    return \"Громкость увеличена\"\ndef volume_down(steps=5):\n    \"\"\"Уменьшить громкость системы\"\"\"\n    for _ in range(steps):  # Уменьшаем на заданное количество шагов\n        pyautogui.press(\"volumedown\")\n    return \"Громкость уменьшена\"",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "volume_down",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def volume_down(steps=5):\n    \"\"\"Уменьшить громкость системы\"\"\"\n    for _ in range(steps):  # Уменьшаем на заданное количество шагов\n        pyautogui.press(\"volumedown\")\n    return \"Громкость уменьшена\"\ndef set_volume(level):\n    \"\"\"Установить уровень громкости (0-100%)\"\"\"\n    pyautogui.press(\"volumemute\")\n    for _ in range(level):  # Увеличиваем на заданное количество шагов\n        pyautogui.press(\"volumeup\")",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "set_volume",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def set_volume(level):\n    \"\"\"Установить уровень громкости (0-100%)\"\"\"\n    pyautogui.press(\"volumemute\")\n    for _ in range(level):  # Увеличиваем на заданное количество шагов\n        pyautogui.press(\"volumeup\")\ndef open_notepad():\n    \"\"\"Открыть блокнот\"\"\"\n    os.system(\"notepad\")\n    return \"Блокнот открыт\"\ndef speak_text(text):",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "open_notepad",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def open_notepad():\n    \"\"\"Открыть блокнот\"\"\"\n    os.system(\"notepad\")\n    return \"Блокнот открыт\"\ndef speak_text(text):\n    \"\"\"Озвучить текст\"\"\"\n    engine = pyttsx3.init()\n    engine.say(text)\n    engine.runAndWait()\n    return f\"Текст '{text}' озвучен\"",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "speak_text",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def speak_text(text):\n    \"\"\"Озвучить текст\"\"\"\n    engine = pyttsx3.init()\n    engine.say(text)\n    engine.runAndWait()\n    return f\"Текст '{text}' озвучен\"\ndef shutdown_computer(timeout=30):\n    \"\"\"Выключение компьютера с опциональной задержкой\"\"\"\n    os.system(f\"shutdown /s /t {timeout}\")\n    return f\"Компьютер будет выключен через {timeout} секунд\"",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "shutdown_computer",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def shutdown_computer(timeout=30):\n    \"\"\"Выключение компьютера с опциональной задержкой\"\"\"\n    os.system(f\"shutdown /s /t {timeout}\")\n    return f\"Компьютер будет выключен через {timeout} секунд\"\ndef restart_computer(timeout=30):\n    \"\"\"Перезагрузка компьютера с опциональной задержкой\"\"\"\n    os.system(f\"shutdown /r /t {timeout}\")\n    return f\"Компьютер будет перезагружен через {timeout} секунд\"\n# Управление окнами\ndef maximize_window(title=None):",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "restart_computer",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def restart_computer(timeout=30):\n    \"\"\"Перезагрузка компьютера с опциональной задержкой\"\"\"\n    os.system(f\"shutdown /r /t {timeout}\")\n    return f\"Компьютер будет перезагружен через {timeout} секунд\"\n# Управление окнами\ndef maximize_window(title=None):\n    \"\"\"Развернуть окно\"\"\"\ndef restore_window(title=None):\n    \"\"\"Восстановить окно\"\"\"\ndef close_window(title=None):",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "maximize_window",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def maximize_window(title=None):\n    \"\"\"Развернуть окно\"\"\"\ndef restore_window(title=None):\n    \"\"\"Восстановить окно\"\"\"\ndef close_window(title=None):\n    \"\"\"Закрыть активное окно или окно с указанным заголовком\"\"\"\n# Управление системой\ndef sleep_computer():\n    \"\"\"Перевести компьютер в спящий режим\"\"\"\ndef lock_computer():",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "restore_window",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def restore_window(title=None):\n    \"\"\"Восстановить окно\"\"\"\ndef close_window(title=None):\n    \"\"\"Закрыть активное окно или окно с указанным заголовком\"\"\"\n# Управление системой\ndef sleep_computer():\n    \"\"\"Перевести компьютер в спящий режим\"\"\"\ndef lock_computer():\n    \"\"\"Заблокировать компьютер\"\"\"\ndef logout_user():",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "close_window",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def close_window(title=None):\n    \"\"\"Закрыть активное окно или окно с указанным заголовком\"\"\"\n# Управление системой\ndef sleep_computer():\n    \"\"\"Перевести компьютер в спящий режим\"\"\"\ndef lock_computer():\n    \"\"\"Заблокировать компьютер\"\"\"\ndef logout_user():\n    \"\"\"Выйти из системы\"\"\"\ndef mute_sound():",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "sleep_computer",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def sleep_computer():\n    \"\"\"Перевести компьютер в спящий режим\"\"\"\ndef lock_computer():\n    \"\"\"Заблокировать компьютер\"\"\"\ndef logout_user():\n    \"\"\"Выйти из системы\"\"\"\ndef mute_sound():\n    \"\"\"Выключить звук\"\"\"\ndef unmute_sound():\n    \"\"\"Включить звук\"\"\"",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "lock_computer",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def lock_computer():\n    \"\"\"Заблокировать компьютер\"\"\"\ndef logout_user():\n    \"\"\"Выйти из системы\"\"\"\ndef mute_sound():\n    \"\"\"Выключить звук\"\"\"\ndef unmute_sound():\n    \"\"\"Включить звук\"\"\"\n# Скриншоты и запись экрана\ndef start_screen_recording(path=None):",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def logout_user():\n    \"\"\"Выйти из системы\"\"\"\ndef mute_sound():\n    \"\"\"Выключить звук\"\"\"\ndef unmute_sound():\n    \"\"\"Включить звук\"\"\"\n# Скриншоты и запись экрана\ndef start_screen_recording(path=None):\n    \"\"\"Начать запись экрана\"\"\"\ndef stop_screen_recording():",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "mute_sound",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def mute_sound():\n    \"\"\"Выключить звук\"\"\"\ndef unmute_sound():\n    \"\"\"Включить звук\"\"\"\n# Скриншоты и запись экрана\ndef start_screen_recording(path=None):\n    \"\"\"Начать запись экрана\"\"\"\ndef stop_screen_recording():\n    \"\"\"Остановить запись экрана\"\"\"\n# Буфер обмена",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "unmute_sound",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def unmute_sound():\n    \"\"\"Включить звук\"\"\"\n# Скриншоты и запись экрана\ndef start_screen_recording(path=None):\n    \"\"\"Начать запись экрана\"\"\"\ndef stop_screen_recording():\n    \"\"\"Остановить запись экрана\"\"\"\n# Буфер обмена\ndef copy_to_clipboard(text):\n    \"\"\"Скопировать текст в буфер обмена\"\"\"",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "start_screen_recording",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def start_screen_recording(path=None):\n    \"\"\"Начать запись экрана\"\"\"\ndef stop_screen_recording():\n    \"\"\"Остановить запись экрана\"\"\"\n# Буфер обмена\ndef copy_to_clipboard(text):\n    \"\"\"Скопировать текст в буфер обмена\"\"\"\ndef paste_from_clipboard():\n    \"\"\"Вставить текст из буфера обмена\"\"\"\ndef clear_clipboard():",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "stop_screen_recording",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def stop_screen_recording():\n    \"\"\"Остановить запись экрана\"\"\"\n# Буфер обмена\ndef copy_to_clipboard(text):\n    \"\"\"Скопировать текст в буфер обмена\"\"\"\ndef paste_from_clipboard():\n    \"\"\"Вставить текст из буфера обмена\"\"\"\ndef clear_clipboard():\n    \"\"\"Очистить буфер обмена\"\"\"\ndef show_notification(title, message):",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "copy_to_clipboard",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def copy_to_clipboard(text):\n    \"\"\"Скопировать текст в буфер обмена\"\"\"\ndef paste_from_clipboard():\n    \"\"\"Вставить текст из буфера обмена\"\"\"\ndef clear_clipboard():\n    \"\"\"Очистить буфер обмена\"\"\"\ndef show_notification(title, message):\n    \"\"\"Показать уведомление\"\"\"\n# Система\ndef get_system_info():",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "paste_from_clipboard",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def paste_from_clipboard():\n    \"\"\"Вставить текст из буфера обмена\"\"\"\ndef clear_clipboard():\n    \"\"\"Очистить буфер обмена\"\"\"\ndef show_notification(title, message):\n    \"\"\"Показать уведомление\"\"\"\n# Система\ndef get_system_info():\n    \"\"\"Получить информацию о системе\"\"\"\ndef list_running_processes():",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "clear_clipboard",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def clear_clipboard():\n    \"\"\"Очистить буфер обмена\"\"\"\ndef show_notification(title, message):\n    \"\"\"Показать уведомление\"\"\"\n# Система\ndef get_system_info():\n    \"\"\"Получить информацию о системе\"\"\"\ndef list_running_processes():\n    \"\"\"Показать список запущенных процессов\"\"\"\ndef kill_process(process_name_or_id):",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "show_notification",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def show_notification(title, message):\n    \"\"\"Показать уведомление\"\"\"\n# Система\ndef get_system_info():\n    \"\"\"Получить информацию о системе\"\"\"\ndef list_running_processes():\n    \"\"\"Показать список запущенных процессов\"\"\"\ndef kill_process(process_name_or_id):\n    \"\"\"Завершить процесс по имени или ID\"\"\"\ndef get_commands():",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "get_system_info",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def get_system_info():\n    \"\"\"Получить информацию о системе\"\"\"\ndef list_running_processes():\n    \"\"\"Показать список запущенных процессов\"\"\"\ndef kill_process(process_name_or_id):\n    \"\"\"Завершить процесс по имени или ID\"\"\"\ndef get_commands():\n    return {\n        \"свернуть все окна\": minimize_all_windows,\n        \"развернуть окно\": maximize_window,",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "list_running_processes",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def list_running_processes():\n    \"\"\"Показать список запущенных процессов\"\"\"\ndef kill_process(process_name_or_id):\n    \"\"\"Завершить процесс по имени или ID\"\"\"\ndef get_commands():\n    return {\n        \"свернуть все окна\": minimize_all_windows,\n        \"развернуть окно\": maximize_window,\n        \"закрыть окно\": close_window,\n        \"выключить компьютер\": shutdown_computer,",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "kill_process",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def kill_process(process_name_or_id):\n    \"\"\"Завершить процесс по имени или ID\"\"\"\ndef get_commands():\n    return {\n        \"свернуть все окна\": minimize_all_windows,\n        \"развернуть окно\": maximize_window,\n        \"закрыть окно\": close_window,\n        \"выключить компьютер\": shutdown_computer,\n        \"перезагрузить компьютер\": restart_computer,\n        \"спящий режим\": sleep_computer,",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "get_commands",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def get_commands():\n    return {\n        \"свернуть все окна\": minimize_all_windows,\n        \"развернуть окно\": maximize_window,\n        \"закрыть окно\": close_window,\n        \"выключить компьютер\": shutdown_computer,\n        \"перезагрузить компьютер\": restart_computer,\n        \"спящий режим\": sleep_computer,\n        \"заблокировать компьютер\": lock_computer,\n        \"выйти из системы\": logout_user,",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "get_aliases",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def get_aliases():\n    return {\n        \"скрин\": \"сделать скриншот\",\n        \"снимок экрана\": \"сделать скриншот\",\n        \"скриншот\": \"сделать скриншот\",\n        \"выключить пк\": \"выключить компьютер\",\n        \"перезагрузить пк\": \"перезагрузить компьютер\",\n        \"громче\": \"увеличить громкость\",\n        \"тише\": \"уменьшить громкость\",\n        \"заблокировать\": \"заблокировать компьютер\",",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "get_intents",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def get_intents():\n    return {\n        \"управление_окнами\": [\"свернуть все окна\", \"развернуть окно\", \"закрыть окно\"],\n        \"управление_системой\": [\n            \"выключить компьютер\",\n            \"перезагрузить компьютер\",\n            \"спящий режим\",\n            \"заблокировать компьютер\",\n            \"выйти из системы\",\n        ],",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "get_categories",
        "kind": 2,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "def get_categories():\n    return {\n        \"Система\": [\n            \"управление_окнами\",\n            \"управление_системой\",\n            \"управление_звуком\",\n            \"скриншоты_запись\",\n            \"буфер_обмена\",\n            \"информация_система\",\n        ]",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.system_commands",
        "description": "commands.system_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\ndef minimize_all_windows():\n    \"\"\"Свернуть все окна (Win+D)\"\"\"\n    logger.info(\"Начало выполнения функции minimize_all_windows()\")\n    try:\n        # Метод с использованием PowerShell\n        logger.info(\"Попытка использования PowerShell для сворачивания всех окон\")\n        os.system('powershell -command \"(New-Object -ComObject Shell.Application).MinimizeAll()\"')\n        logger.info(\"Команда PowerShell выполнена\")\n        return \"Все окна свернуты\"",
        "detail": "commands.system_commands",
        "documentation": {}
    },
    {
        "label": "move_mouse",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def move_mouse(x, y):\n    \"\"\"Переместить курсор мыши в указанную позицию\"\"\"\n    pyautogui.moveTo(x, y)\ndef click_mouse(x=None, y=None, button=\"left\"):\n    \"\"\"Кликнуть мышью в текущей или указанной позиции\"\"\"\ndef double_click(x=None, y=None):\n    \"\"\"Двойной клик мышью\"\"\"\ndef right_click(x=None, y=None):\n    \"\"\"Клик правой кнопкой мыши\"\"\"\ndef drag_mouse(start_x, start_y, end_x, end_y):",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "click_mouse",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def click_mouse(x=None, y=None, button=\"left\"):\n    \"\"\"Кликнуть мышью в текущей или указанной позиции\"\"\"\ndef double_click(x=None, y=None):\n    \"\"\"Двойной клик мышью\"\"\"\ndef right_click(x=None, y=None):\n    \"\"\"Клик правой кнопкой мыши\"\"\"\ndef drag_mouse(start_x, start_y, end_x, end_y):\n    \"\"\"Перетащить элемент мышью\"\"\"\ndef scroll_up(clicks=3):\n    \"\"\"Прокрутить колесо мыши вверх\"\"\"",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "double_click",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def double_click(x=None, y=None):\n    \"\"\"Двойной клик мышью\"\"\"\ndef right_click(x=None, y=None):\n    \"\"\"Клик правой кнопкой мыши\"\"\"\ndef drag_mouse(start_x, start_y, end_x, end_y):\n    \"\"\"Перетащить элемент мышью\"\"\"\ndef scroll_up(clicks=3):\n    \"\"\"Прокрутить колесо мыши вверх\"\"\"\ndef scroll_down(clicks=3):\n    \"\"\"Прокрутить колесо мыши вниз\"\"\"",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "right_click",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def right_click(x=None, y=None):\n    \"\"\"Клик правой кнопкой мыши\"\"\"\ndef drag_mouse(start_x, start_y, end_x, end_y):\n    \"\"\"Перетащить элемент мышью\"\"\"\ndef scroll_up(clicks=3):\n    \"\"\"Прокрутить колесо мыши вверх\"\"\"\ndef scroll_down(clicks=3):\n    \"\"\"Прокрутить колесо мыши вниз\"\"\"\n# Управление клавиатурой\ndef type_text(text):",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "drag_mouse",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def drag_mouse(start_x, start_y, end_x, end_y):\n    \"\"\"Перетащить элемент мышью\"\"\"\ndef scroll_up(clicks=3):\n    \"\"\"Прокрутить колесо мыши вверх\"\"\"\ndef scroll_down(clicks=3):\n    \"\"\"Прокрутить колесо мыши вниз\"\"\"\n# Управление клавиатурой\ndef type_text(text):\n    \"\"\"Ввести текст\"\"\"\ndef press_key(key):",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "scroll_up",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def scroll_up(clicks=3):\n    \"\"\"Прокрутить колесо мыши вверх\"\"\"\ndef scroll_down(clicks=3):\n    \"\"\"Прокрутить колесо мыши вниз\"\"\"\n# Управление клавиатурой\ndef type_text(text):\n    \"\"\"Ввести текст\"\"\"\ndef press_key(key):\n    \"\"\"Нажать клавишу\"\"\"\ndef hotkey(*keys):",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "scroll_down",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def scroll_down(clicks=3):\n    \"\"\"Прокрутить колесо мыши вниз\"\"\"\n# Управление клавиатурой\ndef type_text(text):\n    \"\"\"Ввести текст\"\"\"\ndef press_key(key):\n    \"\"\"Нажать клавишу\"\"\"\ndef hotkey(*keys):\n    \"\"\"Нажать комбинацию клавиш\"\"\"\ndef copy():",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "type_text",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def type_text(text):\n    \"\"\"Ввести текст\"\"\"\ndef press_key(key):\n    \"\"\"Нажать клавишу\"\"\"\ndef hotkey(*keys):\n    \"\"\"Нажать комбинацию клавиш\"\"\"\ndef copy():\n    \"\"\"Копировать (Ctrl+C)\"\"\"\ndef cut():\n    \"\"\"Вырезать (Ctrl+X)\"\"\"",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "press_key",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def press_key(key):\n    \"\"\"Нажать клавишу\"\"\"\ndef hotkey(*keys):\n    \"\"\"Нажать комбинацию клавиш\"\"\"\ndef copy():\n    \"\"\"Копировать (Ctrl+C)\"\"\"\ndef cut():\n    \"\"\"Вырезать (Ctrl+X)\"\"\"\ndef paste():\n    \"\"\"Вставить (Ctrl+V)\"\"\"",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "hotkey",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def hotkey(*keys):\n    \"\"\"Нажать комбинацию клавиш\"\"\"\ndef copy():\n    \"\"\"Копировать (Ctrl+C)\"\"\"\ndef cut():\n    \"\"\"Вырезать (Ctrl+X)\"\"\"\ndef paste():\n    \"\"\"Вставить (Ctrl+V)\"\"\"\ndef select_all():\n    \"\"\"Выделить всё (Ctrl+A)\"\"\"",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def copy():\n    \"\"\"Копировать (Ctrl+C)\"\"\"\ndef cut():\n    \"\"\"Вырезать (Ctrl+X)\"\"\"\ndef paste():\n    \"\"\"Вставить (Ctrl+V)\"\"\"\ndef select_all():\n    \"\"\"Выделить всё (Ctrl+A)\"\"\"\n# Элементы интерфейса\ndef find_element_by_image(image_path):",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "cut",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def cut():\n    \"\"\"Вырезать (Ctrl+X)\"\"\"\ndef paste():\n    \"\"\"Вставить (Ctrl+V)\"\"\"\ndef select_all():\n    \"\"\"Выделить всё (Ctrl+A)\"\"\"\n# Элементы интерфейса\ndef find_element_by_image(image_path):\n    \"\"\"Найти элемент по изображению\"\"\"\ndef find_element_by_text(text):",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "paste",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def paste():\n    \"\"\"Вставить (Ctrl+V)\"\"\"\ndef select_all():\n    \"\"\"Выделить всё (Ctrl+A)\"\"\"\n# Элементы интерфейса\ndef find_element_by_image(image_path):\n    \"\"\"Найти элемент по изображению\"\"\"\ndef find_element_by_text(text):\n    \"\"\"Найти элемент по тексту\"\"\"\ndef wait_for_element(image_path, timeout=10):",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "select_all",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def select_all():\n    \"\"\"Выделить всё (Ctrl+A)\"\"\"\n# Элементы интерфейса\ndef find_element_by_image(image_path):\n    \"\"\"Найти элемент по изображению\"\"\"\ndef find_element_by_text(text):\n    \"\"\"Найти элемент по тексту\"\"\"\ndef wait_for_element(image_path, timeout=10):\n    \"\"\"Ожидать появления элемента\"\"\"\ndef interact_with_element(element, action=\"click\"):",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "find_element_by_image",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def find_element_by_image(image_path):\n    \"\"\"Найти элемент по изображению\"\"\"\ndef find_element_by_text(text):\n    \"\"\"Найти элемент по тексту\"\"\"\ndef wait_for_element(image_path, timeout=10):\n    \"\"\"Ожидать появления элемента\"\"\"\ndef interact_with_element(element, action=\"click\"):\n    \"\"\"Взаимодействовать с элементом интерфейса\"\"\"\ndef get_commands():\n    return {",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "find_element_by_text",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def find_element_by_text(text):\n    \"\"\"Найти элемент по тексту\"\"\"\ndef wait_for_element(image_path, timeout=10):\n    \"\"\"Ожидать появления элемента\"\"\"\ndef interact_with_element(element, action=\"click\"):\n    \"\"\"Взаимодействовать с элементом интерфейса\"\"\"\ndef get_commands():\n    return {\n        \"переместить мышь\": move_mouse,\n        \"кликнуть\": click_mouse,",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "wait_for_element",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def wait_for_element(image_path, timeout=10):\n    \"\"\"Ожидать появления элемента\"\"\"\ndef interact_with_element(element, action=\"click\"):\n    \"\"\"Взаимодействовать с элементом интерфейса\"\"\"\ndef get_commands():\n    return {\n        \"переместить мышь\": move_mouse,\n        \"кликнуть\": click_mouse,\n        \"двойной клик\": double_click,\n        \"правый клик\": right_click,",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "interact_with_element",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def interact_with_element(element, action=\"click\"):\n    \"\"\"Взаимодействовать с элементом интерфейса\"\"\"\ndef get_commands():\n    return {\n        \"переместить мышь\": move_mouse,\n        \"кликнуть\": click_mouse,\n        \"двойной клик\": double_click,\n        \"правый клик\": right_click,\n        \"перетащить\": drag_mouse,\n        \"прокрутить вверх\": scroll_up,",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "get_commands",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def get_commands():\n    return {\n        \"переместить мышь\": move_mouse,\n        \"кликнуть\": click_mouse,\n        \"двойной клик\": double_click,\n        \"правый клик\": right_click,\n        \"перетащить\": drag_mouse,\n        \"прокрутить вверх\": scroll_up,\n        \"прокрутить вниз\": scroll_down,\n        \"ввести текст\": type_text,",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "get_aliases",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def get_aliases():\n    return {\n        \"клик\": \"кликнуть\",\n        \"нажать\": \"кликнуть\",\n        \"двойной щелчок\": \"двойной клик\",\n        \"щелкнуть правой кнопкой\": \"правый клик\",\n        \"перетянуть\": \"перетащить\",\n        \"напечатать\": \"ввести текст\",\n    }\ndef get_intents():",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "get_intents",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def get_intents():\n    return {\n        \"управление_мышью\": [\n            \"переместить мышь\",\n            \"кликнуть\",\n            \"двойной клик\",\n            \"правый клик\",\n            \"перетащить\",\n            \"прокрутить вверх\",\n            \"прокрутить вниз\",",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "get_categories",
        "kind": 2,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "def get_categories():\n    return {\"Интерфейс\": [\"управление_мышью\", \"управление_клавиатурой\", \"поиск_элементов\"]}",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.ui_commands",
        "description": "commands.ui_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\n# Управление мышью\ndef move_mouse(x, y):\n    \"\"\"Переместить курсор мыши в указанную позицию\"\"\"\n    pyautogui.moveTo(x, y)\ndef click_mouse(x=None, y=None, button=\"left\"):\n    \"\"\"Кликнуть мышью в текущей или указанной позиции\"\"\"\ndef double_click(x=None, y=None):\n    \"\"\"Двойной клик мышью\"\"\"\ndef right_click(x=None, y=None):",
        "detail": "commands.ui_commands",
        "documentation": {}
    },
    {
        "label": "create_reminder",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def create_reminder(text, time):\n    \"\"\"Создать напоминание на указанное время\"\"\"\n    pyautogui.press(\"win\")\n    pyautogui.write(\"reminder\")\n    pyautogui.press(\"enter\")\ndef list_reminders():\n    \"\"\"Показать список напоминаний\"\"\"\ndef delete_reminder(reminder_id):\n    \"\"\"Удалить напоминание\"\"\"\ndef add_task(text, deadline=None, priority=None):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "list_reminders",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def list_reminders():\n    \"\"\"Показать список напоминаний\"\"\"\ndef delete_reminder(reminder_id):\n    \"\"\"Удалить напоминание\"\"\"\ndef add_task(text, deadline=None, priority=None):\n    \"\"\"Добавить задачу в список дел\"\"\"\ndef list_tasks():\n    \"\"\"Показать список задач\"\"\"\ndef mark_task_complete(task_id):\n    \"\"\"Отметить задачу как выполненную\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "delete_reminder",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def delete_reminder(reminder_id):\n    \"\"\"Удалить напоминание\"\"\"\ndef add_task(text, deadline=None, priority=None):\n    \"\"\"Добавить задачу в список дел\"\"\"\ndef list_tasks():\n    \"\"\"Показать список задач\"\"\"\ndef mark_task_complete(task_id):\n    \"\"\"Отметить задачу как выполненную\"\"\"\ndef delete_task(task_id):\n    \"\"\"Удалить задачу\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def add_task(text, deadline=None, priority=None):\n    \"\"\"Добавить задачу в список дел\"\"\"\ndef list_tasks():\n    \"\"\"Показать список задач\"\"\"\ndef mark_task_complete(task_id):\n    \"\"\"Отметить задачу как выполненную\"\"\"\ndef delete_task(task_id):\n    \"\"\"Удалить задачу\"\"\"\n# Календарь и встречи\ndef create_event(title, date, time, description=None, location=None):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "list_tasks",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def list_tasks():\n    \"\"\"Показать список задач\"\"\"\ndef mark_task_complete(task_id):\n    \"\"\"Отметить задачу как выполненную\"\"\"\ndef delete_task(task_id):\n    \"\"\"Удалить задачу\"\"\"\n# Календарь и встречи\ndef create_event(title, date, time, description=None, location=None):\n    \"\"\"Создать событие в календаре\"\"\"\ndef list_events(date=None):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "mark_task_complete",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def mark_task_complete(task_id):\n    \"\"\"Отметить задачу как выполненную\"\"\"\ndef delete_task(task_id):\n    \"\"\"Удалить задачу\"\"\"\n# Календарь и встречи\ndef create_event(title, date, time, description=None, location=None):\n    \"\"\"Создать событие в календаре\"\"\"\ndef list_events(date=None):\n    \"\"\"Показать события на указанную дату или все события\"\"\"\ndef update_event(event_id, **kwargs):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def delete_task(task_id):\n    \"\"\"Удалить задачу\"\"\"\n# Календарь и встречи\ndef create_event(title, date, time, description=None, location=None):\n    \"\"\"Создать событие в календаре\"\"\"\ndef list_events(date=None):\n    \"\"\"Показать события на указанную дату или все события\"\"\"\ndef update_event(event_id, **kwargs):\n    \"\"\"Обновить данные события\"\"\"\ndef delete_event(event_id):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "create_event",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def create_event(title, date, time, description=None, location=None):\n    \"\"\"Создать событие в календаре\"\"\"\ndef list_events(date=None):\n    \"\"\"Показать события на указанную дату или все события\"\"\"\ndef update_event(event_id, **kwargs):\n    \"\"\"Обновить данные события\"\"\"\ndef delete_event(event_id):\n    \"\"\"Удалить событие\"\"\"\n# Заметки\ndef create_note(title, content):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "list_events",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def list_events(date=None):\n    \"\"\"Показать события на указанную дату или все события\"\"\"\ndef update_event(event_id, **kwargs):\n    \"\"\"Обновить данные события\"\"\"\ndef delete_event(event_id):\n    \"\"\"Удалить событие\"\"\"\n# Заметки\ndef create_note(title, content):\n    \"\"\"Создать новую заметку\"\"\"\ndef list_notes():",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "update_event",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def update_event(event_id, **kwargs):\n    \"\"\"Обновить данные события\"\"\"\ndef delete_event(event_id):\n    \"\"\"Удалить событие\"\"\"\n# Заметки\ndef create_note(title, content):\n    \"\"\"Создать новую заметку\"\"\"\ndef list_notes():\n    \"\"\"Показать список заметок\"\"\"\ndef read_note(note_id):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "delete_event",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def delete_event(event_id):\n    \"\"\"Удалить событие\"\"\"\n# Заметки\ndef create_note(title, content):\n    \"\"\"Создать новую заметку\"\"\"\ndef list_notes():\n    \"\"\"Показать список заметок\"\"\"\ndef read_note(note_id):\n    \"\"\"Прочитать содержимое заметки\"\"\"\ndef update_note(note_id, content):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "create_note",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def create_note(title, content):\n    \"\"\"Создать новую заметку\"\"\"\ndef list_notes():\n    \"\"\"Показать список заметок\"\"\"\ndef read_note(note_id):\n    \"\"\"Прочитать содержимое заметки\"\"\"\ndef update_note(note_id, content):\n    \"\"\"Обновить содержимое заметки\"\"\"\ndef delete_note(note_id):\n    \"\"\"Удалить заметку\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "list_notes",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def list_notes():\n    \"\"\"Показать список заметок\"\"\"\ndef read_note(note_id):\n    \"\"\"Прочитать содержимое заметки\"\"\"\ndef update_note(note_id, content):\n    \"\"\"Обновить содержимое заметки\"\"\"\ndef delete_note(note_id):\n    \"\"\"Удалить заметку\"\"\"\n# Веб-функции\ndef search_web(query):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "read_note",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def read_note(note_id):\n    \"\"\"Прочитать содержимое заметки\"\"\"\ndef update_note(note_id, content):\n    \"\"\"Обновить содержимое заметки\"\"\"\ndef delete_note(note_id):\n    \"\"\"Удалить заметку\"\"\"\n# Веб-функции\ndef search_web(query):\n    \"\"\"Искать в интернете\"\"\"\n    # Реализация поиска в интернете",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "update_note",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def update_note(note_id, content):\n    \"\"\"Обновить содержимое заметки\"\"\"\ndef delete_note(note_id):\n    \"\"\"Удалить заметку\"\"\"\n# Веб-функции\ndef search_web(query):\n    \"\"\"Искать в интернете\"\"\"\n    # Реализация поиска в интернете\n    pass\ndef navigate_to(url):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "delete_note",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def delete_note(note_id):\n    \"\"\"Удалить заметку\"\"\"\n# Веб-функции\ndef search_web(query):\n    \"\"\"Искать в интернете\"\"\"\n    # Реализация поиска в интернете\n    pass\ndef navigate_to(url):\n    \"\"\"Перейти по адресу URL\"\"\"\n    # Реализация перехода по URL",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "search_web",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def search_web(query):\n    \"\"\"Искать в интернете\"\"\"\n    # Реализация поиска в интернете\n    pass\ndef navigate_to(url):\n    \"\"\"Перейти по адресу URL\"\"\"\n    # Реализация перехода по URL\n    pass\ndef refresh_page():\n    \"\"\"Обновить страницу\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "navigate_to",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def navigate_to(url):\n    \"\"\"Перейти по адресу URL\"\"\"\n    # Реализация перехода по URL\n    pass\ndef refresh_page():\n    \"\"\"Обновить страницу\"\"\"\n    # Реализация обновления страницы\n    pass\ndef go_back():\n    \"\"\"Вернуться на предыдущую страницу\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "refresh_page",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def refresh_page():\n    \"\"\"Обновить страницу\"\"\"\n    # Реализация обновления страницы\n    pass\ndef go_back():\n    \"\"\"Вернуться на предыдущую страницу\"\"\"\n    # Реализация перехода назад\n    pass\ndef go_forward():\n    \"\"\"Перейти на следующую страницу\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "go_back",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def go_back():\n    \"\"\"Вернуться на предыдущую страницу\"\"\"\n    # Реализация перехода назад\n    pass\ndef go_forward():\n    \"\"\"Перейти на следующую страницу\"\"\"\n    # Реализация перехода вперед\n    pass\ndef add_bookmark(title=None, url=None):\n    \"\"\"Добавить текущую страницу в закладки\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "go_forward",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def go_forward():\n    \"\"\"Перейти на следующую страницу\"\"\"\n    # Реализация перехода вперед\n    pass\ndef add_bookmark(title=None, url=None):\n    \"\"\"Добавить текущую страницу в закладки\"\"\"\n    # Реализация добавления закладки\n    pass\ndef open_bookmark(bookmark_name):\n    \"\"\"Открыть закладку\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "add_bookmark",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def add_bookmark(title=None, url=None):\n    \"\"\"Добавить текущую страницу в закладки\"\"\"\n    # Реализация добавления закладки\n    pass\ndef open_bookmark(bookmark_name):\n    \"\"\"Открыть закладку\"\"\"\n    # Реализация открытия закладки\n    pass\ndef show_history():\n    \"\"\"Показать историю браузера\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "open_bookmark",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def open_bookmark(bookmark_name):\n    \"\"\"Открыть закладку\"\"\"\n    # Реализация открытия закладки\n    pass\ndef show_history():\n    \"\"\"Показать историю браузера\"\"\"\n    # Реализация показа истории\n    pass\ndef clear_history():\n    \"\"\"Очистить историю браузера\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "show_history",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def show_history():\n    \"\"\"Показать историю браузера\"\"\"\n    # Реализация показа истории\n    pass\ndef clear_history():\n    \"\"\"Очистить историю браузера\"\"\"\n    # Реализация очистки истории\n    pass\ndef download_file(url, path=None):\n    \"\"\"Скачать файл по URL\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "clear_history",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def clear_history():\n    \"\"\"Очистить историю браузера\"\"\"\n    # Реализация очистки истории\n    pass\ndef download_file(url, path=None):\n    \"\"\"Скачать файл по URL\"\"\"\n    # Реализация скачивания файла\n    pass\ndef check_downloads():\n    \"\"\"Проверить загрузки в браузере\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "download_file",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def download_file(url, path=None):\n    \"\"\"Скачать файл по URL\"\"\"\n    # Реализация скачивания файла\n    pass\ndef check_downloads():\n    \"\"\"Проверить загрузки в браузере\"\"\"\n    # Реализация проверки загрузок\n    pass\ndef open_downloads_folder():\n    \"\"\"Открыть папку загрузок\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "check_downloads",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def check_downloads():\n    \"\"\"Проверить загрузки в браузере\"\"\"\n    # Реализация проверки загрузок\n    pass\ndef open_downloads_folder():\n    \"\"\"Открыть папку загрузок\"\"\"\n    # Реализация открытия папки загрузок\n    pass\ndef open_social_network(network_name):\n    \"\"\"Открыть социальную сеть\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "open_downloads_folder",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def open_downloads_folder():\n    \"\"\"Открыть папку загрузок\"\"\"\n    # Реализация открытия папки загрузок\n    pass\ndef open_social_network(network_name):\n    \"\"\"Открыть социальную сеть\"\"\"\n    # Реализация открытия соцсети\n    pass\ndef post_to_social_network(network_name, message, attachments=None):\n    \"\"\"Опубликовать сообщение в социальной сети\"\"\"",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "open_social_network",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def open_social_network(network_name):\n    \"\"\"Открыть социальную сеть\"\"\"\n    # Реализация открытия соцсети\n    pass\ndef post_to_social_network(network_name, message, attachments=None):\n    \"\"\"Опубликовать сообщение в социальной сети\"\"\"\n    # Реализация публикации в соцсети\n    pass\ndef get_commands():\n    return {",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "post_to_social_network",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def post_to_social_network(network_name, message, attachments=None):\n    \"\"\"Опубликовать сообщение в социальной сети\"\"\"\n    # Реализация публикации в соцсети\n    pass\ndef get_commands():\n    return {\n        \"искать в интернете\": search_web,\n        \"перейти по адресу\": navigate_to,\n        \"обновить страницу\": refresh_page,\n        \"назад\": go_back,",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "get_commands",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def get_commands():\n    return {\n        \"искать в интернете\": search_web,\n        \"перейти по адресу\": navigate_to,\n        \"обновить страницу\": refresh_page,\n        \"назад\": go_back,\n        \"вперед\": go_forward,\n        \"добавить в закладки\": add_bookmark,\n        \"открыть закладку\": open_bookmark,\n        \"показать историю браузера\": show_history,",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "get_aliases",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def get_aliases():\n    return {\n        \"поиск в интернете\": \"искать в интернете\",\n        \"поиск в сети\": \"искать в интернете\",\n        \"открыть сайт\": \"перейти по адресу\",\n        \"обновить сайт\": \"обновить страницу\",\n        \"вернуться\": \"назад\",\n    }\ndef get_intents():\n    return {",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "get_intents",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def get_intents():\n    return {\n        \"навигация_веб\": [\n            \"искать в интернете\",\n            \"перейти по адресу\",\n            \"обновить страницу\",\n            \"назад\",\n            \"вперед\",\n        ],\n        \"закладки_история\": [",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "get_categories",
        "kind": 2,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "def get_categories():\n    return {\"Интернет\": [\"навигация_веб\", \"закладки_история\", \"загрузки\", \"социальные_сети\"]}",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "commands.web_commands",
        "description": "commands.web_commands",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\n# Напоминания и задачи\ndef create_reminder(text, time):\n    \"\"\"Создать напоминание на указанное время\"\"\"\n    pyautogui.press(\"win\")\n    pyautogui.write(\"reminder\")\n    pyautogui.press(\"enter\")\ndef list_reminders():\n    \"\"\"Показать список напоминаний\"\"\"\ndef delete_reminder(reminder_id):",
        "detail": "commands.web_commands",
        "documentation": {}
    },
    {
        "label": "AbstractKeyboard",
        "kind": 6,
        "importPath": "core.common.input.base",
        "description": "core.common.input.base",
        "peekOfCode": "class AbstractKeyboard:\n    \"\"\"Абстрактный класс для эмуляции клавиатуры\"\"\"\n    def press_key(self, key):\n        \"\"\"Нажать клавишу\"\"\"\n        raise NotImplementedError(\"Метод должен быть реализован в дочернем классе\")\n    def release_key(self, key):\n        \"\"\"Отпустить клавишу\"\"\"\n        raise NotImplementedError(\"Метод должен быть реализован в дочернем классе\")\n    def press_and_release(self, key):\n        \"\"\"Нажать и отпустить клавишу\"\"\"",
        "detail": "core.common.input.base",
        "documentation": {}
    },
    {
        "label": "AbstractMouse",
        "kind": 6,
        "importPath": "core.common.input.base",
        "description": "core.common.input.base",
        "peekOfCode": "class AbstractMouse:\n    \"\"\"Абстрактный класс для эмуляции мыши\"\"\"\n    def move_to(self, x, y):\n        \"\"\"Переместить курсор в указанные координаты\"\"\"\n        raise NotImplementedError(\"Метод должен быть реализован в дочернем классе\")\n    def click(self, button=\"left\"):\n        \"\"\"Кликнуть указанной кнопкой мыши\"\"\"\n        raise NotImplementedError(\"Метод должен быть реализован в дочернем классе\")\n    def double_click(self, button=\"left\"):\n        \"\"\"Двойной клик мыши\"\"\"",
        "detail": "core.common.input.base",
        "documentation": {}
    },
    {
        "label": "InputController",
        "kind": 6,
        "importPath": "core.common.input.base",
        "description": "core.common.input.base",
        "peekOfCode": "class InputController:\n    \"\"\"Контроллер ввода, объединяющий клавиатуру и мышь\"\"\"\n    def __init__(self, keyboard, mouse):\n        \"\"\"\n        Инициализация контроллера ввода.\n        Args:\n            keyboard: Контроллер клавиатуры\n            mouse: Контроллер мыши\n        \"\"\"\n        self.keyboard = keyboard",
        "detail": "core.common.input.base",
        "documentation": {}
    },
    {
        "label": "ErrorHandler",
        "kind": 6,
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "peekOfCode": "class ErrorHandler:\n    \"\"\"\n    Обработчик ошибок.\n    Предоставляет функции для обработки и логирования ошибок.\n    \"\"\"\n    def __init__(self, logger_name=\"error_handler\"):\n        \"\"\"\n        Инициализация обработчика ошибок.\n        Args:\n            logger_name (str, optional): Имя логгера",
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_error",
        "kind": 2,
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "peekOfCode": "def handle_error(message, exception=None, module=\"general\", log_level=\"error\"):\n    \"\"\"\n    Обработка ошибок с логированием (глобальная функция).\n    Args:\n        message (str): Сообщение об ошибке\n        exception (Exception, optional): Исключение, вызвавшее ошибку\n        module (str, optional): Модуль, в котором произошла ошибка\n        log_level (str, optional): Уровень логирования ('error', 'warning', 'critical')\n    Returns:\n        bool: True, если ошибка обработана, False в противном случае",
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_warning",
        "kind": 2,
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "peekOfCode": "def handle_warning(message, module=\"general\"):\n    \"\"\"\n    Обработка предупреждений (глобальная функция).\n    Args:\n        message (str): Сообщение предупреждения\n        module (str, optional): Модуль, в котором произошло предупреждение\n    Returns:\n        bool: True, если предупреждение обработано\n    \"\"\"\n    return _error_handler.handle_warning(message, module)",
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_llm_error",
        "kind": 2,
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "peekOfCode": "def handle_llm_error(message, exception=None, model=None, prompt=None):\n    \"\"\"\n    Специализированный обработчик ошибок для LLM (глобальная функция).\n    Args:\n        message (str): Сообщение об ошибке\n        exception (Exception, optional): Исключение, вызвавшее ошибку\n        model (str, optional): Модель LLM, вызвавшая ошибку\n        prompt (str, optional): Промпт, вызвавший ошибку\n    Returns:\n        bool: True, если ошибка обработана, False в противном случае",
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "_error_handler",
        "kind": 5,
        "importPath": "core.common.error_handler",
        "description": "core.common.error_handler",
        "peekOfCode": "_error_handler = ErrorHandler()\ndef handle_error(message, exception=None, module=\"general\", log_level=\"error\"):\n    \"\"\"\n    Обработка ошибок с логированием (глобальная функция).\n    Args:\n        message (str): Сообщение об ошибке\n        exception (Exception, optional): Исключение, вызвавшее ошибку\n        module (str, optional): Модуль, в котором произошла ошибка\n        log_level (str, optional): Уровень логирования ('error', 'warning', 'critical')\n    Returns:",
        "detail": "core.common.error_handler",
        "documentation": {}
    },
    {
        "label": "AbstractFileSystem",
        "kind": 6,
        "importPath": "core.common.file_system",
        "description": "core.common.file_system",
        "peekOfCode": "class AbstractFileSystem:\n    \"\"\"Абстрактный класс для работы с файловой системой\"\"\"\n    def list_directory(self, path):\n        \"\"\"Получить список файлов в директории\"\"\"\n        raise NotImplementedError(\"Метод должен быть реализован в дочернем классе\")\n    def file_exists(self, path):\n        \"\"\"Проверить существование файла\"\"\"\n        raise NotImplementedError(\"Метод должен быть реализован в дочернем классе\")\n    def create_directory(self, path):\n        \"\"\"Создать директорию\"\"\"",
        "detail": "core.common.file_system",
        "documentation": {}
    },
    {
        "label": "FileManager",
        "kind": 6,
        "importPath": "core.filesystem.file_manager",
        "description": "core.filesystem.file_manager",
        "peekOfCode": "class FileManager:\n    \"\"\"\n    Класс для работы с файловой системой.\n    Предоставляет методы для создания, чтения, записи, удаления файлов и директорий.\n    \"\"\"\n    def create_file(self, path, content=\"\", encoding=\"utf-8\"):\n        \"\"\"\n        Создает файл с указанным содержимым.\n        Args:\n            path (str): Путь к файлу",
        "detail": "core.filesystem.file_manager",
        "documentation": {}
    },
    {
        "label": "InputControllerFactory",
        "kind": 6,
        "importPath": "core.input.input_factory",
        "description": "core.input.input_factory",
        "peekOfCode": "class InputControllerFactory:\n    \"\"\"\n    Фабрика для создания контроллеров ввода.\n    Предоставляет методы для создания контроллеров клавиатуры и мыши.\n    \"\"\"\n    @staticmethod\n    def get_keyboard_controller(human_like: bool = True) -> KeyboardController:\n        \"\"\"\n        Создает и возвращает контроллер клавиатуры.\n        Args:",
        "detail": "core.input.input_factory",
        "documentation": {}
    },
    {
        "label": "KeyboardController",
        "kind": 6,
        "importPath": "core.input.keyboard_controller",
        "description": "core.input.keyboard_controller",
        "peekOfCode": "class KeyboardController:\n    \"\"\"\n    Класс для эмуляции клавиатурного ввода.\n    \"\"\"\n    def __init__(self, human_like=True):\n        \"\"\"\n        Инициализация контроллера клавиатуры.\n        Args:\n            human_like (bool, optional): Эмулировать человеческий ввод с клавиатуры\n        \"\"\"",
        "detail": "core.input.keyboard_controller",
        "documentation": {}
    },
    {
        "label": "KeyboardEmulator",
        "kind": 6,
        "importPath": "core.input.keyboard_emulator",
        "description": "core.input.keyboard_emulator",
        "peekOfCode": "class KeyboardEmulator:\n    \"\"\"\n    Класс для эмуляции ввода с клавиатуры.\n    \"\"\"\n    def __init__(self, human_like=True):\n        \"\"\"\n        Инициализация эмулятора клавиатуры.\n        Args:\n            human_like (bool, optional): Эмулировать человеческое поведение\n        \"\"\"",
        "detail": "core.input.keyboard_emulator",
        "documentation": {}
    },
    {
        "label": "MouseController",
        "kind": 6,
        "importPath": "core.input.mouse_controller",
        "description": "core.input.mouse_controller",
        "peekOfCode": "class MouseController:\n    \"\"\"\n    Класс для эмуляции действий мыши.\n    \"\"\"\n    def __init__(self, human_like=True):\n        \"\"\"\n        Инициализация контроллера мыши.\n        Args:\n            human_like (bool, optional): Эмулировать человеческие движения мыши\n        \"\"\"",
        "detail": "core.input.mouse_controller",
        "documentation": {}
    },
    {
        "label": "MouseEmulator",
        "kind": 6,
        "importPath": "core.input.mouse_emulator",
        "description": "core.input.mouse_emulator",
        "peekOfCode": "class MouseEmulator:\n    \"\"\"\n    Класс для эмуляции действий мыши.\n    \"\"\"\n    def __init__(self, human_like=True):\n        \"\"\"\n        Инициализация эмулятора мыши.\n        Args:\n            human_like (bool, optional): Эмулировать человеческое поведение\n        \"\"\"",
        "detail": "core.input.mouse_emulator",
        "documentation": {}
    },
    {
        "label": "ActionPlanner",
        "kind": 6,
        "importPath": "core.llm.action_planner",
        "description": "core.llm.action_planner",
        "peekOfCode": "class ActionPlanner:\n    \"\"\"\n    Планировщик действий на основе запросов к нейросети.\n    \"\"\"\n    def __init__(self, api_connector, error_handler=None, action_executor=None):\n        \"\"\"\n        Инициализация планировщика действий.\n        Args:\n            api_connector (object): Коннектор API нейросети\n            error_handler (object, optional): Обработчик ошибок",
        "detail": "core.llm.action_planner",
        "documentation": {}
    },
    {
        "label": "LLMApiClient",
        "kind": 6,
        "importPath": "core.llm.api_client",
        "description": "core.llm.api_client",
        "peekOfCode": "class LLMApiClient:\n    \"\"\"\n    Клиент для взаимодействия с API языковой модели.\n    \"\"\"\n    def __init__(self, api_key=None, base_url=None):\n        \"\"\"\n        Инициализация клиента API.\n        Args:\n            api_key (str, optional): Ключ API для аутентификации\n            base_url (str, optional): Базовый URL API",
        "detail": "core.llm.api_client",
        "documentation": {}
    },
    {
        "label": "APIConnector",
        "kind": 6,
        "importPath": "core.llm.api_connector",
        "description": "core.llm.api_connector",
        "peekOfCode": "class APIConnector:\n    \"\"\"\n    Коннектор для взаимодействия с API нейросетей.\n    \"\"\"\n    def __init__(self, api_key: str, base_url: str, error_handler=None):\n        \"\"\"\n        Инициализация коннектора API.\n        Args:\n            api_key (str): API-ключ для аутентификации\n            base_url (str): Базовый URL API",
        "detail": "core.llm.api_connector",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "core.llm.error_handler",
        "description": "core.llm.error_handler",
        "peekOfCode": "__all__ = [\"handle_llm_error\", \"handle_error\"]",
        "detail": "core.llm.error_handler",
        "documentation": {}
    },
    {
        "label": "handle_api_error",
        "kind": 2,
        "importPath": "core.llm.error_handling",
        "description": "core.llm.error_handling",
        "peekOfCode": "def handle_api_error(exception: Exception, context: str, error_handler=None) -> Dict[str, Any]:\n    \"\"\"\n    Обработка ошибок API.\n    Args:\n        exception (Exception): Исключение\n        context (str): Контекст, в котором произошла ошибка\n        error_handler (object, optional): Обработчик ошибок\n    Returns:\n        Dict[str, Any]: Информация об ошибке\n    \"\"\"",
        "detail": "core.llm.error_handling",
        "documentation": {}
    },
    {
        "label": "handle_rate_limit",
        "kind": 2,
        "importPath": "core.llm.error_handling",
        "description": "core.llm.error_handling",
        "peekOfCode": "def handle_rate_limit(exception: Exception, context: str, error_handler=None) -> Dict[str, Any]:\n    \"\"\"\n    Обработка ошибок превышения лимита запросов.\n    Args:\n        exception (Exception): Исключение\n        context (str): Контекст, в котором произошла ошибка\n        error_handler (object, optional): Обработчик ошибок\n    Returns:\n        Dict[str, Any]: Информация об ошибке\n    \"\"\"",
        "detail": "core.llm.error_handling",
        "documentation": {}
    },
    {
        "label": "handle_timeout",
        "kind": 2,
        "importPath": "core.llm.error_handling",
        "description": "core.llm.error_handling",
        "peekOfCode": "def handle_timeout(exception: Exception, context: str, error_handler=None) -> Dict[str, Any]:\n    \"\"\"\n    Обработка ошибок таймаута.\n    Args:\n        exception (Exception): Исключение\n        context (str): Контекст, в котором произошла ошибка\n        error_handler (object, optional): Обработчик ошибок\n    Returns:\n        Dict[str, Any]: Информация об ошибке\n    \"\"\"",
        "detail": "core.llm.error_handling",
        "documentation": {}
    },
    {
        "label": "PromptProcessor",
        "kind": 6,
        "importPath": "core.llm.prompt_processor",
        "description": "core.llm.prompt_processor",
        "peekOfCode": "class PromptProcessor:\n    \"\"\"\n    Процессор для работы с промптами.\n    \"\"\"\n    def __init__(self, error_handler=None):\n        \"\"\"\n        Инициализация процессора промптов.\n        Args:\n            error_handler (object, optional): Обработчик ошибок\n        \"\"\"",
        "detail": "core.llm.prompt_processor",
        "documentation": {}
    },
    {
        "label": "ResponseParser",
        "kind": 6,
        "importPath": "core.llm.response_parser",
        "description": "core.llm.response_parser",
        "peekOfCode": "class ResponseParser:\n    \"\"\"\n    Парсер для обработки ответов нейросети.\n    \"\"\"\n    def __init__(self, error_handler=None):\n        \"\"\"\n        Инициализация парсера ответов.\n        Args:\n            error_handler (object, optional): Обработчик ошибок\n        \"\"\"",
        "detail": "core.llm.response_parser",
        "documentation": {}
    },
    {
        "label": "WindowsKeyboard",
        "kind": 6,
        "importPath": "core.platform.windows.input.keyboard",
        "description": "core.platform.windows.input.keyboard",
        "peekOfCode": "class WindowsKeyboard(AbstractKeyboard):\n    \"\"\"Реализация эмуляции клавиатуры для Windows с использованием PyAutoGUI\"\"\"\n    def __init__(self):\n        if pyautogui is None:\n            handle_error(\n                \"PyAutoGUI не установлен. Установите его: pip install pyautogui\", module=\"keyboard\"\n            )\n    def press_key(self, key):\n        \"\"\"Нажать клавишу\"\"\"\n        try:",
        "detail": "core.platform.windows.input.keyboard",
        "documentation": {}
    },
    {
        "label": "WindowsMouse",
        "kind": 6,
        "importPath": "core.platform.windows.input.mouse",
        "description": "core.platform.windows.input.mouse",
        "peekOfCode": "class WindowsMouse(AbstractMouse):\n    \"\"\"Реализация контроля мыши для Windows с использованием PyAutoGUI\"\"\"\n    def __init__(self):\n        if pyautogui is None:\n            handle_error(\n                \"PyAutoGUI не установлен. Установите его: pip install pyautogui\", module=\"mouse\"\n            )\n        # Настройка параметров\n        self.duration = 0.1  # длительность анимации мыши\n    def move_to(self, x, y):",
        "detail": "core.platform.windows.input.mouse",
        "documentation": {}
    },
    {
        "label": "WindowsFileSystem",
        "kind": 6,
        "importPath": "core.platform.windows.file_system",
        "description": "core.platform.windows.file_system",
        "peekOfCode": "class WindowsFileSystem(AbstractFileSystem):\n    \"\"\"Реализация файловой системы для Windows\"\"\"\n    def list_directory(self, path):\n        \"\"\"Получить список файлов в директории\"\"\"\n        try:\n            return os.listdir(path)\n        except Exception as e:\n            handle_error(f\"Ошибка при получении списка файлов: {e}\", e)\n            return []\n    def file_exists(self, path):",
        "detail": "core.platform.windows.file_system",
        "documentation": {}
    },
    {
        "label": "WindowsProcessManager",
        "kind": 6,
        "importPath": "core.platform.windows.process_manager",
        "description": "core.platform.windows.process_manager",
        "peekOfCode": "class WindowsProcessManager:\n    \"\"\"Управление процессами в Windows\"\"\"\n    def start_process(self, command, shell=True, cwd=None, env=None):\n        \"\"\"\n        Запускает процесс\n        Args:\n            command (str): Команда для запуска\n            shell (bool): Использовать ли оболочку\n            cwd (str, optional): Рабочая директория\n            env (dict, optional): Переменные окружения",
        "detail": "core.platform.windows.process_manager",
        "documentation": {}
    },
    {
        "label": "WindowsWindowManager",
        "kind": 6,
        "importPath": "core.platform.windows.window_manager",
        "description": "core.platform.windows.window_manager",
        "peekOfCode": "class WindowsWindowManager:\n    \"\"\"Управление окнами в Windows\"\"\"\n    def __init__(self):\n        if gw is None:\n            handle_error(\n                \"PyGetWindow не установлен. Установите его: pip install pygetwindow\",\n                module=\"window\",\n            )\n    def get_all_windows(self):\n        \"\"\"",
        "detail": "core.platform.windows.window_manager",
        "documentation": {}
    },
    {
        "label": "ElementLocalization",
        "kind": 6,
        "importPath": "core.vision.element_localization",
        "description": "core.vision.element_localization",
        "peekOfCode": "class ElementLocalization:\n    \"\"\"Класс для локализации элементов на экране\"\"\"\n    def __init__(self):\n        \"\"\"Инициализация\"\"\"\n        self.screen_capture = ScreenCapture()\n        self.element_recognition = ElementRecognition()\n    def locate_element_by_template(self, template, threshold=0.8):\n        \"\"\"\n        Локализует элемент на экране по шаблону\n        Args:",
        "detail": "core.vision.element_localization",
        "documentation": {}
    },
    {
        "label": "ElementRecognition",
        "kind": 6,
        "importPath": "core.vision.element_recognition",
        "description": "core.vision.element_recognition",
        "peekOfCode": "class ElementRecognition:\n    \"\"\"\n    Класс для распознавания элементов интерфейса.\n    \"\"\"\n    def __init__(self, screen_capture=None):\n        \"\"\"\n        Инициализация распознавателя элементов.\n        Args:\n            screen_capture (ScreenCapture, optional): Экземпляр класса для захвата экрана\n        \"\"\"",
        "detail": "core.vision.element_recognition",
        "documentation": {}
    },
    {
        "label": "ImageComparison",
        "kind": 6,
        "importPath": "core.vision.image_comparison",
        "description": "core.vision.image_comparison",
        "peekOfCode": "class ImageComparison:\n    \"\"\"Класс для сравнения изображений\"\"\"\n    def compare_images(self, img1, img2):\n        \"\"\"\n        Сравнивает два изображения и возвращает степень их сходства\n        Args:\n            img1 (numpy.ndarray): Первое изображение\n            img2 (numpy.ndarray): Второе изображение\n        Returns:\n            float: Степень сходства (0-1), где 1 - идентичные изображения",
        "detail": "core.vision.image_comparison",
        "documentation": {}
    },
    {
        "label": "ScreenCapture",
        "kind": 6,
        "importPath": "core.vision.screen_capture",
        "description": "core.vision.screen_capture",
        "peekOfCode": "class ScreenCapture:\n    \"\"\"\n    Класс для захвата и обработки скриншотов экрана.\n    \"\"\"\n    def capture_screen(self, region=None):\n        \"\"\"\n        Захватывает весь экран или указанную область\n        Args:\n            region (tuple, optional): Координаты области (x, y, width, height)\n        Returns:",
        "detail": "core.vision.screen_capture",
        "documentation": {}
    },
    {
        "label": "ScreenChanges",
        "kind": 6,
        "importPath": "core.vision.screen_changes",
        "description": "core.vision.screen_changes",
        "peekOfCode": "class ScreenChanges:\n    \"\"\"Класс для обработки изменений на экране\"\"\"\n    def __init__(self):\n        \"\"\"Инициализация\"\"\"\n        self.screen_capture = ScreenCapture()\n        self.image_comparison = ImageComparison()\n    def detect_changes(self, delay=0.5, threshold=0.95):\n        \"\"\"\n        Обнаруживает изменения на экране\n        Args:",
        "detail": "core.vision.screen_changes",
        "documentation": {}
    },
    {
        "label": "BrowserController",
        "kind": 6,
        "importPath": "core.web.browser_controller",
        "description": "core.web.browser_controller",
        "peekOfCode": "class BrowserController:\n    \"\"\"\n    Класс для управления веб-браузером.\n    \"\"\"\n    def __init__(self, browser_type=\"chrome\", headless=False):\n        \"\"\"\n        Инициализация контроллера браузера.\n        Args:\n            browser_type (str, optional): Тип браузера ('chrome', 'firefox', 'edge')\n            headless (bool, optional): Запускать браузер в фоновом режиме",
        "detail": "core.web.browser_controller",
        "documentation": {}
    },
    {
        "label": "ElementFinder",
        "kind": 6,
        "importPath": "core.web.element_finder",
        "description": "core.web.element_finder",
        "peekOfCode": "class ElementFinder:\n    \"\"\"\n    Класс для поиска элементов на веб-странице.\n    \"\"\"\n    def __init__(self, browser_controller):\n        \"\"\"\n        Инициализация искателя элементов.\n        Args:\n            browser_controller (BrowserController): Контроллер браузера\n        \"\"\"",
        "detail": "core.web.element_finder",
        "documentation": {}
    },
    {
        "label": "FileSystemManager",
        "kind": 6,
        "importPath": "core.windows.filesystem_manager",
        "description": "core.windows.filesystem_manager",
        "peekOfCode": "class FileSystemManager:\n    \"\"\"\n    Класс для работы с файловой системой Windows.\n    Предоставляет функции для операций с файлами и директориями.\n    \"\"\"\n    def list_directory(self, directory_path):\n        \"\"\"\n        Получает список файлов и директорий в указанной директории.\n        Args:\n            directory_path (str): Путь к директории",
        "detail": "core.windows.filesystem_manager",
        "documentation": {}
    },
    {
        "label": "FileSystem",
        "kind": 6,
        "importPath": "core.windows.file_system",
        "description": "core.windows.file_system",
        "peekOfCode": "class FileSystem:\n    \"\"\"\n    Класс для работы с файловой системой Windows.\n    Предоставляет функции для операций с файлами и директориями.\n    \"\"\"\n    def create_directory(self, path):\n        \"\"\"\n        Создает директорию.\n        Args:\n            path (str): Путь к создаваемой директории",
        "detail": "core.windows.file_system",
        "documentation": {}
    },
    {
        "label": "ProcessManager",
        "kind": 6,
        "importPath": "core.windows.process_manager",
        "description": "core.windows.process_manager",
        "peekOfCode": "class ProcessManager:\n    \"\"\"\n    Менеджер процессов Windows.\n    Предоставляет функции для запуска, завершения и управления процессами.\n    \"\"\"\n    def start_process(self, executable, args=None, cwd=None, wait=False, shell=False):\n        \"\"\"\n        Запускает процесс.\n        Args:\n            executable (str): Путь к исполняемому файлу",
        "detail": "core.windows.process_manager",
        "documentation": {}
    },
    {
        "label": "RegistryManager",
        "kind": 6,
        "importPath": "core.windows.registry_manager",
        "description": "core.windows.registry_manager",
        "peekOfCode": "class RegistryManager:\n    \"\"\"\n    Менеджер реестра Windows.\n    Предоставляет функции для работы с реестром Windows.\n    \"\"\"\n    # Константы для корневых ключей реестра\n    HKEY_CLASSES_ROOT = winreg.HKEY_CLASSES_ROOT\n    HKEY_CURRENT_USER = winreg.HKEY_CURRENT_USER\n    HKEY_LOCAL_MACHINE = winreg.HKEY_LOCAL_MACHINE\n    HKEY_USERS = winreg.HKEY_USERS",
        "detail": "core.windows.registry_manager",
        "documentation": {}
    },
    {
        "label": "SystemInfo",
        "kind": 6,
        "importPath": "core.windows.system_info",
        "description": "core.windows.system_info",
        "peekOfCode": "class SystemInfo:\n    \"\"\"\n    Класс для получения системной информации Windows.\n    \"\"\"\n    def __init__(self):\n        \"\"\"Инициализация класса системной информации.\"\"\"\n        try:\n            self.wmi_client = wmi.WMI()\n        except Exception as e:\n            print(f\"Error initializing WMI: {e}\")",
        "detail": "core.windows.system_info",
        "documentation": {}
    },
    {
        "label": "WindowManager",
        "kind": 6,
        "importPath": "core.windows.window_manager",
        "description": "core.windows.window_manager",
        "peekOfCode": "class WindowManager:\n    \"\"\"\n    Менеджер окон Windows.\n    Предоставляет функции для поиска, активации и управления окнами.\n    \"\"\"\n    def find_window(self, title=None, class_name=None, process_name=None):\n        \"\"\"\n        Находит окно по заголовку, имени класса или имени процесса.\n        Args:\n            title (str, optional): Заголовок окна (может быть частичным)",
        "detail": "core.windows.window_manager",
        "documentation": {}
    },
    {
        "label": "ComponentRegistry",
        "kind": 6,
        "importPath": "core.component_registry",
        "description": "core.component_registry",
        "peekOfCode": "class ComponentRegistry:\n    \"\"\"\n    Реестр компонентов системы.\n    Предоставляет централизованный доступ к компонентам по их именам.\n    \"\"\"\n    def __init__(self):\n        \"\"\"Инициализация реестра компонентов.\"\"\"\n        self._components = {}\n    def register(self, name, component):\n        \"\"\"",
        "detail": "core.component_registry",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "core.error_handler",
        "description": "core.error_handler",
        "peekOfCode": "__all__ = [\"handle_error\", \"handle_warning\", \"handle_llm_error\", \"ErrorHandler\"]",
        "detail": "core.error_handler",
        "documentation": {}
    },
    {
        "label": "PluginManager",
        "kind": 6,
        "importPath": "core.plugin_manager",
        "description": "core.plugin_manager",
        "peekOfCode": "class PluginManager:\n    \"\"\"\n    Менеджер плагинов.\n    Предоставляет функции для обнаружения, загрузки и выгрузки плагинов.\n    \"\"\"\n    def __init__(self, registry=None):\n        \"\"\"\n        Инициализация менеджера плагинов.\n        Args:\n            registry (ComponentRegistry, optional): Реестр компонентов системы",
        "detail": "core.plugin_manager",
        "documentation": {}
    },
    {
        "label": "SystemInitializer",
        "kind": 6,
        "importPath": "core.system_initializer",
        "description": "core.system_initializer",
        "peekOfCode": "class SystemInitializer:\n    \"\"\"\n    Инициализатор системы.\n    Отвечает за инициализацию и завершение работы системы.\n    \"\"\"\n    def __init__(self, registry):\n        \"\"\"\n        Инициализация инициализатора системы.\n        Args:\n            registry (ComponentRegistry): Реестр компонентов системы",
        "detail": "core.system_initializer",
        "documentation": {}
    },
    {
        "label": "CommandStep",
        "kind": 6,
        "importPath": "models.command_models",
        "description": "models.command_models",
        "peekOfCode": "class CommandStep:\n    \"\"\"Класс для представления шага выполнения команды\"\"\"\n    step_number: int\n    description: str\n    status: str  # 'pending', 'in_progress', 'completed', 'failed', 'interrupted'\n    result: Optional[str] = None\n    error: Optional[str] = None\n    completion_percentage: float = 0.0\n    accuracy_percentage: float = (\n        90.0  # По умолчанию считаем, что команда выполнена с высокой точностью",
        "detail": "models.command_models",
        "documentation": {}
    },
    {
        "label": "CommandExecution",
        "kind": 6,
        "importPath": "models.command_models",
        "description": "models.command_models",
        "peekOfCode": "class CommandExecution:\n    \"\"\"Класс для представления выполнения команды\"\"\"\n    command_text: str\n    steps: List[CommandStep]\n    start_time: str\n    end_time: Optional[str] = None\n    overall_status: str = \"in_progress\"  # 'in_progress', 'completed', 'failed', 'interrupted'\n    completion_percentage: float = 0.0\n    accuracy_percentage: float = 0.0\n    current_step: int = 0  # Индекс текущего выполняемого шага",
        "detail": "models.command_models",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def query():\n    # Проверяем, что request.json не None\n    if request.json is None:\n        return jsonify({\"error\": \"Ожидался JSON в теле запроса\"}), 400\n    user_input = request.json.get(\"input\", \"\").lower()\n    # Проверяем, является ли команда составной\n    if any(sep in user_input for sep in [\" и \", \" затем \", \" после этого \", \" потом \", \", \"]):\n        # Обрабатываем составную команду\n        execution_result = execute_command_with_steps(user_input)\n        # Формируем ответ для пользователя",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "clarify",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def clarify():\n    \"\"\"\n    Обрабатывает запросы на уточнение информации от пользователя\n    \"\"\"\n    # Проверяем, что request.json не None\n    if request.json is None:\n        return jsonify({\"error\": \"Ожидался JSON в теле запроса\"}), 400\n    user_input = request.json.get(\"input\", \"\")\n    original_command = request.json.get(\"original_command\", \"\")\n    error_context = request.json.get(\"error_context\", {})",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "confirm_action",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def confirm_action():\n    \"\"\"\n    Обрабатывает подтверждение действия от пользователя\n    \"\"\"\n    # Проверяем, что request.json не None\n    if request.json is None:\n        return jsonify({\"error\": \"Ожидался JSON в теле запроса\"}), 400\n    user_confirmation = request.json.get(\"confirmation\", False)\n    command = request.json.get(\"command\", \"\")\n    code = request.json.get(\"code\", \"\")",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "interrupt_command",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def interrupt_command():\n    \"\"\"\n    Прерывает выполнение текущей команды\n    \"\"\"\n    global command_interrupt_flag\n    # Устанавливаем флаг прерывания\n    command_interrupt_flag = True\n    logger.info(\"Получен запрос на прерывание команды\")\n    detailed_logger.info(\"Получен запрос на прерывание команды\")\n    return jsonify(",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "get_history",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def get_history():\n    \"\"\"Возвращает историю выполненных команд\"\"\"\n    try:\n        # Проверяем, существует ли файл журнала\n        if not os.path.exists(Config.SUMMARY_LOG_FILE):\n            return jsonify({\"history\": [], \"count\": 0, \"message\": \"История команд пуста\"})\n        # Пробуем различные кодировки для чтения файла\n        encodings = [\"utf-8\", \"cp1251\", \"latin-1\"]\n        summary_content = None\n        for encoding in encodings:",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "get_detailed_history",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def get_detailed_history(command_timestamp):\n    \"\"\"Возвращает подробную информацию о выполнении команды\"\"\"\n    try:\n        # Проверяем, существует ли файл журнала\n        if not os.path.exists(Config.DETAILED_LOG_FILE):\n            return jsonify(\n                {\n                    \"command_timestamp\": command_timestamp,\n                    \"details\": [],\n                    \"message\": \"Детальная история команд пуста\",",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "check_ai_models",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def check_ai_models():\n    \"\"\"Проверяет доступность нейросетей\"\"\"\n    # Получаем ID модели из запроса (если есть)\n    model_id = request.json.get(\"model_id\", None) if request.json else None\n    # Проверяем доступность\n    results = check_ai_model_availability(model_id)\n    return jsonify(results)\n@api_bp.route(\"/ai_models/select\", methods=[\"POST\"])\ndef select_ai_model_route():\n    \"\"\"Выбирает нейросеть для использования\"\"\"",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "select_ai_model_route",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def select_ai_model_route():\n    \"\"\"Выбирает нейросеть для использования\"\"\"\n    # Получаем ID модели из запроса\n    model_id = request.json.get(\"model_id\", None) if request.json else None\n    if not model_id:\n        return jsonify({\"success\": False, \"message\": \"Не указан ID нейросети\"})\n    # Выбираем нейросеть\n    result = select_ai_model(model_id)\n    return jsonify(result)\n@api_bp.route(\"/ensure_log_files_exist\", methods=[\"POST\"])",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "ensure_log_files_exist_route",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def ensure_log_files_exist_route():\n    \"\"\"Создает необходимые файлы логов, если они не существуют\"\"\"\n    try:\n        from utils.log_maintenance import ensure_log_files_exist\n        ensure_log_files_exist()\n        return jsonify({\"success\": True, \"message\": \"Проверка файлов логов выполнена\"})\n    except Exception as e:\n        logger.error(f\"Ошибка при создании файлов логов: {str(e)}\")\n        return jsonify({\"success\": False, \"error\": f\"Ошибка при создании файлов логов: {str(e)}\"})\n@api_bp.route(\"/clean_old_logs\", methods=[\"POST\"])",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "clean_old_logs_route",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def clean_old_logs_route():\n    \"\"\"Удаляет старые файлы логов\"\"\"\n    try:\n        from utils.log_maintenance import clean_old_logs\n        # Получаем максимальный возраст файлов из запроса или используем значение по умолчанию\n        max_age_days = request.json.get(\"max_age_days\", 30) if request.json else 30\n        clean_old_logs(max_age_days)\n        return jsonify({\"success\": True, \"message\": f\"Удалены логи старше {max_age_days} дней\"})\n    except Exception as e:\n        logger.error(f\"Ошибка при удалении старых логов: {str(e)}\")",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "get_ai_models_route",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def get_ai_models_route():\n    \"\"\"Возвращает список доступных нейросетей и их статус\"\"\"\n    try:\n        # Получаем данные о моделях из сервиса\n        models_data = get_ai_models()\n        return jsonify(models_data)\n    except Exception as e:\n        logger.error(f\"Ошибка при получении списка нейросетей: {str(e)}\")\n        return jsonify({\"error\": f\"Ошибка при получении списка нейросетей: {str(e)}\", \"models\": []})\n@api_bp.route(\"/export_history_logs\", methods=[\"GET\"])",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "export_history_logs",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def export_history_logs():\n    \"\"\"Экспортирует историю команд в файл\"\"\"\n    try:\n        if not os.path.exists(Config.SUMMARY_LOG_FILE):\n            return jsonify({\"error\": \"Файл истории команд не найден\"}), 404\n        # Читаем содержимое файла\n        with open(Config.SUMMARY_LOG_FILE, \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n        # Создаем ответ с файлом\n        response = make_response(content)",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "export_detailed_logs",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def export_detailed_logs():\n    \"\"\"Экспортирует детальные логи в файл\"\"\"\n    try:\n        if not os.path.exists(Config.DETAILED_LOG_FILE):\n            return jsonify({\"error\": \"Файл детальных логов не найден\"}), 404\n        # Читаем содержимое файла\n        with open(Config.DETAILED_LOG_FILE, \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n        # Создаем ответ с файлом\n        response = make_response(content)",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "get_system_logs",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def get_system_logs():\n    \"\"\"\n    Возвращает системные логи (только для разработчиков)\n    Требует аутентификации разработчика\n    \"\"\"\n    # Проверка, является ли пользователь разработчиком\n    developer_mode = request.args.get(\"developer_mode\") == \"true\"\n    developer_key = request.args.get(\"developer_key\", \"\")\n    # Простая проверка ключа разработчика (в реальном приложении нужна более надежная аутентификация)\n    if not developer_mode or developer_key != Config.DEVELOPER_KEY:",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "check_single_ai_model",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def check_single_ai_model(model_id):\n    \"\"\"Проверяет доступность конкретной нейросети\"\"\"\n    try:\n        # Проверяем доступность\n        result = check_ai_model_availability(model_id)\n        return jsonify(result)\n    except Exception as e:\n        logger.error(f\"Ошибка при проверке модели {model_id}: {str(e)}\")\n        return jsonify({\"success\": False, \"message\": f\"Ошибка при проверке модели: {str(e)}\"})\n@api_bp.route(\"/ai_models/update_from_huggingface\", methods=[\"POST\"])",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "update_models_from_huggingface_route",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def update_models_from_huggingface_route():\n    \"\"\"Обновляет список моделей, добавляя популярные модели с Hugging Face Hub\"\"\"\n    try:\n        # Вызываем функцию обновления моделей\n        result = update_models_from_huggingface()\n        return jsonify(result)\n    except Exception as e:\n        logger.error(f\"Ошибка при обновлении списка моделей: {str(e)}\")\n        return jsonify(\n            {\"success\": False, \"message\": f\"Ошибка при обновлении списка моделей: {str(e)}\"}",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "search_models_route",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def search_models_route():\n    \"\"\"Поиск моделей на Hugging Face Hub\"\"\"\n    try:\n        # Получаем параметр запроса\n        query = request.args.get(\"query\", \"\")\n        if not query:\n            return jsonify({\"success\": False, \"message\": \"Не указан поисковый запрос\"})\n        # Вызываем функцию поиска моделей\n        # Предполагается, что функция search_models определена в services/ai_service.py\n        models = search_models(query)",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "select_ai_model_by_id",
        "kind": 2,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "def select_ai_model_by_id(model_id):\n    \"\"\"Выбирает нейросеть для использования по ID\"\"\"\n    try:\n        # Выбираем нейросеть\n        result = select_ai_model(model_id)\n        return jsonify(result)\n    except Exception as e:\n        logger.error(f\"Ошибка при выборе модели {model_id}: {str(e)}\")\n        return jsonify({\"success\": False, \"message\": f\"Ошибка при выборе модели: {str(e)}\"})",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "api_bp",
        "kind": 5,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "api_bp = Blueprint(\"api\", __name__)\nlogger = logging.getLogger(\"neuro_assistant\")\ndetailed_logger = logging.getLogger(\"detailed_log\")\n@api_bp.route(\"/query\", methods=[\"POST\"])\ndef query():\n    # Проверяем, что request.json не None\n    if request.json is None:\n        return jsonify({\"error\": \"Ожидался JSON в теле запроса\"}), 400\n    user_input = request.json.get(\"input\", \"\").lower()\n    # Проверяем, является ли команда составной",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\ndetailed_logger = logging.getLogger(\"detailed_log\")\n@api_bp.route(\"/query\", methods=[\"POST\"])\ndef query():\n    # Проверяем, что request.json не None\n    if request.json is None:\n        return jsonify({\"error\": \"Ожидался JSON в теле запроса\"}), 400\n    user_input = request.json.get(\"input\", \"\").lower()\n    # Проверяем, является ли команда составной\n    if any(sep in user_input for sep in [\" и \", \" затем \", \" после этого \", \" потом \", \", \"]):",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "detailed_logger",
        "kind": 5,
        "importPath": "routes.api_routes",
        "description": "routes.api_routes",
        "peekOfCode": "detailed_logger = logging.getLogger(\"detailed_log\")\n@api_bp.route(\"/query\", methods=[\"POST\"])\ndef query():\n    # Проверяем, что request.json не None\n    if request.json is None:\n        return jsonify({\"error\": \"Ожидался JSON в теле запроса\"}), 400\n    user_input = request.json.get(\"input\", \"\").lower()\n    # Проверяем, является ли команда составной\n    if any(sep in user_input for sep in [\" и \", \" затем \", \" после этого \", \" потом \", \", \"]):\n        # Обрабатываем составную команду",
        "detail": "routes.api_routes",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "routes.main_routes",
        "description": "routes.main_routes",
        "peekOfCode": "def index():\n    # Список доступных команд с иконками и описаниями\n    commands = [\n        {\n            \"main\": \"открой\",\n            \"alternatives\": [\"запусти\", \"открыть\"],\n            \"description\": \"Открывает программу или файл\",\n            \"icon\": \"folder-open\",\n        },\n        {",
        "detail": "routes.main_routes",
        "documentation": {}
    },
    {
        "label": "main_bp",
        "kind": 5,
        "importPath": "routes.main_routes",
        "description": "routes.main_routes",
        "peekOfCode": "main_bp = Blueprint(\"main\", __name__)\n@main_bp.route(\"/\")\ndef index():\n    # Список доступных команд с иконками и описаниями\n    commands = [\n        {\n            \"main\": \"открой\",\n            \"alternatives\": [\"запусти\", \"открыть\"],\n            \"description\": \"Открывает программу или файл\",\n            \"icon\": \"folder-open\",",
        "detail": "routes.main_routes",
        "documentation": {}
    },
    {
        "label": "get_test_path",
        "kind": 2,
        "importPath": "scripts.run_affected_tests",
        "description": "scripts.run_affected_tests",
        "peekOfCode": "def get_test_path(changed_file):\n    \"\"\"Определяет путь к тестам для измененного файла.\"\"\"\n    # Убираем расширение и заменяем путь core на tests/unit\n    if changed_file.startswith(\"core/\"):\n        test_path = changed_file.replace(\"core/\", \"tests/unit/core/\")\n        test_dir = os.path.dirname(test_path)\n        return test_dir\n    return None\ndef main():\n    changed_files = sys.argv[1:]",
        "detail": "scripts.run_affected_tests",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.run_affected_tests",
        "description": "scripts.run_affected_tests",
        "peekOfCode": "def main():\n    changed_files = sys.argv[1:]\n    test_paths = set()\n    for file_path in changed_files:\n        # Обрабатываем только Python файлы\n        if file_path.endswith(\".py\") and \"core/\" in file_path:\n            test_path = get_test_path(file_path)\n            if test_path:\n                test_paths.add(test_path)\n    if test_paths:",
        "detail": "scripts.run_affected_tests",
        "documentation": {}
    },
    {
        "label": "get_ai_models",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def get_ai_models():\n    \"\"\"\n    Получает список доступных AI-моделей\n    Returns:\n        Словарь с информацией о моделях\n    \"\"\"\n    try:\n        # Проверяем существование файла с информацией о моделях\n        if not os.path.exists(MODELS_INFO_FILE):\n            # Если файла нет, создаем его с базовыми моделями",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "get_current_ai_model",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def get_current_ai_model():\n    \"\"\"\n    Получает информацию о текущей выбранной AI-модели\n    Returns:\n        Словарь с информацией о текущей модели или None\n    \"\"\"\n    try:\n        # Проверяем существование файла с информацией о моделях\n        if not os.path.exists(MODELS_INFO_FILE):\n            return None",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "check_ai_model_availability",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def check_ai_model_availability(model_id=None):\n    \"\"\"\n    Проверяет доступность нейросетей\n    Args:\n        model_id: ID конкретной модели для проверки (опционально)\n    Returns:\n        dict: Результат проверки\n    \"\"\"\n    try:\n        # Получаем список моделей",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "select_ai_model",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def select_ai_model(model_id):\n    \"\"\"\n    Выбирает AI-модель для использования\n    Args:\n        model_id: Идентификатор модели\n    Returns:\n        Словарь с результатом операции\n    \"\"\"\n    try:\n        # Получаем список моделей",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "update_model_status",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def update_model_status(model_id, status, error=None):\n    \"\"\"\n    Обновляет статус модели в файле конфигурации\n    Args:\n        model_id: Идентификатор модели\n        status: Новый статус (ready, busy, error, unavailable)\n        error: Сообщение об ошибке (если есть)\n    \"\"\"\n    try:\n        # Получаем список моделей",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "create_default_models_file",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def create_default_models_file():\n    \"\"\"\n    Создает файл с информацией о моделях по умолчанию\n    \"\"\"\n    try:\n        # Создаем директорию, если она не существует\n        os.makedirs(os.path.dirname(MODELS_INFO_FILE), exist_ok=True)\n        # Базовый список моделей\n        default_models = {\n            \"models\": [",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "generate_text",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def generate_text(prompt, max_length=1000, model_id=None):\n    \"\"\"\n    Генерирует текст с использованием выбранной модели\n    Args:\n        prompt: Запрос для генерации\n        max_length: Максимальная длина генерируемого текста\n        model_id: Идентификатор модели (если None, используется текущая)\n    Returns:\n        Сгенерированный текст\n    \"\"\"",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "generate_chat_response",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def generate_chat_response(messages, max_length=1000, model_id=None):\n    \"\"\"\n    Генерирует ответ в формате чата с использованием выбранной модели\n    Args:\n        messages: Список сообщений в формате [{\"role\": \"user\", \"content\": \"...\"}, ...]\n        max_length: Максимальная длина генерируемого текста\n        model_id: Идентификатор модели (если None, используется текущая)\n    Returns:\n        Сгенерированный ответ\n    \"\"\"",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "search_models",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def search_models(query, limit=20):\n    \"\"\"\n    Поиск моделей на Hugging Face Hub\n    Args:\n        query: Поисковый запрос\n        limit: Максимальное количество результатов\n    Returns:\n        list: Список найденных моделей\n    \"\"\"\n    try:",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "add_model",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def add_model(model_data):\n    \"\"\"\n    Добавляет новую модель в список доступных\n    Args:\n        model_data: Данные о модели (id, name, description, huggingface_id, type)\n    Returns:\n        Словарь с результатом операции\n    \"\"\"\n    try:\n        # Проверяем обязательные поля",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "remove_model",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def remove_model(model_id):\n    \"\"\"\n    Удаляет модель из списка доступных\n    Args:\n        model_id: Идентификатор модели\n    Returns:\n        Словарь с результатом операции\n    \"\"\"\n    try:\n        # Получаем список моделей",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "get_ai_response",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def get_ai_response(prompt, system_message=None):\n    \"\"\"\n    Получает ответ от AI-модели\n    Args:\n        prompt: Запрос пользователя\n        system_message: Системное сообщение (опционально)\n    Returns:\n        Ответ от AI-модели\n    \"\"\"\n    try:",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "get_available_huggingface_models",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def get_available_huggingface_models(filter_criteria=None, limit=20):\n    \"\"\"\n    Получает список доступных моделей с Hugging Face Hub\n    Args:\n        filter_criteria: Критерии фильтрации моделей (опционально)\n        limit: Максимальное количество моделей для получения\n    Returns:\n        Список моделей\n    \"\"\"\n    try:",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "update_models_from_huggingface",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def update_models_from_huggingface():\n    \"\"\"\n    Обновляет список моделей, добавляя популярные модели с Hugging Face Hub\n    Returns:\n        dict: Результат операции\n    \"\"\"\n    try:\n        # Проверяем существование файла с моделями\n        if not os.path.exists(MODELS_INFO_FILE):\n            create_default_models_file()",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "save_ai_models",
        "kind": 2,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "def save_ai_models(models_data):\n    \"\"\"\n    Сохраняет информацию о моделях в файл\n    Args:\n        models_data: Данные о моделях для сохранения\n    Returns:\n        bool: Результат операции\n    \"\"\"\n    try:\n        with open(MODELS_INFO_FILE, \"w\", encoding=\"utf-8\") as f:",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\n# Инициализируем сервис Hugging Face\nhf_service = HuggingFaceService()\n# Путь к файлу с информацией о моделях\nMODELS_INFO_FILE = os.path.join(Config.DATA_DIR, \"ai_models.json\")\ndef get_ai_models():\n    \"\"\"\n    Получает список доступных AI-моделей\n    Returns:\n        Словарь с информацией о моделях",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "hf_service",
        "kind": 5,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "hf_service = HuggingFaceService()\n# Путь к файлу с информацией о моделях\nMODELS_INFO_FILE = os.path.join(Config.DATA_DIR, \"ai_models.json\")\ndef get_ai_models():\n    \"\"\"\n    Получает список доступных AI-моделей\n    Returns:\n        Словарь с информацией о моделях\n    \"\"\"\n    try:",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "MODELS_INFO_FILE",
        "kind": 5,
        "importPath": "services.ai_service",
        "description": "services.ai_service",
        "peekOfCode": "MODELS_INFO_FILE = os.path.join(Config.DATA_DIR, \"ai_models.json\")\ndef get_ai_models():\n    \"\"\"\n    Получает список доступных AI-моделей\n    Returns:\n        Словарь с информацией о моделях\n    \"\"\"\n    try:\n        # Проверяем существование файла с информацией о моделях\n        if not os.path.exists(MODELS_INFO_FILE):",
        "detail": "services.ai_service",
        "documentation": {}
    },
    {
        "label": "use_browser_automation",
        "kind": 2,
        "importPath": "services.browser_service",
        "description": "services.browser_service",
        "peekOfCode": "def use_browser_automation(\n    url, prompt, css_selector_input, css_selector_response, browser_name=\"DeepSeek\"\n):\n    \"\"\"\n    Общая функция для автоматизации браузера\n    Args:\n        url: URL сервиса\n        prompt: Текст запроса\n        css_selector_input: CSS-селектор для поля ввода\n        css_selector_response: CSS-селектор для получения ответа",
        "detail": "services.browser_service",
        "documentation": {}
    },
    {
        "label": "fallback_browser_method",
        "kind": 2,
        "importPath": "services.browser_service",
        "description": "services.browser_service",
        "peekOfCode": "def fallback_browser_method(text):\n    \"\"\"Простой метод открытия браузера с запросом\"\"\"\n    prompt = f\"\"\"Напиши Python код для выполнения следующей команды на Windows: \"{text}\".\n    Используй доступные библиотеки: pyautogui, os, win32gui, win32con, pyttsx3.\"\"\"\n    # Копируем запрос в буфер обмена\n    pyperclip.copy(prompt)\n    # Сначала пробуем DeepSeek\n    webbrowser.open(\"https://chat.deepseek.com/\")\n    time.sleep(1)  # Даем время на открытие браузера\n    # Уведомляем пользователя",
        "detail": "services.browser_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.browser_service",
        "description": "services.browser_service",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\ndef use_browser_automation(\n    url, prompt, css_selector_input, css_selector_response, browser_name=\"DeepSeek\"\n):\n    \"\"\"\n    Общая функция для автоматизации браузера\n    Args:\n        url: URL сервиса\n        prompt: Текст запроса\n        css_selector_input: CSS-селектор для поля ввода",
        "detail": "services.browser_service",
        "documentation": {}
    },
    {
        "label": "is_command_feasible",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def is_command_feasible(command_text):\n    \"\"\"\n    Определяет, целесообразно ли выполнение команды\n    \"\"\"\n    # Список потенциально опасных или нецелесообразных команд\n    dangerous_keywords = [\n        \"удали\",\n        \"delete\",\n        \"format\",\n        \"форматир\",",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "process_command",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def process_command(text):\n    \"\"\"Анализ команды и генерация соответствующего кода\"\"\"\n    text = text.lower()\n    # Проверяем целесообразность выполнения команды\n    feasibility = is_command_feasible(text)\n    if not feasibility.get(\"feasible\", True):\n        return (\n            f\"Команда не может быть выполнена: {feasibility.get('reason', 'Неизвестная причина')}\",\n            None,\n        )",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "execute_python_code",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def execute_python_code(code):\n    \"\"\"Выполнить Python код и вернуть результат\"\"\"\n    # Не нужно объявлять command_interrupt_flag как global, если мы её только читаем\n    try:\n        # Импортируем все доступные команды\n        import os\n        import re\n        import time\n        # Создаем локальный словарь с разрешенными функциями\n        import pyautogui",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "execute_command_with_error_handling",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def execute_command_with_error_handling(command_text, code):\n    \"\"\"\n    Выполняет команду с обработкой ошибок, анализом и автоматическим восстановлением\n    \"\"\"\n    logger.info(f\"Начало выполнения команды: {command_text}\")\n    # Выполнение кода\n    execution_result = execute_python_code(code)\n    # Если есть функция проверки, используем её\n    if \"verify_command_execution\" in globals():\n        verification_result = verify_command_execution(code, command_text)",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "parse_compound_command",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def parse_compound_command(text):\n    \"\"\"\n    Разбирает составную команду на отдельные шаги\n    Возвращает список шагов и общее описание команды\n    \"\"\"\n    text = text.lower()\n    steps = []\n    # Ищем разделители составных команд\n    separators = [\" и \", \" затем \", \" после этого \", \" потом \", \", \"]\n    # Пытаемся разбить команду по разделителям",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "execute_command_with_steps",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def execute_command_with_steps(command_text, code=None):\n    \"\"\"\n    Выполняет команду по шагам, проверяя результат каждого шага\n    и информируя пользователя о ходе выполнения\n    \"\"\"\n    global command_interrupt_flag\n    # Сбрасываем флаг прерывания\n    command_interrupt_flag = False\n    # Разбираем команду на шаги\n    steps, full_command = parse_compound_command(command_text)",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "process_single_step",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def process_single_step(step_text):\n    \"\"\"\n    Обрабатывает отдельный шаг команды\n    Возвращает ответ и код для выполнения\n    \"\"\"\n    # Получаем функцию для выполнения шага\n    command_function = None\n    command_name = None\n    # Проверяем основные команды\n    for cmd_text in COMMANDS:",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "verify_step_execution",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def verify_step_execution(step_description, execution_result):\n    \"\"\"\n    Проверяет результат выполнения шага\n    Возвращает словарь с информацией о проверке\n    \"\"\"\n    # Не нужно объявлять command_interrupt_flag как global, если мы её только читаем\n    # Проверяем, было ли прерывание\n    if command_interrupt_flag or \"прервано пользователем\" in execution_result:\n        return {\"verified\": False, \"accuracy\": 0.0, \"message\": \"Выполнение прервано пользователем\"}\n    # Базовая проверка на наличие ошибок",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "update_execution_progress",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def update_execution_progress(execution):\n    \"\"\"\n    Обновляет общий прогресс выполнения команды\n    \"\"\"\n    # Вычисляем средний процент выполнения всех шагов\n    if execution.steps:\n        completion_sum = sum(step.completion_percentage for step in execution.steps)\n        execution.completion_percentage = completion_sum / len(execution.steps)\n        # Вычисляем среднюю точность выполнения для завершенных шагов\n        completed_steps = [step for step in execution.steps if step.status == \"completed\"]",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "try_fix_error",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def try_fix_error(step_description, error_message):\n    \"\"\"\n    Анализирует ошибку и пытается сгенерировать исправленный код\n    \"\"\"\n    detailed_logger.info(f\"Анализ ошибки: {error_message}\")\n    # Проверяем типичные ошибки и предлагаем исправления\n    if \"NameError: name\" in error_message and \"is not defined\" in error_message:\n        # Извлекаем имя неопределенной функции или переменной\n        match = re.search(r\"name '(.+)' is not defined\", error_message)\n        if match:",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "generate_calculator_code",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def generate_calculator_code(step_description):\n    \"\"\"\n    Генерирует код для работы с калькулятором на основе описания шага\n    \"\"\"\n    # Извлекаем математическое выражение из описания\n    expression = extract_math_expression(step_description)\n    if not expression:\n        return None\n    # Генерируем код для работы с калькулятором\n    code = f\"\"\"",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "calculate_with_calculator",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def calculate_with_calculator(expression):\n    # Открываем калькулятор\n    os.system(\"calc\")\n    time.sleep(1)  # Ждем открытия калькулятора\n    # Находим окно калькулятора и активируем его\n    calc_window = win32gui.FindWindow(None, \"Калькулятор\")\n    if calc_window == 0:  # Если не нашли по русскому названию\n        calc_window = win32gui.FindWindow(None, \"Calculator\")\n    if calc_window != 0:\n        # Активируем окно калькулятора",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "verify_command_execution",
        "kind": 2,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "def verify_command_execution(code, command_text):\n    \"\"\"\n    Проверяет результат выполнения команды\n    Args:\n        code: Выполненный код\n        command_text: Текст команды\n    Returns:\n        Словарь с информацией о проверке\n    \"\"\"\n    # Проверка для конкретных типов команд",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\ndetailed_logger = logging.getLogger(\"detailed_log\")\n# Глобальный флаг для прерывания выполнения команды\ncommand_interrupt_flag = False\ndef is_command_feasible(command_text):\n    \"\"\"\n    Определяет, целесообразно ли выполнение команды\n    \"\"\"\n    # Список потенциально опасных или нецелесообразных команд\n    dangerous_keywords = [",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "detailed_logger",
        "kind": 5,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "detailed_logger = logging.getLogger(\"detailed_log\")\n# Глобальный флаг для прерывания выполнения команды\ncommand_interrupt_flag = False\ndef is_command_feasible(command_text):\n    \"\"\"\n    Определяет, целесообразно ли выполнение команды\n    \"\"\"\n    # Список потенциально опасных или нецелесообразных команд\n    dangerous_keywords = [\n        \"удали\",",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "command_interrupt_flag",
        "kind": 5,
        "importPath": "services.command_service",
        "description": "services.command_service",
        "peekOfCode": "command_interrupt_flag = False\ndef is_command_feasible(command_text):\n    \"\"\"\n    Определяет, целесообразно ли выполнение команды\n    \"\"\"\n    # Список потенциально опасных или нецелесообразных команд\n    dangerous_keywords = [\n        \"удали\",\n        \"delete\",\n        \"format\",",
        "detail": "services.command_service",
        "documentation": {}
    },
    {
        "label": "HuggingFaceService",
        "kind": 6,
        "importPath": "services.huggingface_service",
        "description": "services.huggingface_service",
        "peekOfCode": "class HuggingFaceService:\n    def __init__(self):\n        self.api = HfApi()\n        self.token = os.environ.get(\"HUGGINGFACE_TOKEN\") or Config.HUGGINGFACE_TOKEN\n        self.models_cache = {}\n        self.tokenizers_cache = {}\n        # Установка токена для доступа к приватным моделям\n        if self.token:\n            HfFolder.save_token(self.token)\n            logger.info(\"Hugging Face токен установлен\")",
        "detail": "services.huggingface_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.huggingface_service",
        "description": "services.huggingface_service",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\nclass HuggingFaceService:\n    def __init__(self):\n        self.api = HfApi()\n        self.token = os.environ.get(\"HUGGINGFACE_TOKEN\") or Config.HUGGINGFACE_TOKEN\n        self.models_cache = {}\n        self.tokenizers_cache = {}\n        # Установка токена для доступа к приватным моделям\n        if self.token:\n            HfFolder.save_token(self.token)",
        "detail": "services.huggingface_service",
        "documentation": {}
    },
    {
        "label": "IComponentRegistry",
        "kind": 6,
        "importPath": "tests.unit.core.architecture.test_architecture",
        "description": "tests.unit.core.architecture.test_architecture",
        "peekOfCode": "class IComponentRegistry:\n    def register(self, name: str, component: Any) -> bool: ...  # noqa: E704\n    def get(self, name: str) -> Any: ...  # noqa: E704\nclass ISystemInitializer:\n    def initialize(self) -> bool: ...  # noqa: E704\nclass IErrorHandler:\n    def handle_error(  # noqa: E704\n        self, error: Exception, context: Optional[Dict[str, Any]] = None  # noqa: E704\n    ) -> bool: ...  # noqa: E704\nclass IPluginManager:",
        "detail": "tests.unit.core.architecture.test_architecture",
        "documentation": {}
    },
    {
        "label": "ISystemInitializer",
        "kind": 6,
        "importPath": "tests.unit.core.architecture.test_architecture",
        "description": "tests.unit.core.architecture.test_architecture",
        "peekOfCode": "class ISystemInitializer:\n    def initialize(self) -> bool: ...  # noqa: E704\nclass IErrorHandler:\n    def handle_error(  # noqa: E704\n        self, error: Exception, context: Optional[Dict[str, Any]] = None  # noqa: E704\n    ) -> bool: ...  # noqa: E704\nclass IPluginManager:\n    def load_plugin(self, name: str) -> Any: ...  # noqa: E704\n    def get_plugin(self, name: str) -> Any: ...  # noqa: E704\n# Пытаемся импортировать реальные классы",
        "detail": "tests.unit.core.architecture.test_architecture",
        "documentation": {}
    },
    {
        "label": "IErrorHandler",
        "kind": 6,
        "importPath": "tests.unit.core.architecture.test_architecture",
        "description": "tests.unit.core.architecture.test_architecture",
        "peekOfCode": "class IErrorHandler:\n    def handle_error(  # noqa: E704\n        self, error: Exception, context: Optional[Dict[str, Any]] = None  # noqa: E704\n    ) -> bool: ...  # noqa: E704\nclass IPluginManager:\n    def load_plugin(self, name: str) -> Any: ...  # noqa: E704\n    def get_plugin(self, name: str) -> Any: ...  # noqa: E704\n# Пытаемся импортировать реальные классы\ntry:\n    from core.common.error_handler import ErrorHandler  # type: ignore",
        "detail": "tests.unit.core.architecture.test_architecture",
        "documentation": {}
    },
    {
        "label": "IPluginManager",
        "kind": 6,
        "importPath": "tests.unit.core.architecture.test_architecture",
        "description": "tests.unit.core.architecture.test_architecture",
        "peekOfCode": "class IPluginManager:\n    def load_plugin(self, name: str) -> Any: ...  # noqa: E704\n    def get_plugin(self, name: str) -> Any: ...  # noqa: E704\n# Пытаемся импортировать реальные классы\ntry:\n    from core.common.error_handler import ErrorHandler  # type: ignore\n    from core.component_registry import ComponentRegistry  # type: ignore\n    from core.plugin_manager import PluginManager  # type: ignore\n    from core.system_initializer import SystemInitializer  # type: ignore\nexcept ImportError:",
        "detail": "tests.unit.core.architecture.test_architecture",
        "documentation": {}
    },
    {
        "label": "TestComponentRegistry",
        "kind": 6,
        "importPath": "tests.unit.core.architecture.test_architecture",
        "description": "tests.unit.core.architecture.test_architecture",
        "peekOfCode": "class TestComponentRegistry:\n    \"\"\"Тесты для регистрации и получения компонентов\"\"\"\n    def test_register_component(self):\n        \"\"\"Тест регистрации компонента\"\"\"\n        registry = ComponentRegistry()\n        mock_component = MagicMock()\n        result = registry.register(\"test_component\", mock_component)\n        assert result is True\n        assert registry.get(\"test_component\") == mock_component\n    def test_get_nonexistent_component(self):",
        "detail": "tests.unit.core.architecture.test_architecture",
        "documentation": {}
    },
    {
        "label": "TestSystemInitialization",
        "kind": 6,
        "importPath": "tests.unit.core.architecture.test_architecture",
        "description": "tests.unit.core.architecture.test_architecture",
        "peekOfCode": "class TestSystemInitialization:\n    \"\"\"Тесты инициализации системы\"\"\"\n    def test_system_initialization(self):\n        \"\"\"Тест успешной инициализации системы\"\"\"\n        registry = ComponentRegistry()\n        # Создаем обработчик ошибок\n        error_handler = ErrorHandler()\n        # Регистрируем его дважды - с разными именами\n        registry.register(\"error_handler\", error_handler)  # Для SystemInitializer\n        registry.register(\"ErrorHandler\", error_handler)  # Для PluginManager",
        "detail": "tests.unit.core.architecture.test_architecture",
        "documentation": {}
    },
    {
        "label": "TestErrorHandling",
        "kind": 6,
        "importPath": "tests.unit.core.architecture.test_architecture",
        "description": "tests.unit.core.architecture.test_architecture",
        "peekOfCode": "class TestErrorHandling:\n    \"\"\"Тесты обработки ошибок и логирования\"\"\"\n    @patch(\"logging.Logger.error\")\n    def test_error_handling(self, mock_error):\n        \"\"\"Тест обработки ошибок\"\"\"\n        handler = ErrorHandler()\n        test_error = Exception(\"Test error\")\n        result = handler.handle_error(test_error)\n        assert result is True\n        mock_error.assert_called_once()",
        "detail": "tests.unit.core.architecture.test_architecture",
        "documentation": {}
    },
    {
        "label": "TestPluginSystem",
        "kind": 6,
        "importPath": "tests.unit.core.architecture.test_architecture",
        "description": "tests.unit.core.architecture.test_architecture",
        "peekOfCode": "class TestPluginSystem:\n    \"\"\"Тесты расширяемости через плагины\"\"\"\n    def setup_method(self):\n        \"\"\"Подготовка к каждому тесту\"\"\"\n        # Создаем временную директорию для плагинов\n        self.temp_plugins_dir = tempfile.mkdtemp()\n        # Сохраняем оригинальный путь к плагинам\n        self.original_plugins_dir = None\n    def teardown_method(self):\n        \"\"\"Очистка после каждого теста\"\"\"",
        "detail": "tests.unit.core.architecture.test_architecture",
        "documentation": {}
    },
    {
        "label": "TestPlugin",
        "kind": 6,
        "importPath": "tests.unit.core.architecture.test_architecture",
        "description": "tests.unit.core.architecture.test_architecture",
        "peekOfCode": "class TestPlugin:\n    def __init__(self):\n        self.initialized = True\n    def setup(self):\n        self.setup_called = True\n        return True\n\"\"\"\n        self.create_test_plugin(\"test_plugin\", plugin_code)\n        # Создаем реестр и регистрируем обработчик ошибок\n        registry = ComponentRegistry()",
        "detail": "tests.unit.core.architecture.test_architecture",
        "documentation": {}
    },
    {
        "label": "IntegrationPlugin",
        "kind": 6,
        "importPath": "tests.unit.core.architecture.test_architecture",
        "description": "tests.unit.core.architecture.test_architecture",
        "peekOfCode": "class IntegrationPlugin:\n    def __init__(self):\n        self.registry = None\n    def setup(self):\n        pass\n    def integrate(self, registry):\n        self.registry = registry\n        return True\n\"\"\"\n        self.create_test_plugin(\"integration_plugin\", plugin_code)",
        "detail": "tests.unit.core.architecture.test_architecture",
        "documentation": {}
    },
    {
        "label": "TestFileManager",
        "kind": 6,
        "importPath": "tests.unit.core.filesystem.test_filesystem",
        "description": "tests.unit.core.filesystem.test_filesystem",
        "peekOfCode": "class TestFileManager:\n    \"\"\"Тесты менеджера файловой системы\"\"\"\n    @pytest.fixture\n    def file_manager(self):\n        \"\"\"Создает экземпляр FileManager\"\"\"\n        from core.filesystem import get_file_system\n        return get_file_system()\n    @pytest.fixture\n    def temp_dir(self):\n        \"\"\"Создает временную директорию для тестов\"\"\"",
        "detail": "tests.unit.core.filesystem.test_filesystem",
        "documentation": {}
    },
    {
        "label": "TestKeyboardController",
        "kind": 6,
        "importPath": "tests.unit.core.input.test_input",
        "description": "tests.unit.core.input.test_input",
        "peekOfCode": "class TestKeyboardController:\n    \"\"\"Тесты контроллера клавиатуры\"\"\"\n    @pytest.fixture\n    def keyboard_controller(self):\n        \"\"\"Создает экземпляр KeyboardController с мокнутым контроллером pynput\"\"\"\n        with patch(\"core.input.keyboard_controller.Controller\") as mock_controller:\n            from core.input.keyboard_controller import KeyboardController as AppKeyboardController\n            controller = AppKeyboardController(human_like=False)\n            controller.controller = mock_controller.return_value\n            yield controller",
        "detail": "tests.unit.core.input.test_input",
        "documentation": {}
    },
    {
        "label": "TestMouseController",
        "kind": 6,
        "importPath": "tests.unit.core.input.test_input",
        "description": "tests.unit.core.input.test_input",
        "peekOfCode": "class TestMouseController:\n    \"\"\"Тесты контроллера мыши\"\"\"\n    @pytest.fixture\n    def mouse_controller(self):\n        \"\"\"Создает экземпляр MouseController с мокнутыми контроллерами\"\"\"\n        with patch(\"core.input.mouse_controller.Controller\") as mock_controller, patch(\n            \"core.input.mouse_controller.pyautogui\"\n        ) as mock_pyautogui:\n            from core.input.mouse_controller import MouseController as AppMouseController\n            controller = AppMouseController(human_like=True)",
        "detail": "tests.unit.core.input.test_input",
        "documentation": {}
    },
    {
        "label": "TestInputController",
        "kind": 6,
        "importPath": "tests.unit.core.input.test_input",
        "description": "tests.unit.core.input.test_input",
        "peekOfCode": "class TestInputController:\n    \"\"\"Тесты объединенного контроллера ввода\"\"\"\n    @pytest.fixture\n    def input_controller(self):\n        \"\"\"Создает экземпляр InputController с мокнутыми контроллерами клавиатуры и мыши\"\"\"\n        from core.common.input.base import InputController\n        mock_keyboard = MagicMock()\n        mock_mouse = MagicMock()\n        controller = InputController(mock_keyboard, mock_mouse)\n        yield controller, mock_keyboard, mock_mouse",
        "detail": "tests.unit.core.input.test_input",
        "documentation": {}
    },
    {
        "label": "TestInputControllerFactory",
        "kind": 6,
        "importPath": "tests.unit.core.input.test_input",
        "description": "tests.unit.core.input.test_input",
        "peekOfCode": "class TestInputControllerFactory:\n    \"\"\"Тесты фабрики контроллеров ввода\"\"\"\n    def test_get_input_controller(self):\n        \"\"\"Тест получения контроллера ввода\"\"\"\n        # Сначала импортируем модуль\n        import core.input\n        # Затем патчим классы в самом модуле\n        with patch(\"platform.system\", return_value=\"Windows\"), patch.object(\n            core.input, \"KeyboardController\"\n        ) as mock_keyboard_class, patch.object(",
        "detail": "tests.unit.core.input.test_input",
        "documentation": {}
    },
    {
        "label": "TestIntegration",
        "kind": 6,
        "importPath": "tests.unit.core.input.test_input",
        "description": "tests.unit.core.input.test_input",
        "peekOfCode": "class TestIntegration:\n    \"\"\"Интеграционные тесты контроллеров ввода\"\"\"\n    def test_keyboard_mouse_integration(self):\n        \"\"\"Тест интеграции клавиатуры и мыши\"\"\"\n        with patch(\"core.input.keyboard_controller.Controller\") as mock_keyboard_controller, patch(\n            \"core.input.mouse_controller.Controller\"\n        ) as mock_mouse_controller, patch(\n            \"core.input.mouse_controller.pyautogui\"\n        ) as mock_pyautogui:\n            # Импортируем необходимые классы",
        "detail": "tests.unit.core.input.test_input",
        "documentation": {}
    },
    {
        "label": "TestActionPlanner",
        "kind": 6,
        "importPath": "tests.unit.core.llm.test_action_planner",
        "description": "tests.unit.core.llm.test_action_planner",
        "peekOfCode": "class TestActionPlanner:\n    \"\"\"Тесты для планировщика действий\"\"\"\n    @pytest.fixture\n    def action_planner(self):\n        \"\"\"Фикстура для создания экземпляра ActionPlanner\"\"\"\n        # Создаем мок для обработчика ошибок\n        error_handler = MagicMock()\n        # Создаем мок для API-коннектора\n        api_connector = MagicMock()\n        # Создаем планировщик действий",
        "detail": "tests.unit.core.llm.test_action_planner",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "tests.unit.core.llm.test_action_planner",
        "description": "tests.unit.core.llm.test_action_planner",
        "peekOfCode": "pytestmark = pytest.mark.skipif(not HAS_ACTION_PLANNER, reason=\"ActionPlanner not implemented yet\")\nclass TestActionPlanner:\n    \"\"\"Тесты для планировщика действий\"\"\"\n    @pytest.fixture\n    def action_planner(self):\n        \"\"\"Фикстура для создания экземпляра ActionPlanner\"\"\"\n        # Создаем мок для обработчика ошибок\n        error_handler = MagicMock()\n        # Создаем мок для API-коннектора\n        api_connector = MagicMock()",
        "detail": "tests.unit.core.llm.test_action_planner",
        "documentation": {}
    },
    {
        "label": "TestAPIConnector",
        "kind": 6,
        "importPath": "tests.unit.core.llm.test_api_connector",
        "description": "tests.unit.core.llm.test_api_connector",
        "peekOfCode": "class TestAPIConnector:\n    \"\"\"Тесты для коннектора API нейросетей\"\"\"\n    @pytest.fixture\n    def api_connector(self):\n        \"\"\"Фикстура для создания экземпляра APIConnector\"\"\"\n        # Создаем мок для обработчика ошибок\n        error_handler = MagicMock()\n        # Создаем коннектор с тестовыми настройками\n        connector = APIConnector(\n            api_key=\"test_key\", base_url=\"https://api.example.com\", error_handler=error_handler",
        "detail": "tests.unit.core.llm.test_api_connector",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "tests.unit.core.llm.test_api_connector",
        "description": "tests.unit.core.llm.test_api_connector",
        "peekOfCode": "pytestmark = pytest.mark.skipif(not HAS_API_CONNECTOR, reason=\"APIConnector not implemented yet\")\nclass TestAPIConnector:\n    \"\"\"Тесты для коннектора API нейросетей\"\"\"\n    @pytest.fixture\n    def api_connector(self):\n        \"\"\"Фикстура для создания экземпляра APIConnector\"\"\"\n        # Создаем мок для обработчика ошибок\n        error_handler = MagicMock()\n        # Создаем коннектор с тестовыми настройками\n        connector = APIConnector(",
        "detail": "tests.unit.core.llm.test_api_connector",
        "documentation": {}
    },
    {
        "label": "TestErrorHandling",
        "kind": 6,
        "importPath": "tests.unit.core.llm.test_error_handling",
        "description": "tests.unit.core.llm.test_error_handling",
        "peekOfCode": "class TestErrorHandling:\n    \"\"\"Тесты для обработки ошибок LLM API\"\"\"\n    @pytest.fixture\n    def error_handler(self):\n        \"\"\"Фикстура для создания мока обработчика ошибок\"\"\"\n        return MagicMock()\n    def test_handle_api_error(self, error_handler):\n        \"\"\"Тест обработки ошибки API\"\"\"\n        # Создаем тестовое исключение\n        response = MagicMock()",
        "detail": "tests.unit.core.llm.test_error_handling",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "tests.unit.core.llm.test_error_handling",
        "description": "tests.unit.core.llm.test_error_handling",
        "peekOfCode": "pytestmark = pytest.mark.skipif(\n    not HAS_ERROR_HANDLING, reason=\"LLM error handling not implemented yet\"\n)\nclass TestErrorHandling:\n    \"\"\"Тесты для обработки ошибок LLM API\"\"\"\n    @pytest.fixture\n    def error_handler(self):\n        \"\"\"Фикстура для создания мока обработчика ошибок\"\"\"\n        return MagicMock()\n    def test_handle_api_error(self, error_handler):",
        "detail": "tests.unit.core.llm.test_error_handling",
        "documentation": {}
    },
    {
        "label": "TestPromptProcessor",
        "kind": 6,
        "importPath": "tests.unit.core.llm.test_prompt_processor",
        "description": "tests.unit.core.llm.test_prompt_processor",
        "peekOfCode": "class TestPromptProcessor:\n    \"\"\"Тесты для процессора промптов\"\"\"\n    @pytest.fixture\n    def prompt_processor(self):\n        \"\"\"Фикстура для создания экземпляра PromptProcessor\"\"\"\n        # Создаем мок для обработчика ошибок\n        error_handler = MagicMock()\n        # Создаем процессор промптов\n        processor = PromptProcessor(error_handler=error_handler)\n        return processor",
        "detail": "tests.unit.core.llm.test_prompt_processor",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "tests.unit.core.llm.test_prompt_processor",
        "description": "tests.unit.core.llm.test_prompt_processor",
        "peekOfCode": "pytestmark = pytest.mark.skipif(\n    not HAS_PROMPT_PROCESSOR, reason=\"PromptProcessor not implemented yet\"\n)\nclass TestPromptProcessor:\n    \"\"\"Тесты для процессора промптов\"\"\"\n    @pytest.fixture\n    def prompt_processor(self):\n        \"\"\"Фикстура для создания экземпляра PromptProcessor\"\"\"\n        # Создаем мок для обработчика ошибок\n        error_handler = MagicMock()",
        "detail": "tests.unit.core.llm.test_prompt_processor",
        "documentation": {}
    },
    {
        "label": "TestResponseParser",
        "kind": 6,
        "importPath": "tests.unit.core.llm.test_response_parser",
        "description": "tests.unit.core.llm.test_response_parser",
        "peekOfCode": "class TestResponseParser:\n    \"\"\"Тесты для парсера ответов нейросети\"\"\"\n    @pytest.fixture\n    def response_parser(self):\n        \"\"\"Фикстура для создания экземпляра ResponseParser\"\"\"\n        # Создаем мок для обработчика ошибок\n        error_handler = MagicMock()\n        # Создаем парсер ответов\n        parser = ResponseParser(error_handler=error_handler)\n        return parser",
        "detail": "tests.unit.core.llm.test_response_parser",
        "documentation": {}
    },
    {
        "label": "LLMApiClient",
        "kind": 6,
        "importPath": "tests.unit.core.llm_integration.test_llm_integration",
        "description": "tests.unit.core.llm_integration.test_llm_integration",
        "peekOfCode": "class LLMApiClient:\n    def __init__(self, api_key=None, base_url=None):\n        self.api_key = api_key or \"test_api_key\"\n        self.base_url = base_url or \"https://api.example.com/v1\"\n        self.session = requests.Session()\n    def connect(self):\n        return True\n    def send_request(self, prompt, options=None):\n        # Имитация ответа от API\n        return {",
        "detail": "tests.unit.core.llm_integration.test_llm_integration",
        "documentation": {}
    },
    {
        "label": "PromptProcessor",
        "kind": 6,
        "importPath": "tests.unit.core.llm_integration.test_llm_integration",
        "description": "tests.unit.core.llm_integration.test_llm_integration",
        "peekOfCode": "class PromptProcessor:\n    def __init__(self):\n        self.templates = {}\n    def add_template(self, name, template):\n        self.templates[name] = template\n        return True\n    def process_prompt(self, template_name, variables=None):\n        if template_name not in self.templates:\n            raise ValueError(f\"Template {template_name} not found\")\n        template = self.templates[template_name]",
        "detail": "tests.unit.core.llm_integration.test_llm_integration",
        "documentation": {}
    },
    {
        "label": "ResponseParser",
        "kind": 6,
        "importPath": "tests.unit.core.llm_integration.test_llm_integration",
        "description": "tests.unit.core.llm_integration.test_llm_integration",
        "peekOfCode": "class ResponseParser:\n    def parse_response(self, response):\n        if \"choices\" in response and len(response[\"choices\"]) > 0:\n            return response[\"choices\"][0][\"text\"]\n        return None\n    def extract_json(self, text):\n        try:\n            # Ищем JSON в тексте между фигурными скобками\n            start = text.find(\"{\")\n            end = text.rfind(\"}\") + 1",
        "detail": "tests.unit.core.llm_integration.test_llm_integration",
        "documentation": {}
    },
    {
        "label": "ActionPlanner",
        "kind": 6,
        "importPath": "tests.unit.core.llm_integration.test_llm_integration",
        "description": "tests.unit.core.llm_integration.test_llm_integration",
        "peekOfCode": "class ActionPlanner:\n    def __init__(self, llm_client, prompt_processor, response_parser):\n        self.llm_client = llm_client\n        self.prompt_processor = prompt_processor\n        self.response_parser = response_parser\n    def plan_actions(self, user_request):\n        # Создаем промпт для планирования действий\n        prompt = self.prompt_processor.process_prompt(\n            \"action_planning\", {\"user_request\": user_request}\n        )",
        "detail": "tests.unit.core.llm_integration.test_llm_integration",
        "documentation": {}
    },
    {
        "label": "LLMErrorHandler",
        "kind": 6,
        "importPath": "tests.unit.core.llm_integration.test_llm_integration",
        "description": "tests.unit.core.llm_integration.test_llm_integration",
        "peekOfCode": "class LLMErrorHandler:\n    def handle_api_error(self, error):\n        error_type = type(error).__name__\n        error_message = str(error)\n        if isinstance(error, requests.exceptions.ConnectionError):\n            return {\"error\": \"connection_error\", \"message\": error_message}\n        elif isinstance(error, requests.exceptions.Timeout):\n            return {\"error\": \"timeout_error\", \"message\": error_message}\n        elif isinstance(error, requests.exceptions.RequestException):\n            return {\"error\": \"request_error\", \"message\": error_message}",
        "detail": "tests.unit.core.llm_integration.test_llm_integration",
        "documentation": {}
    },
    {
        "label": "TestLLMApiConnection",
        "kind": 6,
        "importPath": "tests.unit.core.llm_integration.test_llm_integration",
        "description": "tests.unit.core.llm_integration.test_llm_integration",
        "peekOfCode": "class TestLLMApiConnection:\n    \"\"\"Тесты подключения к LLM API\"\"\"\n    def test_successful_connection(self):\n        \"\"\"Тест успешного подключения к API\"\"\"\n        # Используем мок вместо реального объекта для ускорения теста\n        client = MagicMock()\n        client.connect.return_value = True\n        result = client.connect()\n        assert result is True\n    @patch(\"requests.Session.get\")",
        "detail": "tests.unit.core.llm_integration.test_llm_integration",
        "documentation": {}
    },
    {
        "label": "TestPromptProcessing",
        "kind": 6,
        "importPath": "tests.unit.core.llm_integration.test_llm_integration",
        "description": "tests.unit.core.llm_integration.test_llm_integration",
        "peekOfCode": "class TestPromptProcessing:\n    \"\"\"Тесты обработки промптов\"\"\"\n    def test_add_template(self):\n        \"\"\"Тест добавления шаблона промпта\"\"\"\n        processor = PromptProcessor()\n        template = \"Hello, {name}! How can I help you today?\"\n        result = processor.add_template(\"greeting\", template)\n        assert result is True\n        assert \"greeting\" in processor.templates\n        assert processor.templates[\"greeting\"] == template",
        "detail": "tests.unit.core.llm_integration.test_llm_integration",
        "documentation": {}
    },
    {
        "label": "TestResponseParsing",
        "kind": 6,
        "importPath": "tests.unit.core.llm_integration.test_llm_integration",
        "description": "tests.unit.core.llm_integration.test_llm_integration",
        "peekOfCode": "class TestResponseParsing:\n    \"\"\"Тесты парсинга ответов модели\"\"\"\n    def test_parse_simple_response(self):\n        \"\"\"Тест парсинга простого ответа\"\"\"\n        parser = ResponseParser()\n        response = {\n            \"id\": \"test-id\",\n            \"choices\": [{\"text\": \"This is a test response\", \"finish_reason\": \"stop\"}],\n        }\n        result = parser.parse_response(response)",
        "detail": "tests.unit.core.llm_integration.test_llm_integration",
        "documentation": {}
    },
    {
        "label": "TestActionPlanning",
        "kind": 6,
        "importPath": "tests.unit.core.llm_integration.test_llm_integration",
        "description": "tests.unit.core.llm_integration.test_llm_integration",
        "peekOfCode": "class TestActionPlanning:\n    \"\"\"Тесты планирования действий на основе запросов\"\"\"\n    def test_plan_actions(self):\n        \"\"\"Тест планирования действий на основе запроса пользователя\"\"\"\n        # Создаем моки для зависимостей\n        llm_client = MagicMock()\n        llm_client.send_request.return_value = {\n            \"choices\": [\n                {\n                    \"text\": \"\"\"",
        "detail": "tests.unit.core.llm_integration.test_llm_integration",
        "documentation": {}
    },
    {
        "label": "TestLLMErrorHandling",
        "kind": 6,
        "importPath": "tests.unit.core.llm_integration.test_llm_integration",
        "description": "tests.unit.core.llm_integration.test_llm_integration",
        "peekOfCode": "class TestLLMErrorHandling:\n    \"\"\"Тесты обработки ошибок API\"\"\"\n    def test_handle_connection_error(self):\n        \"\"\"Тест обработки ошибки соединения\"\"\"\n        handler = LLMErrorHandler()\n        # Создаем объект исключения вместо вызова реального исключения\n        error = requests.exceptions.ConnectionError(\"Failed to establish connection\")\n        result = handler.handle_api_error(error)\n        assert result[\"error\"] == \"connection_error\"\n        assert \"Failed to establish connection\" in result[\"message\"]",
        "detail": "tests.unit.core.llm_integration.test_llm_integration",
        "documentation": {}
    },
    {
        "label": "TestElementLocalization",
        "kind": 6,
        "importPath": "tests.unit.core.vision.test_element_localization",
        "description": "tests.unit.core.vision.test_element_localization",
        "peekOfCode": "class TestElementLocalization(unittest.TestCase):\n    \"\"\"Тесты для модуля локализации элементов на экране\"\"\"\n    def setUp(self):\n        \"\"\"Настройка перед каждым тестом\"\"\"\n        self.element_localization = ElementLocalization()\n    @patch(\"core.vision.screen_capture.ScreenCapture.capture_screen\")\n    @patch(\"core.vision.element_recognition.ElementRecognition.find_template\")\n    def test_locate_element_by_template(self, mock_find_template, mock_capture_screen):\n        \"\"\"Тест локализации элемента по шаблону\"\"\"\n        # Создаем тестовые изображения",
        "detail": "tests.unit.core.vision.test_element_localization",
        "documentation": {}
    },
    {
        "label": "TestElementRecognition",
        "kind": 6,
        "importPath": "tests.unit.core.vision.test_element_recognition",
        "description": "tests.unit.core.vision.test_element_recognition",
        "peekOfCode": "class TestElementRecognition(unittest.TestCase):\n    \"\"\"Тесты для модуля распознавания элементов интерфейса\"\"\"\n    def setUp(self):\n        \"\"\"Настройка перед каждым тестом\"\"\"\n        self.element_recognition = ElementRecognition()\n    @patch(\"cv2.matchTemplate\")\n    @patch(\"cv2.minMaxLoc\")\n    def test_find_template(self, mock_min_max_loc, mock_match_template):\n        \"\"\"Тест поиска шаблона на изображении\"\"\"\n        # Создаем тестовые изображения",
        "detail": "tests.unit.core.vision.test_element_recognition",
        "documentation": {}
    },
    {
        "label": "TestImageComparison",
        "kind": 6,
        "importPath": "tests.unit.core.vision.test_image_comparison",
        "description": "tests.unit.core.vision.test_image_comparison",
        "peekOfCode": "class TestImageComparison(unittest.TestCase):\n    \"\"\"Тесты для модуля сравнения изображений\"\"\"\n    def setUp(self):\n        \"\"\"Настройка перед каждым тестом\"\"\"\n        self.image_comparison = ImageComparison()\n    def test_compare_images_identical(self):\n        \"\"\"Тест сравнения идентичных изображений\"\"\"\n        # Создаем два идентичных изображения\n        img1 = np.zeros((100, 100, 3), dtype=np.uint8)\n        img2 = np.zeros((100, 100, 3), dtype=np.uint8)",
        "detail": "tests.unit.core.vision.test_image_comparison",
        "documentation": {}
    },
    {
        "label": "TestScreenCapture",
        "kind": 6,
        "importPath": "tests.unit.core.vision.test_screen_capture",
        "description": "tests.unit.core.vision.test_screen_capture",
        "peekOfCode": "class TestScreenCapture(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Подготовка перед каждым тестом\"\"\"\n        from core.vision.screen_capture import ScreenCapture\n        self.screen_capture = ScreenCapture()\n        # Создаем директорию для тестовых скриншотов\n        self.test_dir = \"test_screenshots\"\n        if not os.path.exists(self.test_dir):\n            os.makedirs(self.test_dir)\n    def tearDown(self):",
        "detail": "tests.unit.core.vision.test_screen_capture",
        "documentation": {}
    },
    {
        "label": "TestScreenChanges",
        "kind": 6,
        "importPath": "tests.unit.core.vision.test_screen_changes",
        "description": "tests.unit.core.vision.test_screen_changes",
        "peekOfCode": "class TestScreenChanges(unittest.TestCase):\n    \"\"\"Тесты для модуля обработки изменений на экране\"\"\"\n    def setUp(self):\n        \"\"\"Настройка перед каждым тестом\"\"\"\n        self.screen_changes = ScreenChanges()\n    @patch(\"core.vision.screen_capture.ScreenCapture.capture_screen\")\n    @patch(\"core.vision.image_comparison.ImageComparison.compare_images\")\n    def test_detect_changes(self, mock_compare_images, mock_capture_screen):\n        \"\"\"Тест обнаружения изменений на экране\"\"\"\n        # Создаем тестовые изображения",
        "detail": "tests.unit.core.vision.test_screen_changes",
        "documentation": {}
    },
    {
        "label": "TestScreenCapture",
        "kind": 6,
        "importPath": "tests.unit.core.vision.test_vision",
        "description": "tests.unit.core.vision.test_vision",
        "peekOfCode": "class TestScreenCapture:\n    \"\"\"Тесты захвата скриншотов\"\"\"\n    def setup_method(self):\n        \"\"\"Подготовка перед каждым тестом\"\"\"\n        from core.vision.screen_capture import ScreenCapture\n        self.screen_capture = ScreenCapture()\n        # Создаем директорию для тестовых скриншотов\n        self.test_dir = \"test_screenshots\"\n        if not os.path.exists(self.test_dir):\n            os.makedirs(self.test_dir)",
        "detail": "tests.unit.core.vision.test_vision",
        "documentation": {}
    },
    {
        "label": "TestElementRecognition",
        "kind": 6,
        "importPath": "tests.unit.core.vision.test_vision",
        "description": "tests.unit.core.vision.test_vision",
        "peekOfCode": "class TestElementRecognition:\n    \"\"\"Тесты распознавания элементов интерфейса\"\"\"\n    def setup_method(self):\n        \"\"\"Подготовка перед каждым тестом\"\"\"\n        from core.vision.element_recognition import ElementRecognition\n        self.element_recognition = ElementRecognition()\n        # Создаем директорию для тестовых изображений\n        self.test_dir = \"test_images\"\n        if not os.path.exists(self.test_dir):\n            os.makedirs(self.test_dir)",
        "detail": "tests.unit.core.vision.test_vision",
        "documentation": {}
    },
    {
        "label": "TestBrowserInitialization",
        "kind": 6,
        "importPath": "tests.unit.core.web.test_browser_init",
        "description": "tests.unit.core.web.test_browser_init",
        "peekOfCode": "class TestBrowserInitialization:\n    \"\"\"Тесты инициализации различных браузеров\"\"\"\n    @patch(\"core.web.browser_controller.webdriver.Chrome\")\n    @patch(\"core.web.browser_controller.ChromeService\")\n    @patch(\"core.web.browser_controller.ChromeDriverManager\")\n    def test_initialize_chrome(self, mock_chrome_driver_manager, mock_service, mock_webdriver):\n        \"\"\"Тест инициализации Chrome браузера\"\"\"\n        from core.web.browser_controller import BrowserController\n        # Настраиваем моки\n        mock_instance = MagicMock()",
        "detail": "tests.unit.core.web.test_browser_init",
        "documentation": {}
    },
    {
        "label": "element_finder",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_data_extraction",
        "description": "tests.unit.core.web.test_data_extraction",
        "peekOfCode": "def element_finder():\n    mock_driver = MagicMock()\n    mock_browser_controller = MagicMock()\n    mock_browser_controller.driver = mock_driver\n    from core.web.element_finder import ElementFinder\n    return ElementFinder(mock_browser_controller)\ndef test_extract_text_from_element(element_finder):\n    mock_element = MagicMock()\n    mock_element.text = \"Привет, мир!\"\n    text = element_finder.get_element_text(mock_element)",
        "detail": "tests.unit.core.web.test_data_extraction",
        "documentation": {}
    },
    {
        "label": "test_extract_text_from_element",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_data_extraction",
        "description": "tests.unit.core.web.test_data_extraction",
        "peekOfCode": "def test_extract_text_from_element(element_finder):\n    mock_element = MagicMock()\n    mock_element.text = \"Привет, мир!\"\n    text = element_finder.get_element_text(mock_element)\n    assert text == \"Привет, мир!\"\ndef test_extract_attribute_from_element(element_finder):\n    mock_element = MagicMock()\n    mock_element.get_attribute.return_value = \"https://example.com\"\n    value = element_finder.get_element_attribute(mock_element, \"href\")\n    mock_element.get_attribute.assert_called_once_with(\"href\")",
        "detail": "tests.unit.core.web.test_data_extraction",
        "documentation": {}
    },
    {
        "label": "test_extract_attribute_from_element",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_data_extraction",
        "description": "tests.unit.core.web.test_data_extraction",
        "peekOfCode": "def test_extract_attribute_from_element(element_finder):\n    mock_element = MagicMock()\n    mock_element.get_attribute.return_value = \"https://example.com\"\n    value = element_finder.get_element_attribute(mock_element, \"href\")\n    mock_element.get_attribute.assert_called_once_with(\"href\")\n    assert value == \"https://example.com\"\ndef test_extract_multiple_elements_text(element_finder):\n    mock_elements = [MagicMock(text=\"A\"), MagicMock(text=\"B\"), MagicMock(text=\"C\")]\n    # Допустим, у тебя есть метод для получения текста всех элементов\n    texts = [element_finder.get_element_text(e) for e in mock_elements]",
        "detail": "tests.unit.core.web.test_data_extraction",
        "documentation": {}
    },
    {
        "label": "test_extract_multiple_elements_text",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_data_extraction",
        "description": "tests.unit.core.web.test_data_extraction",
        "peekOfCode": "def test_extract_multiple_elements_text(element_finder):\n    mock_elements = [MagicMock(text=\"A\"), MagicMock(text=\"B\"), MagicMock(text=\"C\")]\n    # Допустим, у тебя есть метод для получения текста всех элементов\n    texts = [element_finder.get_element_text(e) for e in mock_elements]\n    assert texts == [\"A\", \"B\", \"C\"]\ndef test_extract_table_data(element_finder):\n    # Пример: извлечь все ячейки таблицы (упрощённо)\n    mock_row1 = MagicMock()\n    mock_row1.text = \"row1\"\n    mock_row2 = MagicMock()",
        "detail": "tests.unit.core.web.test_data_extraction",
        "documentation": {}
    },
    {
        "label": "test_extract_table_data",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_data_extraction",
        "description": "tests.unit.core.web.test_data_extraction",
        "peekOfCode": "def test_extract_table_data(element_finder):\n    # Пример: извлечь все ячейки таблицы (упрощённо)\n    mock_row1 = MagicMock()\n    mock_row1.text = \"row1\"\n    mock_row2 = MagicMock()\n    mock_row2.text = \"row2\"\n    table_elements = [mock_row1, mock_row2]\n    texts = [element_finder.get_element_text(e) for e in table_elements]\n    assert texts == [\"row1\", \"row2\"]",
        "detail": "tests.unit.core.web.test_data_extraction",
        "documentation": {}
    },
    {
        "label": "TestDOMSearch",
        "kind": 6,
        "importPath": "tests.unit.core.web.test_dom_search",
        "description": "tests.unit.core.web.test_dom_search",
        "peekOfCode": "class TestDOMSearch:\n    \"\"\"Тесты поиска элементов DOM\"\"\"\n    def setup_method(self):\n        self.mock_driver = MagicMock()\n        mock_browser_controller = MagicMock()\n        mock_browser_controller.driver = self.mock_driver\n        from core.web.element_finder import ElementFinder\n        self.element_finder = ElementFinder(mock_browser_controller)\n    def test_find_element_by_id(self):\n        \"\"\"Тест поиска элемента по ID\"\"\"",
        "detail": "tests.unit.core.web.test_dom_search",
        "documentation": {}
    },
    {
        "label": "element_finder",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def element_finder():\n    # Мокаем browser_controller с .driver\n    mock_driver = MagicMock()\n    mock_browser_controller = MagicMock()\n    mock_browser_controller.driver = mock_driver\n    from core.web.element_finder import ElementFinder\n    return ElementFinder(mock_browser_controller)\ndef test_send_keys_to_input(element_finder):\n    mock_element = MagicMock()\n    # Проверяем, что send_keys возвращает True при успешном вводе",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_send_keys_to_input",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_send_keys_to_input(element_finder):\n    mock_element = MagicMock()\n    # Проверяем, что send_keys возвращает True при успешном вводе\n    result = element_finder.send_keys(mock_element, \"тестовый текст\")\n    mock_element.clear.assert_called_once()\n    mock_element.send_keys.assert_called_once_with(\"тестовый текст\")\n    assert result is True\ndef test_send_keys_to_input_none(element_finder):\n    # Если элемент None, метод должен вернуть False\n    result = element_finder.send_keys(None, \"текст\")",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_send_keys_to_input_none",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_send_keys_to_input_none(element_finder):\n    # Если элемент None, метод должен вернуть False\n    result = element_finder.send_keys(None, \"текст\")\n    assert result is False\ndef test_click_element_success(element_finder):\n    mock_element = MagicMock()\n    result = element_finder.click_element(mock_element)\n    mock_element.click.assert_called_once()\n    assert result is True\ndef test_click_element_none(element_finder):",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_click_element_success",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_click_element_success(element_finder):\n    mock_element = MagicMock()\n    result = element_finder.click_element(mock_element)\n    mock_element.click.assert_called_once()\n    assert result is True\ndef test_click_element_none(element_finder):\n    result = element_finder.click_element(None)\n    assert result is False\ndef test_get_element_text_success(element_finder):\n    mock_element = MagicMock()",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_click_element_none",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_click_element_none(element_finder):\n    result = element_finder.click_element(None)\n    assert result is False\ndef test_get_element_text_success(element_finder):\n    mock_element = MagicMock()\n    mock_element.text = \"Текст элемента\"\n    text = element_finder.get_element_text(mock_element)\n    assert text == \"Текст элемента\"\ndef test_get_element_text_none(element_finder):\n    text = element_finder.get_element_text(None)",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_get_element_text_success",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_get_element_text_success(element_finder):\n    mock_element = MagicMock()\n    mock_element.text = \"Текст элемента\"\n    text = element_finder.get_element_text(mock_element)\n    assert text == \"Текст элемента\"\ndef test_get_element_text_none(element_finder):\n    text = element_finder.get_element_text(None)\n    assert text is None\ndef test_get_element_attribute_success(element_finder):\n    mock_element = MagicMock()",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_get_element_text_none",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_get_element_text_none(element_finder):\n    text = element_finder.get_element_text(None)\n    assert text is None\ndef test_get_element_attribute_success(element_finder):\n    mock_element = MagicMock()\n    mock_element.get_attribute.return_value = \"значение\"\n    value = element_finder.get_element_attribute(mock_element, \"data-test\")\n    mock_element.get_attribute.assert_called_once_with(\"data-test\")\n    assert value == \"значение\"\ndef test_get_element_attribute_none(element_finder):",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_get_element_attribute_success",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_get_element_attribute_success(element_finder):\n    mock_element = MagicMock()\n    mock_element.get_attribute.return_value = \"значение\"\n    value = element_finder.get_element_attribute(mock_element, \"data-test\")\n    mock_element.get_attribute.assert_called_once_with(\"data-test\")\n    assert value == \"значение\"\ndef test_get_element_attribute_none(element_finder):\n    value = element_finder.get_element_attribute(None, \"data-test\")\n    assert value is None\ndef test_find_element_by_name(element_finder):",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_get_element_attribute_none",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_get_element_attribute_none(element_finder):\n    value = element_finder.get_element_attribute(None, \"data-test\")\n    assert value is None\ndef test_find_element_by_name(element_finder):\n    # Проверяем, что find_element_by_name вызывает find_element с правильными аргументами\n    with patch.object(element_finder, \"find_element\", return_value=\"mocked\") as mock_find:\n        result = element_finder.find_element_by_name(\"username\")\n        mock_find.assert_called_once_with(\"name\", \"username\", 10)\n        assert result == \"mocked\"\ndef test_is_element_present_true(element_finder):",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_find_element_by_name",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_find_element_by_name(element_finder):\n    # Проверяем, что find_element_by_name вызывает find_element с правильными аргументами\n    with patch.object(element_finder, \"find_element\", return_value=\"mocked\") as mock_find:\n        result = element_finder.find_element_by_name(\"username\")\n        mock_find.assert_called_once_with(\"name\", \"username\", 10)\n        assert result == \"mocked\"\ndef test_is_element_present_true(element_finder):\n    # Мокаем driver.find_element чтобы не выбрасывал исключение\n    element_finder.browser.driver.find_element.return_value = MagicMock()\n    result = element_finder.is_element_present(\"id\", \"test-id\")",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_is_element_present_true",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_is_element_present_true(element_finder):\n    # Мокаем driver.find_element чтобы не выбрасывал исключение\n    element_finder.browser.driver.find_element.return_value = MagicMock()\n    result = element_finder.is_element_present(\"id\", \"test-id\")\n    assert result is True\ndef test_is_element_present_false(element_finder):\n    from selenium.common.exceptions import NoSuchElementException\n    element_finder.browser.driver.find_element.side_effect = NoSuchElementException(\"not found\")\n    result = element_finder.is_element_present(\"id\", \"test-id\")\n    assert result is False",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "test_is_element_present_false",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_form_interaction",
        "description": "tests.unit.core.web.test_form_interaction",
        "peekOfCode": "def test_is_element_present_false(element_finder):\n    from selenium.common.exceptions import NoSuchElementException\n    element_finder.browser.driver.find_element.side_effect = NoSuchElementException(\"not found\")\n    result = element_finder.is_element_present(\"id\", \"test-id\")\n    assert result is False",
        "detail": "tests.unit.core.web.test_form_interaction",
        "documentation": {}
    },
    {
        "label": "mock_driver",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_js_events",
        "description": "tests.unit.core.web.test_js_events",
        "peekOfCode": "def mock_driver():\n    return MagicMock()\n@pytest.fixture\ndef js_event_handler(mock_driver):\n    # Пример класса для работы с JS-событиями\n    class JSEventHandler:\n        def __init__(self, driver):\n            self.driver = driver\n        def trigger_event(self, element, event_name):\n            js = f\"var evt = new Event('{event_name}', {{bubbles:true}}); arguments[0].dispatchEvent(evt);\"",
        "detail": "tests.unit.core.web.test_js_events",
        "documentation": {}
    },
    {
        "label": "js_event_handler",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_js_events",
        "description": "tests.unit.core.web.test_js_events",
        "peekOfCode": "def js_event_handler(mock_driver):\n    # Пример класса для работы с JS-событиями\n    class JSEventHandler:\n        def __init__(self, driver):\n            self.driver = driver\n        def trigger_event(self, element, event_name):\n            js = f\"var evt = new Event('{event_name}', {{bubbles:true}}); arguments[0].dispatchEvent(evt);\"\n            return self.driver.execute_script(js, element)\n        def trigger_click(self, element):\n            js = \"arguments[0].click();\"",
        "detail": "tests.unit.core.web.test_js_events",
        "documentation": {}
    },
    {
        "label": "test_trigger_custom_event",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_js_events",
        "description": "tests.unit.core.web.test_js_events",
        "peekOfCode": "def test_trigger_custom_event(js_event_handler, mock_driver):\n    element = MagicMock()\n    js_event_handler.trigger_event(element, \"focus\")\n    mock_driver.execute_script.assert_called_once()\n    args, kwargs = mock_driver.execute_script.call_args\n    assert \"dispatchEvent\" in args[0]\n    assert element in args\ndef test_trigger_click(js_event_handler, mock_driver):\n    element = MagicMock()\n    js_event_handler.trigger_click(element)",
        "detail": "tests.unit.core.web.test_js_events",
        "documentation": {}
    },
    {
        "label": "test_trigger_click",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_js_events",
        "description": "tests.unit.core.web.test_js_events",
        "peekOfCode": "def test_trigger_click(js_event_handler, mock_driver):\n    element = MagicMock()\n    js_event_handler.trigger_click(element)\n    mock_driver.execute_script.assert_called_once_with(\"arguments[0].click();\", element)\ndef test_set_value_via_js(js_event_handler, mock_driver):\n    element = MagicMock()\n    js_event_handler.set_value_via_js(element, \"hello\")\n    mock_driver.execute_script.assert_called_once_with(\n        \"arguments[0].value = arguments[1];\", element, \"hello\"\n    )",
        "detail": "tests.unit.core.web.test_js_events",
        "documentation": {}
    },
    {
        "label": "test_set_value_via_js",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_js_events",
        "description": "tests.unit.core.web.test_js_events",
        "peekOfCode": "def test_set_value_via_js(js_event_handler, mock_driver):\n    element = MagicMock()\n    js_event_handler.set_value_via_js(element, \"hello\")\n    mock_driver.execute_script.assert_called_once_with(\n        \"arguments[0].value = arguments[1];\", element, \"hello\"\n    )\ndef test_get_inner_text_via_js(js_event_handler, mock_driver):\n    element = MagicMock()\n    mock_driver.execute_script.return_value = \"текст\"\n    result = js_event_handler.get_inner_text_via_js(element)",
        "detail": "tests.unit.core.web.test_js_events",
        "documentation": {}
    },
    {
        "label": "test_get_inner_text_via_js",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_js_events",
        "description": "tests.unit.core.web.test_js_events",
        "peekOfCode": "def test_get_inner_text_via_js(js_event_handler, mock_driver):\n    element = MagicMock()\n    mock_driver.execute_script.return_value = \"текст\"\n    result = js_event_handler.get_inner_text_via_js(element)\n    mock_driver.execute_script.assert_called_once_with(\"return arguments[0].innerText;\", element)\n    assert result == \"текст\"\ndef test_trigger_event_js_error(js_event_handler, mock_driver):\n    element = MagicMock()\n    mock_driver.execute_script.side_effect = Exception(\"JS error\")\n    with pytest.raises(Exception) as excinfo:",
        "detail": "tests.unit.core.web.test_js_events",
        "documentation": {}
    },
    {
        "label": "test_trigger_event_js_error",
        "kind": 2,
        "importPath": "tests.unit.core.web.test_js_events",
        "description": "tests.unit.core.web.test_js_events",
        "peekOfCode": "def test_trigger_event_js_error(js_event_handler, mock_driver):\n    element = MagicMock()\n    mock_driver.execute_script.side_effect = Exception(\"JS error\")\n    with pytest.raises(Exception) as excinfo:\n        js_event_handler.trigger_event(element, \"focus\")\n    assert \"JS error\" in str(excinfo.value)",
        "detail": "tests.unit.core.web.test_js_events",
        "documentation": {}
    },
    {
        "label": "TestNavigation",
        "kind": 6,
        "importPath": "tests.unit.core.web.test_navigation",
        "description": "tests.unit.core.web.test_navigation",
        "peekOfCode": "class TestNavigation:\n    \"\"\"Тесты навигации по веб-страницам\"\"\"\n    def setup_method(self):\n        \"\"\"Настройка перед каждым тестом\"\"\"\n        # Создаем мок-объект для драйвера\n        self.mock_driver = MagicMock()\n        # Импортируем класс BrowserController\n        from core.web.browser_controller import BrowserController\n        # Создаем экземпляр BrowserController\n        self.browser = BrowserController(browser_type=\"chrome\", headless=True)",
        "detail": "tests.unit.core.web.test_navigation",
        "documentation": {}
    },
    {
        "label": "TestBrowserController",
        "kind": 6,
        "importPath": "tests.unit.core.web.test_web",
        "description": "tests.unit.core.web.test_web",
        "peekOfCode": "class TestBrowserController:\n    \"\"\"Тесты контроллера браузера\"\"\"\n    @pytest.fixture\n    def mock_webdriver(self):\n        \"\"\"Мок для Selenium WebDriver\"\"\"\n        with patch(\"core.web.browser_controller.webdriver\") as mock_webdriver:\n            # Настраиваем мок драйвера\n            mock_driver = MagicMock()\n            mock_webdriver.Chrome.return_value = mock_driver\n            yield mock_webdriver",
        "detail": "tests.unit.core.web.test_web",
        "documentation": {}
    },
    {
        "label": "TestElementFinder",
        "kind": 6,
        "importPath": "tests.unit.core.web.test_web",
        "description": "tests.unit.core.web.test_web",
        "peekOfCode": "class TestElementFinder:\n    \"\"\"Тесты искателя элементов\"\"\"\n    @pytest.fixture\n    def mock_browser_controller(self):\n        \"\"\"Мок для BrowserController\"\"\"\n        mock_browser = MagicMock()\n        mock_browser.driver = MagicMock()\n        return mock_browser\n    @pytest.fixture\n    def element_finder(self, mock_browser_controller):",
        "detail": "tests.unit.core.web.test_web",
        "documentation": {}
    },
    {
        "label": "TestFileSystemManager",
        "kind": 6,
        "importPath": "tests.unit.core.windows.test_filesystem_manager",
        "description": "tests.unit.core.windows.test_filesystem_manager",
        "peekOfCode": "class TestFileSystemManager:\n    \"\"\"Тесты класса управления файловой системой Windows\"\"\"\n    @pytest.fixture\n    def temp_dir(self):\n        \"\"\"Создает временную директорию для тестов\"\"\"\n        temp_dir = tempfile.mkdtemp()\n        yield temp_dir\n        # Очистка после тестов\n        if os.path.exists(temp_dir):\n            shutil.rmtree(temp_dir)",
        "detail": "tests.unit.core.windows.test_filesystem_manager",
        "documentation": {}
    },
    {
        "label": "TestFileSystem",
        "kind": 6,
        "importPath": "tests.unit.core.windows.test_file_system",
        "description": "tests.unit.core.windows.test_file_system",
        "peekOfCode": "class TestFileSystem:\n    \"\"\"Тесты класса файловой системы Windows\"\"\"\n    @pytest.fixture\n    def file_system(self):\n        \"\"\"Создает экземпляр FileSystem с мок-зависимостями\"\"\"\n        return FileSystem()\n    @pytest.fixture\n    def test_dir(self, tmp_path):\n        \"\"\"Создает временную директорию для тестов\"\"\"\n        return tmp_path",
        "detail": "tests.unit.core.windows.test_file_system",
        "documentation": {}
    },
    {
        "label": "TestProcessManager",
        "kind": 6,
        "importPath": "tests.unit.core.windows.test_process_manager",
        "description": "tests.unit.core.windows.test_process_manager",
        "peekOfCode": "class TestProcessManager:\n    \"\"\"Тесты класса управления процессами Windows\"\"\"\n    @pytest.fixture\n    def process_manager(self):\n        \"\"\"Создает экземпляр ProcessManager\"\"\"\n        from core.process import get_process_manager\n        return get_process_manager()\n    @pytest.fixture\n    def mock_popen(self):\n        \"\"\"Мок для subprocess.Popen\"\"\"",
        "detail": "tests.unit.core.windows.test_process_manager",
        "documentation": {}
    },
    {
        "label": "TestRegistryManager",
        "kind": 6,
        "importPath": "tests.unit.core.windows.test_registry_manager",
        "description": "tests.unit.core.windows.test_registry_manager",
        "peekOfCode": "class TestRegistryManager(unittest.TestCase):\n    \"\"\"Тесты для менеджера реестра Windows\"\"\"\n    def setUp(self):\n        \"\"\"Настройка перед каждым тестом\"\"\"\n        self.registry_manager = RegistryManager()\n    @patch(\"winreg.OpenKey\")\n    @patch(\"winreg.QueryValueEx\")\n    @patch(\"winreg.CloseKey\")  # Добавляем патч для CloseKey\n    def test_read_value(self, mock_close_key, mock_query_value, mock_open_key):\n        \"\"\"Тест чтения значения из реестра\"\"\"",
        "detail": "tests.unit.core.windows.test_registry_manager",
        "documentation": {}
    },
    {
        "label": "TestSystemInfo",
        "kind": 6,
        "importPath": "tests.unit.core.windows.test_system_info",
        "description": "tests.unit.core.windows.test_system_info",
        "peekOfCode": "class TestSystemInfo:\n    \"\"\"Тесты класса системной информации Windows\"\"\"\n    @pytest.fixture\n    def system_info(self):\n        \"\"\"Создает экземпляр SystemInfo с мок-зависимостями\"\"\"\n        with patch(\"wmi.WMI\"):\n            from core.windows.system_info import SystemInfo\n            return SystemInfo()\n    @patch(\"platform.system\", return_value=\"Windows\")\n    @patch(\"platform.version\", return_value=\"10.0.19042\")",
        "detail": "tests.unit.core.windows.test_system_info",
        "documentation": {}
    },
    {
        "label": "TestWindowManager",
        "kind": 6,
        "importPath": "tests.unit.core.windows.test_window_manager",
        "description": "tests.unit.core.windows.test_window_manager",
        "peekOfCode": "class TestWindowManager:\n    \"\"\"Тесты менеджера окон Windows\"\"\"\n    @pytest.fixture\n    def window_manager(self):\n        \"\"\"Создает экземпляр WindowManager\"\"\"\n        return WindowManager()\n    @patch(\"win32gui.EnumWindows\")\n    def test_find_window_by_title(self, mock_enum_windows, window_manager):\n        \"\"\"Тест поиска окна по заголовку\"\"\"\n        # Создаем функцию для имитации обратного вызова EnumWindows",
        "detail": "tests.unit.core.windows.test_window_manager",
        "documentation": {}
    },
    {
        "label": "TestWindowManagement",
        "kind": 6,
        "importPath": "tests.unit.core.windows_interaction.test_windows_interaction",
        "description": "tests.unit.core.windows_interaction.test_windows_interaction",
        "peekOfCode": "class TestWindowManagement:\n    \"\"\"Тесты управления окнами Windows\"\"\"\n    @pytest.fixture(autouse=True)\n    def setup_and_teardown(self):\n        \"\"\"Запускаем и закрываем Блокнот для каждого теста\"\"\"\n        # Запускаем Блокнот\n        self.notepad_process = subprocess.Popen([\"notepad.exe\"])\n        # Даем время на запуск\n        time.sleep(2)\n        yield  # Выполняем тест",
        "detail": "tests.unit.core.windows_interaction.test_windows_interaction",
        "documentation": {}
    },
    {
        "label": "TestFileSystem",
        "kind": 6,
        "importPath": "tests.unit.core.windows_interaction.test_windows_interaction",
        "description": "tests.unit.core.windows_interaction.test_windows_interaction",
        "peekOfCode": "class TestFileSystem:\n    \"\"\"Тесты работы с файловой системой Windows\"\"\"\n    def setup_method(self):\n        \"\"\"Подготовка перед каждым тестом\"\"\"\n        self.test_dir = \"test_files\"\n        self.test_file = f\"{self.test_dir}/test.txt\"\n        # Создаем тестовую директорию, если она не существует\n        import os\n        if not os.path.exists(self.test_dir):\n            os.makedirs(self.test_dir)",
        "detail": "tests.unit.core.windows_interaction.test_windows_interaction",
        "documentation": {}
    },
    {
        "label": "TestProcessManagement",
        "kind": 6,
        "importPath": "tests.unit.core.windows_interaction.test_windows_interaction",
        "description": "tests.unit.core.windows_interaction.test_windows_interaction",
        "peekOfCode": "class TestProcessManagement:\n    \"\"\"Тесты управления процессами Windows\"\"\"\n    def teardown_method(self):\n        \"\"\"Очистка после каждого теста\"\"\"\n        # Закрываем Блокнот, если он был запущен\n        import os\n        os.system(\"taskkill /f /im notepad.exe 2>nul\")\n    def test_start_process(self):\n        \"\"\"Тест запуска процесса\"\"\"\n        from core.process import get_process_manager",
        "detail": "tests.unit.core.windows_interaction.test_windows_interaction",
        "documentation": {}
    },
    {
        "label": "TestSystemInformation",
        "kind": 6,
        "importPath": "tests.unit.core.windows_interaction.test_windows_interaction",
        "description": "tests.unit.core.windows_interaction.test_windows_interaction",
        "peekOfCode": "class TestSystemInformation:\n    \"\"\"Тесты получения системной информации Windows\"\"\"\n    def test_get_os_info(self):\n        \"\"\"Тест получения информации об ОС\"\"\"\n        from core.windows.system_info import SystemInfo\n        system_info = SystemInfo()\n        os_info = system_info.get_os_info()\n        assert os_info is not None\n        assert \"name\" in os_info\n        assert os_info[\"name\"] == \"Windows\"",
        "detail": "tests.unit.core.windows_interaction.test_windows_interaction",
        "documentation": {}
    },
    {
        "label": "TestRegistryManagement",
        "kind": 6,
        "importPath": "tests.unit.core.windows_interaction.test_windows_interaction",
        "description": "tests.unit.core.windows_interaction.test_windows_interaction",
        "peekOfCode": "class TestRegistryManagement:\n    \"\"\"Тесты работы с реестром Windows\"\"\"\n    def setup_method(self):\n        \"\"\"Подготовка перед каждым тестом\"\"\"\n        from core.windows.registry_manager import RegistryManager\n        self.registry_manager = RegistryManager()\n        # Используем временный ключ для тестов\n        self.root_key = self.registry_manager.HKEY_CURRENT_USER\n        self.test_key_path = \"Software\\\\NLATest\"\n        self.test_value_name = \"TestValue\"",
        "detail": "tests.unit.core.windows_interaction.test_windows_interaction",
        "documentation": {}
    },
    {
        "label": "TestComponentRegistry",
        "kind": 6,
        "importPath": "tests.unit.core.test_component_registry",
        "description": "tests.unit.core.test_component_registry",
        "peekOfCode": "class TestComponentRegistry:\n    \"\"\"Тесты реестра компонентов\"\"\"\n    @pytest.fixture\n    def registry(self):\n        \"\"\"Создает экземпляр ComponentRegistry\"\"\"\n        from core.component_registry import ComponentRegistry\n        return ComponentRegistry()\n    def test_register_component(self, registry):\n        \"\"\"Тест регистрации компонента\"\"\"\n        # Создаем тестовый компонент",
        "detail": "tests.unit.core.test_component_registry",
        "documentation": {}
    },
    {
        "label": "TestErrorHandler",
        "kind": 6,
        "importPath": "tests.unit.core.test_error_handler",
        "description": "tests.unit.core.test_error_handler",
        "peekOfCode": "class TestErrorHandler:\n    \"\"\"Тесты для обработчика ошибок\"\"\"\n    @pytest.fixture\n    def error_handler(self):\n        \"\"\"Фикстура для создания экземпляра ErrorHandler\"\"\"\n        handler = ErrorHandler()\n        # Заменяем логгер на мок\n        handler.logger = MagicMock()\n        return handler\n    def test_handle_error(self, error_handler):",
        "detail": "tests.unit.core.test_error_handler",
        "documentation": {}
    },
    {
        "label": "TestPluginManager",
        "kind": 6,
        "importPath": "tests.unit.core.test_plugin_manager",
        "description": "tests.unit.core.test_plugin_manager",
        "peekOfCode": "class TestPluginManager:\n    \"\"\"Тесты для менеджера плагинов\"\"\"\n    @pytest.fixture\n    def plugin_manager(self):\n        \"\"\"Фикстура для создания экземпляра PluginManager\"\"\"\n        # Создаем мок для реестра компонентов\n        registry = MagicMock()\n        # Создаем мок для обработчика ошибок\n        error_handler = MagicMock()\n        # Настраиваем реестр для возврата обработчика ошибок",
        "detail": "tests.unit.core.test_plugin_manager",
        "documentation": {}
    },
    {
        "label": "TestSystemInitializer",
        "kind": 6,
        "importPath": "tests.unit.core.test_system_initializer",
        "description": "tests.unit.core.test_system_initializer",
        "peekOfCode": "class TestSystemInitializer:\n    \"\"\"Тесты инициализатора системы\"\"\"\n    @pytest.fixture\n    def registry(self):\n        \"\"\"Создает мок реестра компонентов\"\"\"\n        registry = MagicMock()\n        registry.get.return_value = MagicMock()\n        registry.has.return_value = True\n        return registry\n    @pytest.fixture",
        "detail": "tests.unit.core.test_system_initializer",
        "documentation": {}
    },
    {
        "label": "TestAccessibility",
        "kind": 6,
        "importPath": "tests.unit.ui.test_accessibility",
        "description": "tests.unit.ui.test_accessibility",
        "peekOfCode": "class TestAccessibility:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_keyboard_navigation(self, ui_client):\n        \"\"\"Тест навигации по интерфейсу с помощью клавиатуры\"\"\"\n        # Открываем главную страницу с полным URL",
        "detail": "tests.unit.ui.test_accessibility",
        "documentation": {}
    },
    {
        "label": "TestAIModels",
        "kind": 6,
        "importPath": "tests.unit.ui.test_ai_models",
        "description": "tests.unit.ui.test_ai_models",
        "peekOfCode": "class TestAIModels:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_ai_models_container_elements(self, driver):\n        \"\"\"Тест наличия всех элементов контейнера моделей ИИ\"\"\"\n        driver.get(\"http://localhost:5000\")",
        "detail": "tests.unit.ui.test_ai_models",
        "documentation": {}
    },
    {
        "label": "TestAnimations",
        "kind": 6,
        "importPath": "tests.unit.ui.test_animations",
        "description": "tests.unit.ui.test_animations",
        "peekOfCode": "class TestAnimations:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_modal_animations(self, driver):\n        \"\"\"Тест анимаций модальных окон\"\"\"\n        driver.get(\"http://localhost:5000\")",
        "detail": "tests.unit.ui.test_animations",
        "documentation": {}
    },
    {
        "label": "TestAPIIntegration",
        "kind": 6,
        "importPath": "tests.unit.ui.test_api_integration",
        "description": "tests.unit.ui.test_api_integration",
        "peekOfCode": "class TestAPIIntegration:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_command_submission_api_call(self, driver):\n        \"\"\"Тест отправки команды через API\"\"\"\n        driver.get(\"http://localhost:5000\")",
        "detail": "tests.unit.ui.test_api_integration",
        "documentation": {}
    },
    {
        "label": "TestBaseLayout",
        "kind": 6,
        "importPath": "tests.unit.ui.test_base_layout",
        "description": "tests.unit.ui.test_base_layout",
        "peekOfCode": "class TestBaseLayout:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        # Инициализация драйвера\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_header_elements(self, driver):\n        \"\"\"Тест наличия и корректности элементов заголовка\"\"\"",
        "detail": "tests.unit.ui.test_base_layout",
        "documentation": {}
    },
    {
        "label": "TestCommandForm",
        "kind": 6,
        "importPath": "tests.unit.ui.test_command_form",
        "description": "tests.unit.ui.test_command_form",
        "peekOfCode": "class TestCommandForm:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_command_form_elements(self, driver):\n        \"\"\"Тест наличия всех элементов формы команд\"\"\"\n        driver.get(\"http://localhost:5000\")",
        "detail": "tests.unit.ui.test_command_form",
        "documentation": {}
    },
    {
        "label": "TestCommandHistory",
        "kind": 6,
        "importPath": "tests.unit.ui.test_command_history",
        "description": "tests.unit.ui.test_command_history",
        "peekOfCode": "class TestCommandHistory:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_history_container_elements(self, driver):\n        \"\"\"Тест наличия всех элементов контейнера истории команд\"\"\"\n        driver.get(\"http://localhost:5000\")",
        "detail": "tests.unit.ui.test_command_history",
        "documentation": {}
    },
    {
        "label": "TestErrorHandling",
        "kind": 6,
        "importPath": "tests.unit.ui.test_error_handling",
        "description": "tests.unit.ui.test_error_handling",
        "peekOfCode": "class TestErrorHandling:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_empty_command_handling(self, driver):\n        \"\"\"Тест обработки пустой команды\"\"\"\n        driver.get(\"http://localhost:5000\")",
        "detail": "tests.unit.ui.test_error_handling",
        "documentation": {}
    },
    {
        "label": "TestLogsDisplay",
        "kind": 6,
        "importPath": "tests.unit.ui.test_logs_display",
        "description": "tests.unit.ui.test_logs_display",
        "peekOfCode": "class TestLogsDisplay:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_logs_page_structure(self, driver):\n        \"\"\"Тест структуры страницы логов\"\"\"\n        # Переходим на страницу логов",
        "detail": "tests.unit.ui.test_logs_display",
        "documentation": {}
    },
    {
        "label": "TestMobileUI",
        "kind": 6,
        "importPath": "tests.unit.ui.test_mobile_ui",
        "description": "tests.unit.ui.test_mobile_ui",
        "peekOfCode": "class TestMobileUI:\n    @pytest.fixture(scope=\"function\")\n    def mobile_driver(self):\n        # Настройка мобильной эмуляции\n        mobile_emulation = {\"deviceName\": \"iPhone X\"}\n        chrome_options = webdriver.ChromeOptions()\n        chrome_options.add_experimental_option(\"mobileEmulation\", mobile_emulation)\n        driver = webdriver.Chrome(options=chrome_options)\n        yield driver\n        driver.quit()",
        "detail": "tests.unit.ui.test_mobile_ui",
        "documentation": {}
    },
    {
        "label": "TestModals",
        "kind": 6,
        "importPath": "tests.unit.ui.test_modals",
        "description": "tests.unit.ui.test_modals",
        "peekOfCode": "class TestModals:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_confirm_modal_structure(self, driver):\n        \"\"\"Тест структуры модального окна подтверждения\"\"\"\n        driver.get(\"http://localhost:5000\")",
        "detail": "tests.unit.ui.test_modals",
        "documentation": {}
    },
    {
        "label": "TestPerformance",
        "kind": 6,
        "importPath": "tests.unit.ui.test_performance",
        "description": "tests.unit.ui.test_performance",
        "peekOfCode": "class TestPerformance:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_page_load_time(self, driver):\n        \"\"\"Тест времени загрузки страницы\"\"\"\n        # Измеряем время загрузки страницы",
        "detail": "tests.unit.ui.test_performance",
        "documentation": {}
    },
    {
        "label": "TestResponsiveDesign",
        "kind": 6,
        "importPath": "tests.unit.ui.test_responsive",
        "description": "tests.unit.ui.test_responsive",
        "peekOfCode": "class TestResponsiveDesign:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        # Начинаем с большого размера окна\n        driver.set_window_size(1200, 800)\n        yield driver\n        driver.quit()\n    def test_desktop_layout(self, driver):\n        \"\"\"Тест макета для настольных компьютеров\"\"\"",
        "detail": "tests.unit.ui.test_responsive",
        "documentation": {}
    },
    {
        "label": "TestSettings",
        "kind": 6,
        "importPath": "tests.unit.ui.test_settings",
        "description": "tests.unit.ui.test_settings",
        "peekOfCode": "class TestSettings:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_ai_models_settings(self, driver):\n        \"\"\"Тест настроек нейросетей\"\"\"\n        driver.get(\"http://localhost:5000/ai_models\")",
        "detail": "tests.unit.ui.test_settings",
        "documentation": {}
    },
    {
        "label": "TestThemeSystem",
        "kind": 6,
        "importPath": "tests.unit.ui.test_theme_system",
        "description": "tests.unit.ui.test_theme_system",
        "peekOfCode": "class TestThemeSystem:\n    @pytest.fixture(scope=\"function\")\n    def driver(self):\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        yield driver\n        driver.quit()\n    def test_theme_toggle_presence(self, driver):\n        \"\"\"Тест наличия переключателя темы\"\"\"\n        driver.get(\"http://localhost:5000\")",
        "detail": "tests.unit.ui.test_theme_system",
        "documentation": {}
    },
    {
        "label": "UiTestDriver",
        "kind": 6,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "class UiTestDriver:\n    \"\"\"Обертка над WebDriver с дополнительной функциональностью для тестов UI.\"\"\"\n    def __init__(self, driver: webdriver.Chrome, base_url: str):\n        self.driver = driver\n        self.base_url = base_url\n    def get_url(self, path: str) -> None:\n        \"\"\"Открывает относительный путь, используя базовый URL.\"\"\"\n        url = f\"{self.base_url}{path}\"\n        self.driver.get(url)\n    def __getattr__(self, name: str) -> Any:",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_component",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def mock_component():\n    \"\"\"Фикстура для создания мок-компонента\"\"\"\n    return MagicMock()\n@pytest.fixture\ndef empty_registry():\n    \"\"\"Фикстура для создания пустого реестра компонентов\"\"\"\n    try:\n        from core.component_registry import ComponentRegistry\n        return ComponentRegistry()\n    except ImportError:",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "empty_registry",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def empty_registry():\n    \"\"\"Фикстура для создания пустого реестра компонентов\"\"\"\n    try:\n        from core.component_registry import ComponentRegistry\n        return ComponentRegistry()\n    except ImportError:\n        # Заглушка, если модуль еще не реализован\n        class MockComponentRegistry:\n            def __init__(self):\n                self.components = {}",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "ui_client",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def ui_client():\n    \"\"\"Фикстура для тестирования UI с Selenium WebDriver\"\"\"\n    # Создаем опции Chrome\n    chrome_options = Options()\n    chrome_options.add_argument(\"--headless\")\n    chrome_options.add_argument(\"--no-sandbox\")\n    chrome_options.add_argument(\"--disable-dev-shm-usage\")\n    # Инициализируем драйвер Chrome\n    service = ChromeService()\n    driver = webdriver.Chrome(service=service, options=chrome_options)",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def base_url():\n    \"\"\"Фикстура, возвращающая базовый URL для тестов.\"\"\"\n    return TEST_CONFIG[\"base_url\"]",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "TEST_CONFIG",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "TEST_CONFIG = {\"base_url\": \"http://localhost:5000\"}\n@pytest.fixture\ndef mock_component():\n    \"\"\"Фикстура для создания мок-компонента\"\"\"\n    return MagicMock()\n@pytest.fixture\ndef empty_registry():\n    \"\"\"Фикстура для создания пустого реестра компонентов\"\"\"\n    try:\n        from core.component_registry import ComponentRegistry",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "extract_code_from_response",
        "kind": 2,
        "importPath": "utils.helpers",
        "description": "utils.helpers",
        "peekOfCode": "def extract_code_from_response(response):\n    \"\"\"Извлекает код Python из ответа нейросети\"\"\"\n    if not response:\n        return None\n    # Ищем код между тройными обратными кавычками\n    code_start = response.find(\"\")\n    if code_start != -1:\n        code_start += 9  # длина \"python\"\n        code_end = response.find(\"\", code_start)\n        if code_end != -1:",
        "detail": "utils.helpers",
        "documentation": {}
    },
    {
        "label": "extract_math_expression",
        "kind": 2,
        "importPath": "utils.helpers",
        "description": "utils.helpers",
        "peekOfCode": "def extract_math_expression(text):\n    \"\"\"Извлекает математическое выражение из текста\"\"\"\n    # Ищем числа и математические операторы\n    pattern = r\"(\\d+\\s*[\\+\\-\\*\\/]\\s*\\d+)\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0].replace(\" \", \"\")\n    return None\ndef add_interrupt_checks(code):\n    \"\"\"",
        "detail": "utils.helpers",
        "documentation": {}
    },
    {
        "label": "add_interrupt_checks",
        "kind": 2,
        "importPath": "utils.helpers",
        "description": "utils.helpers",
        "peekOfCode": "def add_interrupt_checks(code):\n    \"\"\"\n    Добавляет проверки прерывания в код\n    Вставляет проверки check_interrupt() после каждого вызова time.sleep()\n    и в начало каждого цикла for/while\n    \"\"\"\n    if not code:\n        return code\n    # Добавляем проверку после каждого time.sleep()\n    code = re.sub(",
        "detail": "utils.helpers",
        "documentation": {}
    },
    {
        "label": "check_interrupt_during_operation",
        "kind": 2,
        "importPath": "utils.helpers",
        "description": "utils.helpers",
        "peekOfCode": "def check_interrupt_during_operation(operation_name, interval=0.5, max_time=30):\n    \"\"\"\n    Выполняет проверку прерывания во время длительных операций\n    Args:\n        operation_name: Название операции для логирования\n        interval: Интервал проверки в секундах\n        max_time: Максимальное время выполнения в секундах\n    Returns:\n        True, если операция должна быть прервана, False в противном случае\n    \"\"\"",
        "detail": "utils.helpers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.helpers",
        "description": "utils.helpers",
        "peekOfCode": "logger = logging.getLogger(\"neuro_assistant\")\ndef extract_code_from_response(response):\n    \"\"\"Извлекает код Python из ответа нейросети\"\"\"\n    if not response:\n        return None\n    # Ищем код между тройными обратными кавычками\n    code_start = response.find(\"\")\n    if code_start != -1:\n        code_start += 9  # длина \"python\"\n        code_end = response.find(\"\", code_start)",
        "detail": "utils.helpers",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "peekOfCode": "def setup_logging(app):\n    \"\"\"Настройка системы логирования\"\"\"\n    # Создаем директорию для логов, если она не существует\n    os.makedirs(Config.LOGS_DIR, exist_ok=True)\n    # Форматтер для логов\n    formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    # Настройка логгера для истории команд (для пользователя)\n    history_handler = RotatingFileHandler(\n        Config.SUMMARY_LOG_FILE,\n        maxBytes=Config.MAX_LOG_SIZE,",
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "ensure_log_files_exist",
        "kind": 2,
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "peekOfCode": "def ensure_log_files_exist():\n    \"\"\"Проверяет существование файлов журнала и создает их при необходимости\"\"\"\n    os.makedirs(Config.LOGS_DIR, exist_ok=True)\n    log_files = [Config.DETAILED_LOG_FILE, Config.SUMMARY_LOG_FILE, Config.SYSTEM_LOG_FILE]\n    for file in log_files:\n        if not os.path.exists(file):\n            # Добавляем encoding='utf-8'\n            with open(file, \"w\", encoding=\"utf-8\") as f:\n                f.write(f\"# Журнал команд создан {datetime.now().isoformat()}\\n\")\n# Получаем логгеры",
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "filter_sensitive_data",
        "kind": 2,
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "peekOfCode": "def filter_sensitive_data(text):\n    \"\"\"\n    Фильтрует конфиденциальные данные из текста\n    Args:\n        text: Исходный текст\n    Returns:\n        Текст с замаскированными конфиденциальными данными\n    \"\"\"\n    import re\n    # Список паттернов для фильтрации",
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "log_execution_summary",
        "kind": 2,
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "peekOfCode": "def log_execution_summary(execution, final=False):\n    \"\"\"\n    Логирует информацию о выполнении команды\n    Args:\n        execution: Объект CommandExecution с информацией о выполнении\n        final: Флаг, указывающий, является ли это финальным логированием команды\n    \"\"\"\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    # Фильтруем конфиденциальные данные\n    filtered_command = filter_sensitive_data(execution.command_text)",
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "init_logging_system",
        "kind": 2,
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "peekOfCode": "def init_logging_system():\n    \"\"\"\n    Инициализирует систему логирования при запуске приложения\n    \"\"\"\n    from utils.log_maintenance import clean_old_logs, ensure_log_files_exist\n    # Создаем необходимые файлы логов\n    ensure_log_files_exist()\n    # Очищаем старые логи (старше 30 дней)\n    clean_old_logs(30)\n    # Логируем информацию о запуске",
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "history_logger",
        "kind": 5,
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "peekOfCode": "history_logger = logging.getLogger(\"command_history\")\ndetailed_logger = logging.getLogger(\"detailed_log\")\nsystem_logger = logging.getLogger(\"neuro_assistant\")\ndef filter_sensitive_data(text):\n    \"\"\"\n    Фильтрует конфиденциальные данные из текста\n    Args:\n        text: Исходный текст\n    Returns:\n        Текст с замаскированными конфиденциальными данными",
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "detailed_logger",
        "kind": 5,
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "peekOfCode": "detailed_logger = logging.getLogger(\"detailed_log\")\nsystem_logger = logging.getLogger(\"neuro_assistant\")\ndef filter_sensitive_data(text):\n    \"\"\"\n    Фильтрует конфиденциальные данные из текста\n    Args:\n        text: Исходный текст\n    Returns:\n        Текст с замаскированными конфиденциальными данными\n    \"\"\"",
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "system_logger",
        "kind": 5,
        "importPath": "utils.logging_utils",
        "description": "utils.logging_utils",
        "peekOfCode": "system_logger = logging.getLogger(\"neuro_assistant\")\ndef filter_sensitive_data(text):\n    \"\"\"\n    Фильтрует конфиденциальные данные из текста\n    Args:\n        text: Исходный текст\n    Returns:\n        Текст с замаскированными конфиденциальными данными\n    \"\"\"\n    import re",
        "detail": "utils.logging_utils",
        "documentation": {}
    },
    {
        "label": "ensure_log_files_exist",
        "kind": 2,
        "importPath": "utils.log_maintenance",
        "description": "utils.log_maintenance",
        "peekOfCode": "def ensure_log_files_exist():\n    \"\"\"\n    Проверяет существование необходимых файлов логов и создает их при необходимости\n    \"\"\"\n    logger = logging.getLogger(\"neuro_assistant\")\n    # Создаем директорию для логов, если она не существует\n    if not os.path.exists(Config.LOGS_DIR):\n        os.makedirs(Config.LOGS_DIR)\n        logger.info(f\"Создана директория для логов: {Config.LOGS_DIR}\")\n    # Список файлов логов, которые должны существовать",
        "detail": "utils.log_maintenance",
        "documentation": {}
    },
    {
        "label": "clean_old_logs",
        "kind": 2,
        "importPath": "utils.log_maintenance",
        "description": "utils.log_maintenance",
        "peekOfCode": "def clean_old_logs(max_age_days=30):\n    \"\"\"\n    Удаляет старые файлы логов\n    Args:\n        max_age_days: Максимальный возраст файлов в днях\n    \"\"\"\n    from datetime import datetime, timedelta\n    logger = logging.getLogger(\"neuro_assistant\")\n    # Вычисляем пороговую дату\n    threshold_date = datetime.now() - timedelta(days=max_age_days)",
        "detail": "utils.log_maintenance",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "TestBasicConnections",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):\n        \"Check that a standard connection works\"\n        self.assert_(wmi.WMI())\n    def test_remote_connection(self):\n        \"Check that a remote connection works, if specified\"\n        if \"machine\" in settings:\n            self.assert_(wmi.WMI(settings['machine']))\n        else:\n            warnings.warn(\"Skipping test_remote_connection\")",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestThreadedConnection",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestThreadedConnection(unittest.TestCase):\n    def test_initialised_thread(self):\n        \"\"\"A WMI connection in a thread which has been initialised for COM\n        should succeed.\n        \"\"\"\n        def f(q):\n            pythoncom.CoInitialize()\n            try:\n                try:\n                    wmi.WMI()",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestMoniker",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestMoniker(unittest.TestCase):\n    def test_moniker(self):\n        \"\"\"Look at all possible options for moniker construction and pass\n        them through to a WMI connector\n        \"\"\"\n        for computer in COMPUTERS:\n            if computer in (None, \".\"):\n                local_authorities = [None]\n            else:\n                local_authorities = AUTHORITIES",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestFunctions",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestFunctions(unittest.TestCase):\n    times = [\n       ((2000, 1, 1), \"20000101******.******+***\"),\n       ((2000, 1, 1, 10, 0, 0), \"20000101100000.******+***\"),\n       ((2000, 1, 1, 10, 0, 0, 100), \"20000101100000.000100+***\"),\n       ((2000, 1, 1, 10, 0, 0, 100, \"GMT\"), \"20000101100000.000100+GMT\")\n    ]\n    def test_signed_to_unsigned(self):\n        tests = [\n           (0, 0),",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestWMI",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestWMI(unittest.TestCase):\n    def setUp(self):\n        self.connection = wmi.WMI(namespace=\"root/cimv2\", find_classes=False)\n        self.logical_disks = set(self.connection.Win32_LogicalDisk())\nclass TestNamespace(TestWMI):\n    def test_subclasses_of_simple(self):\n        self.assert_(\"Win32_ComputerSystem\" in self.connection.subclasses_of())\n    def test_subclasses_of_subtree(self):\n        self.assert_(\"Win32_Desktop\" in self.connection.subclasses_of(\"CIM_Setting\"))\n    def test_subclasses_of_pattern(self):",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestNamespace",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestNamespace(TestWMI):\n    def test_subclasses_of_simple(self):\n        self.assert_(\"Win32_ComputerSystem\" in self.connection.subclasses_of())\n    def test_subclasses_of_subtree(self):\n        self.assert_(\"Win32_Desktop\" in self.connection.subclasses_of(\"CIM_Setting\"))\n    def test_subclasses_of_pattern(self):\n        self.assert_(set([\"Win32_LogicalDisk\", \"Win32_MappedLogicalDisk\"]) <= set(self.connection.subclasses_of(\"CIM_LogicalDevice\", \"Win32_.*Disk\")))\n    def test_instances(self):\n        self.assertEquals(self.logical_disks, set(self.connection.instances(\"Win32_LogicalDisk\")))\n    def test_new(self):",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestClass",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestClass(TestWMI):\n    def test_class_from_namespace(self):\n        self.assert_(self.connection.Win32_ComputerSystem._namespace is self.connection)\n    def test_class_without_namespace(self):\n        wmi_class = wmi.GetObject(\"winmgmts:Win32_ComputerSystem\")\n        self.assert_(wmi._wmi_class(None, wmi_class)._namespace)\n    def test_query(self):\n        self.assertEquals(\n            set(self.connection.Win32_ComputerSystem.query()),\n            set(self.connection.query(\"SELECT * FROM Win32_ComputerSystem\"))",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestWatcher",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestWatcher(TestWMI):\n    def new_letter(self):\n        return \\\n            set(\"%s:\" % chr(i) for i in range(ord('A'), 1 + ord('Z'))).\\\n            difference(d.DeviceID for d in self.connection.Win32_LogicalDisk()).\\\n            pop()\n    @staticmethod\n    def create(new_letter):\n        #~ print(\"about to create drive with letter\", new_letter)\n        here = os.path.dirname(os.path.abspath(__file__))",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestMethods",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestMethods(TestWMI):\n    def test_exists(self):\n        \"Check that a well-known method is available by attribute\"\n        self.assert_(self.connection.Win32_Process.Create)\n    def test_params(self):\n        \"Check that the names and arrayness of params are picked up when not arrays\"\n        self.assertEquals(\n            [(n, False) for n in [\"CommandLine\", \"CurrentDirectory\", \"ProcessStartupInformation\"]],\n            self.connection.Win32_Process.Create.in_parameter_names\n        )",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestProperties",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestProperties(TestWMI):\n    def test_access(self):\n        \"Check that all properties are available as attributes\"\n        for d in self.logical_disks:\n            break\n        for p in d.ole_object.Properties_:\n            self.assertEqual(p.Value, getattr(d, p.Name))\n    def test_attribute_passthrough(self):\n        \"Check that unknown attributes are passed through to the underlying object\"\n        for d in self.logical_disks:",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestInstances",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestInstances(TestWMI):\n    def test_hashable(self):\n        \"Ensure instances are hashable so can be used in a set/dict\"\n        self.assert_(dict.fromkeys(self.logical_disks))\n    def test_equalable(self):\n        \"Ensure instances compare equal\"\n        self.assertEqual(self.logical_disks, self.logical_disks)\n    def test_not_equal_to_anything_else(self):\n        \"Ensure WMI instances are not equal to non-WMI instances\"\n        for d in self.logical_disks:",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestInstanceCreation",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestInstanceCreation(TestWMI):\n    def test_create_instance(self):\n        self.assert_(isinstance(self.connection.Win32_ProcessStartup.new(ShowWindow=2), wmi._wmi_object))\nclass TestAssociations(TestWMI):\n    def test_all_properties_available(self):\n        #\n        # An association can contain not only the associated\n        # classes but also extra information as well. Ensure\n        # that both types of data are correctly handled.\n        #",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "TestAssociations",
        "kind": 6,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "class TestAssociations(TestWMI):\n    def test_all_properties_available(self):\n        #\n        # An association can contain not only the associated\n        # classes but also extra information as well. Ensure\n        # that both types of data are correctly handled.\n        #\n        for q in self.connection.Win32_DiskQuota():\n            for p in q.properties:\n                try:",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "ini",
        "kind": 5,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "ini = ConfigParser.SafeConfigParser()\nini.read([\"wmitest.master.ini\", \"wmitest.ini\"])\nsettings = {}\nif ini.has_section(\"settings\"):\n    settings.update(ini.items(\"settings\"))\nexcludes = [i.strip() for i in settings.get(\"excludes\", \"\").split(\",\")]\nCOMPUTERS = [None, \".\"]\nif \"machine\" in settings:\n    COMPUTERS.append(settings['machine'])\nIMPERSONATION_LEVELS = [None, \"identify\", \"impersonate\", \"delegate\"]",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "settings = {}\nif ini.has_section(\"settings\"):\n    settings.update(ini.items(\"settings\"))\nexcludes = [i.strip() for i in settings.get(\"excludes\", \"\").split(\",\")]\nCOMPUTERS = [None, \".\"]\nif \"machine\" in settings:\n    COMPUTERS.append(settings['machine'])\nIMPERSONATION_LEVELS = [None, \"identify\", \"impersonate\", \"delegate\"]\nAUTHENTICATION_LEVELS = [None, \"default\", \"none\", \"connect\", \"call\", \"pkt\", \"pktintegrity\", \"pktprivacy\"]\nAUTHORITIES = [None]",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "excludes",
        "kind": 5,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "excludes = [i.strip() for i in settings.get(\"excludes\", \"\").split(\",\")]\nCOMPUTERS = [None, \".\"]\nif \"machine\" in settings:\n    COMPUTERS.append(settings['machine'])\nIMPERSONATION_LEVELS = [None, \"identify\", \"impersonate\", \"delegate\"]\nAUTHENTICATION_LEVELS = [None, \"default\", \"none\", \"connect\", \"call\", \"pkt\", \"pktintegrity\", \"pktprivacy\"]\nAUTHORITIES = [None]\nif set([\"domain\", \"machine\"]) <= set(settings):\n    #~ AUTHORITIES.append(\"kerberos:%s\" % settings['domain'])\n    AUTHORITIES.append(\"ntlmdomain:%s\" % settings['domain'])",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "COMPUTERS",
        "kind": 5,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "COMPUTERS = [None, \".\"]\nif \"machine\" in settings:\n    COMPUTERS.append(settings['machine'])\nIMPERSONATION_LEVELS = [None, \"identify\", \"impersonate\", \"delegate\"]\nAUTHENTICATION_LEVELS = [None, \"default\", \"none\", \"connect\", \"call\", \"pkt\", \"pktintegrity\", \"pktprivacy\"]\nAUTHORITIES = [None]\nif set([\"domain\", \"machine\"]) <= set(settings):\n    #~ AUTHORITIES.append(\"kerberos:%s\" % settings['domain'])\n    AUTHORITIES.append(\"ntlmdomain:%s\" % settings['domain'])\nPRIVILEGES = [None, ['security', '!shutdown']]",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "IMPERSONATION_LEVELS",
        "kind": 5,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "IMPERSONATION_LEVELS = [None, \"identify\", \"impersonate\", \"delegate\"]\nAUTHENTICATION_LEVELS = [None, \"default\", \"none\", \"connect\", \"call\", \"pkt\", \"pktintegrity\", \"pktprivacy\"]\nAUTHORITIES = [None]\nif set([\"domain\", \"machine\"]) <= set(settings):\n    #~ AUTHORITIES.append(\"kerberos:%s\" % settings['domain'])\n    AUTHORITIES.append(\"ntlmdomain:%s\" % settings['domain'])\nPRIVILEGES = [None, ['security', '!shutdown']]\nNAMESPACES = [None, \"root/cimv2\", \"default\"]\nclass TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_LEVELS",
        "kind": 5,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "AUTHENTICATION_LEVELS = [None, \"default\", \"none\", \"connect\", \"call\", \"pkt\", \"pktintegrity\", \"pktprivacy\"]\nAUTHORITIES = [None]\nif set([\"domain\", \"machine\"]) <= set(settings):\n    #~ AUTHORITIES.append(\"kerberos:%s\" % settings['domain'])\n    AUTHORITIES.append(\"ntlmdomain:%s\" % settings['domain'])\nPRIVILEGES = [None, ['security', '!shutdown']]\nNAMESPACES = [None, \"root/cimv2\", \"default\"]\nclass TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):\n        \"Check that a standard connection works\"",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "AUTHORITIES",
        "kind": 5,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "AUTHORITIES = [None]\nif set([\"domain\", \"machine\"]) <= set(settings):\n    #~ AUTHORITIES.append(\"kerberos:%s\" % settings['domain'])\n    AUTHORITIES.append(\"ntlmdomain:%s\" % settings['domain'])\nPRIVILEGES = [None, ['security', '!shutdown']]\nNAMESPACES = [None, \"root/cimv2\", \"default\"]\nclass TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):\n        \"Check that a standard connection works\"\n        self.assert_(wmi.WMI())",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "PRIVILEGES",
        "kind": 5,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "PRIVILEGES = [None, ['security', '!shutdown']]\nNAMESPACES = [None, \"root/cimv2\", \"default\"]\nclass TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):\n        \"Check that a standard connection works\"\n        self.assert_(wmi.WMI())\n    def test_remote_connection(self):\n        \"Check that a remote connection works, if specified\"\n        if \"machine\" in settings:\n            self.assert_(wmi.WMI(settings['machine']))",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "NAMESPACES",
        "kind": 5,
        "importPath": "venv.Scripts.wmitest",
        "description": "venv.Scripts.wmitest",
        "peekOfCode": "NAMESPACES = [None, \"root/cimv2\", \"default\"]\nclass TestBasicConnections(unittest.TestCase):\n    def test_basic_connection(self):\n        \"Check that a standard connection works\"\n        self.assert_(wmi.WMI())\n    def test_remote_connection(self):\n        \"Check that a remote connection works, if specified\"\n        if \"machine\" in settings:\n            self.assert_(wmi.WMI(settings['machine']))\n        else:",
        "detail": "venv.Scripts.wmitest",
        "documentation": {}
    },
    {
        "label": "link",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def link(text, computer, namespace=None, wmi_class=None):\n    link = '<a href=\"/' + quote(computer)\n    if namespace:\n        link += \"/\" + quote(namespace)\n    if wmi_class:\n        link += \"/\" + quote(wmi_class)\n    return link + '\">' + escape(text) + '</a>'\ndef start_doc(title):\n    doc[:] = []\n    doc.append(\"\"\"",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "start_doc",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def start_doc(title):\n    doc[:] = []\n    doc.append(\"\"\"\n    <html>\n    <head>\n    <title>%(title)s</title>\n    <style>\n    body {font-family : Verdana, sans-serif; font-size : 84%%; margin : 3em;}\n    table.items {padding-left : 30px;}\n    li, td {font-family : \"Courier New\", monospace;}",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "finish_doc",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def finish_doc():\n    doc.append(\"\"\"\n    </body>\n    </html>\n    \"\"\" % locals())\ndef doc_table(items, n_cols=3, callback=None):\n    n_rows, n_spare_cols = divmod(len(items), n_cols)\n    doc.append('<table cellspacing=0 class=\"items\">')\n    for n_row in range(n_rows):\n        doc.append(\"<tr>\")",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "doc_table",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def doc_table(items, n_cols=3, callback=None):\n    n_rows, n_spare_cols = divmod(len(items), n_cols)\n    doc.append('<table cellspacing=0 class=\"items\">')\n    for n_row in range(n_rows):\n        doc.append(\"<tr>\")\n        for n_col in range(n_cols):\n            item = items[n_cols * n_col + n_row]\n            if callback:\n                item = callback(item)\n            doc.append(\"<td><li>%s</li></td>\" % item)",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "doc_breadcrumbs",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def doc_breadcrumbs(computer, namespace, wmi_class=None):\n    doc.append('<p class=\"breadcrumbs\">')\n    doc.append('%s &rarr; %s' % (link(computer, computer), link(namespace, computer, namespace)))\n    if wmi_class:\n        doc.append(' &rarr; %s' % (link(wmi_class, computer, namespace, wmi_class)))\n    doc.append('</p>')\ndef doc_wmi_class(computer, namespace, wmi_class, wmi_connection):\n    start_doc(\"WMI: Class %(wmi_class)s in namespace %(namespace)s on %(computer)s\" % locals())\n    doc_breadcrumbs(computer, namespace, wmi_class)\n    doc.append(\"<h2>%(wmi_class)s</h2>\" % locals())",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "doc_wmi_class",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def doc_wmi_class(computer, namespace, wmi_class, wmi_connection):\n    start_doc(\"WMI: Class %(wmi_class)s in namespace %(namespace)s on %(computer)s\" % locals())\n    doc_breadcrumbs(computer, namespace, wmi_class)\n    doc.append(\"<h2>%(wmi_class)s</h2>\" % locals())\n    klass = getattr(wmi_connection, wmi_class)\n    def property_callback(property_name):\n        property = klass.wmi_property(property_name)\n        mapping = property.qualifiers.get(\"MappingStrings\")\n        if mapping is None:\n            return property_name",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "doc_namespace",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def doc_namespace(computer, namespace, wmi_connection):\n    start_doc(\"WMI: Namespace %(namespace)s on %(computer)s\" % locals())\n    doc_breadcrumbs(computer, namespace)\n    namespaces = namespace.split(\"\\\\\")\n    namespace_links = []\n    for i, n in enumerate(namespaces):\n        namespace_links.append(link(n, computer, \"\\\\\".join(namespaces[:i+1])))\n    doc.append(\"<h2>%s</h2>\" % \"\\\\\".join(namespace_links))\n    doc.append(\"<hr>\")\n    subnamespaces = sorted(wmi_connection.__NAMESPACE())",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "handle_namespace",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def handle_namespace(environ, computer, namespace):\n    if not namespace:\n        wmi_connection = wmi.WMI(computer, namespace=\"root/cimv2\")\n        for setting in wmi_connection.Win32_WMISetting():\n            namespace=setting.ASPScriptDefaultNamespace\n            break\n    wmi_connection = wmi.WMI(computer, namespace=namespace, find_classes=True)\n    wmi_class = shift_path_info(environ)\n    if wmi_class:\n        doc_wmi_class(computer, namespace, wmi_class, wmi_connection)",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "handle_computer",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def handle_computer(environ, computer):\n    handle_namespace(environ, computer, shift_path_info(environ))\ndef app(environ, start_response):\n    computer = shift_path_info(environ)\n    if computer == \"favicon.ico\":\n        start_response(\"404 Not Found\", [(\"Content-Type\", \"text/plain\")])\n        return []\n    elif computer:\n        start_response(\"200 OK\", [(\"Content-Type\", \"text/html; charset=utf-8\")])\n        handle_computer(environ, computer)",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def app(environ, start_response):\n    computer = shift_path_info(environ)\n    if computer == \"favicon.ico\":\n        start_response(\"404 Not Found\", [(\"Content-Type\", \"text/plain\")])\n        return []\n    elif computer:\n        start_response(\"200 OK\", [(\"Content-Type\", \"text/html; charset=utf-8\")])\n        handle_computer(environ, computer)\n        return(unicode(d).encode(\"utf8\") + unicode(\"\\n\").encode(\"utf8\") for d in doc)\n    else:",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "run_browser",
        "kind": 2,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "def run_browser():\n    import os\n    os.startfile(\"http://localhost:%d\" % PORT)\nif __name__ == '__main__':\n    threading.Timer(3.0, run_browser).start()\n    httpd = make_server('', PORT, app)\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:\n        print(\"Shutting down gracefully...\")",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "doc",
        "kind": 5,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "doc = []\ndef link(text, computer, namespace=None, wmi_class=None):\n    link = '<a href=\"/' + quote(computer)\n    if namespace:\n        link += \"/\" + quote(namespace)\n    if wmi_class:\n        link += \"/\" + quote(wmi_class)\n    return link + '\">' + escape(text) + '</a>'\ndef start_doc(title):\n    doc[:] = []",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "venv.Scripts.wmiweb",
        "description": "venv.Scripts.wmiweb",
        "peekOfCode": "PORT = 8010\ndef run_browser():\n    import os\n    os.startfile(\"http://localhost:%d\" % PORT)\nif __name__ == '__main__':\n    threading.Timer(3.0, run_browser).start()\n    httpd = make_server('', PORT, app)\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:",
        "detail": "venv.Scripts.wmiweb",
        "documentation": {}
    },
    {
        "label": "find_python_files",
        "kind": 2,
        "importPath": "analyze_dependencies",
        "description": "analyze_dependencies",
        "peekOfCode": "def find_python_files(directory):\n    \"\"\"Найти все Python файлы в указанной директории рекурсивно\"\"\"\n    python_files = []\n    for root, dirs, files in os.walk(directory):\n        # Исключаем venv и __pycache__\n        if \"/venv/\" in root or \"\\\\venv\\\\\" in root or \"__pycache__\" in root:\n            continue\n        for file in files:\n            if file.endswith(\".py\"):\n                python_files.append(os.path.join(root, file))",
        "detail": "analyze_dependencies",
        "documentation": {}
    },
    {
        "label": "parse_imports",
        "kind": 2,
        "importPath": "analyze_dependencies",
        "description": "analyze_dependencies",
        "peekOfCode": "def parse_imports(file_path):\n    \"\"\"Извлечь все импорты из Python файла\"\"\"\n    imports = []\n    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n        try:\n            content = file.read()\n            # Регулярные выражения для поиска импортов\n            import_patterns = [\n                r\"^\\s*import\\s+([\\w\\.]+)(?:\\s+as\\s+\\w+)?\",\n                r\"^\\s*from\\s+([\\w\\.]+)\\s+import\\s+.+\",",
        "detail": "analyze_dependencies",
        "documentation": {}
    },
    {
        "label": "analyze_dependencies",
        "kind": 2,
        "importPath": "analyze_dependencies",
        "description": "analyze_dependencies",
        "peekOfCode": "def analyze_dependencies(project_root):\n    \"\"\"Анализ зависимостей в проекте\"\"\"\n    python_files = find_python_files(project_root)\n    # Карта \"файл -> его импорты\"\n    file_imports = {}\n    # Карта \"модуль -> файлы, которые его импортируют\"\n    module_dependents = defaultdict(list)\n    for file_path in python_files:\n        rel_path = os.path.relpath(file_path, project_root)\n        imports = parse_imports(file_path)",
        "detail": "analyze_dependencies",
        "documentation": {}
    },
    {
        "label": "find_unused_modules",
        "kind": 2,
        "importPath": "analyze_dependencies",
        "description": "analyze_dependencies",
        "peekOfCode": "def find_unused_modules(file_imports, module_dependents, project_root):\n    \"\"\"Найти неиспользуемые модули\"\"\"\n    python_files = find_python_files(project_root)\n    # Создаем множество всех модулей проекта\n    all_modules = set()\n    for file_path in python_files:\n        rel_path = os.path.relpath(file_path, project_root)\n        # Преобразуем путь к файлу в имя модуля\n        if rel_path.endswith(\"__init__.py\"):\n            module_name = os.path.dirname(rel_path).replace(\"/\", \".\").replace(\"\\\\\", \".\")",
        "detail": "analyze_dependencies",
        "documentation": {}
    },
    {
        "label": "find_duplicated_functionality",
        "kind": 2,
        "importPath": "analyze_dependencies",
        "description": "analyze_dependencies",
        "peekOfCode": "def find_duplicated_functionality(project_root):\n    \"\"\"Поиск потенциально дублирующей функциональности по именам файлов\"\"\"\n    potential_duplicates = []\n    file_paths = find_python_files(project_root)\n    # Группируем файлы по их базовым именам\n    file_groups = defaultdict(list)\n    for file_path in file_paths:\n        base_name = os.path.basename(file_path).lower()\n        if base_name != \"__init__.py\":\n            file_groups[base_name].append(file_path)",
        "detail": "analyze_dependencies",
        "documentation": {}
    },
    {
        "label": "ai_models_page",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def ai_models_page():\n    \"\"\"Страница управления нейросетями\"\"\"\n    return render_template(\"ai_models.html\")\ndef init_app():\n    \"\"\"Инициализация приложения\"\"\"\n    global command_interrupt_flag\n    # Инициализация системы логирования\n    from utils.logging_utils import init_logging_system\n    init_logging_system()\n    # Регистрация маршрутов",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "init_app",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def init_app():\n    \"\"\"Инициализация приложения\"\"\"\n    global command_interrupt_flag\n    # Инициализация системы логирования\n    from utils.logging_utils import init_logging_system\n    init_logging_system()\n    # Регистрация маршрутов\n    app.register_blueprint(main_bp)\n    app.register_blueprint(api_bp, url_prefix=\"/api\")\n    # Настройка логирования",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "run_app",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def run_app():\n    \"\"\"Запускает приложение Flask\"\"\"\n    init_app()\n    app.run(debug=True)\nif __name__ == \"__main__\":\n    run_app()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "command_interrupt_flag",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "command_interrupt_flag = False\n# Создание приложения Flask\napp = Flask(__name__)\n@app.route(\"/ai_models\")\ndef ai_models_page():\n    \"\"\"Страница управления нейросетями\"\"\"\n    return render_template(\"ai_models.html\")\ndef init_app():\n    \"\"\"Инициализация приложения\"\"\"\n    global command_interrupt_flag",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ai_models\")\ndef ai_models_page():\n    \"\"\"Страница управления нейросетями\"\"\"\n    return render_template(\"ai_models.html\")\ndef init_app():\n    \"\"\"Инициализация приложения\"\"\"\n    global command_interrupt_flag\n    # Инициализация системы логирования\n    from utils.logging_utils import init_logging_system",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "finder",
        "kind": 5,
        "importPath": "check_element_finder",
        "description": "check_element_finder",
        "peekOfCode": "finder = ElementFinder(None)\nprint(\"Методы класса:\", [m for m in dir(finder) if not m.startswith(\"_\")])\nprint(\"Есть ли find_elements_by_tag:\", hasattr(finder, \"find_elements_by_tag\"))",
        "detail": "check_element_finder",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    \"\"\"Конфигурация приложения\"\"\"\n    # Основные настройки Flask\n    SECRET_KEY = os.getenv(\"SECRET_KEY\", \"default-secret-key\")\n    DEBUG = os.getenv(\"DEBUG\", \"True\").lower() == \"true\"\n    HOST = os.getenv(\"HOST\", \"127.0.0.1\")\n    PORT = int(os.getenv(\"PORT\", 5000))\n    # Настройки логирования\n    LOGS_DIR = \"logs\"  # Директория для хранения логов\n    SUMMARY_LOG_FILE = os.path.join(",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "command_interrupt_flag",
        "kind": 5,
        "importPath": "globals",
        "description": "globals",
        "peekOfCode": "command_interrupt_flag = False",
        "detail": "globals",
        "documentation": {}
    }
]