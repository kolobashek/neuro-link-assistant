import os
import signal
import subprocess
import time
from typing import Optional

import psutil
import requests


class AppManager:
    def __init__(self, app_url="http://localhost:5000", timeout=45):  # –£–≤–µ–ª–∏—á–∏–ª–∏ timeout
        self.app_url = app_url
        self.timeout = timeout
        self.process: Optional[subprocess.Popen] = None

    def start_app(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∂–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
        print(f"üîç [APP] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")

        # –°–ù–ê–ß–ê–õ–ê –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ
        if self.is_app_running():
            print(f"‚úÖ [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ {self.app_url}")
            return True

        print(f"üöÄ [APP] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 5000 –µ—Å–ª–∏ –µ—Å—Ç—å
        self._kill_port_processes(5000)

        try:
            # –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
            startup_info = None
            if os.name == "nt":  # Windows
                startup_info = subprocess.STARTUPINFO()
                startup_info.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                startup_info.wShowWindow = subprocess.SW_HIDE

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            self.process = subprocess.Popen(
                ["poetry", "run", "python", "app.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                startupinfo=startup_info,
                encoding="utf-8",  # –î–û–ë–ê–í–õ–Ø–ï–ú —è–≤–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
                errors="replace",  # –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if os.name == "nt" else 0,
            )

            print(f"‚è≥ [APP] –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–æ {self.timeout}—Å)...")

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            for i in range(self.timeout * 2):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                if self.is_app_running():
                    print(f"‚úÖ [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –Ω–∞ {self.app_url} (–∑–∞ {(i+1)*0.5:.1f}—Å)")
                    return True
                time.sleep(0.5)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 1 –¥–æ 0.5 —Å–µ–∫—É–Ω–¥—ã

            print(f"‚ùå [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∑–∞ {self.timeout}—Å")
            self.stop_app()
            return False

        except Exception as e:
            print(f"‚ùå [APP] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False

    def stop_app(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        print(f"üõë [APP] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å
        if self.process:
            try:
                if os.name == "nt":  # Windows
                    self.process.send_signal(signal.CTRL_BREAK_EVENT)
                else:  # Unix
                    self.process.terminate()

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    self.process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    print(f"‚ö†Ô∏è [APP] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
                    self.process.kill()
                    self.process.wait(timeout=3)

                print(f"‚úÖ [APP] –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è [APP] –ü—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É
        self._kill_port_processes(5000)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        time.sleep(2)
        if not self.is_app_running():
            print(f"‚úÖ [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ö†Ô∏è [APP] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –æ—Ç–≤–µ—á–∞–µ—Ç")

    def is_app_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±—ã—Å—Ç—Ä–æ)"""
        try:
            response = requests.get(self.app_url, timeout=1)  # –£–º–µ–Ω—å—à–∏–ª–∏ timeout —Å 3 –¥–æ 1
            return response.status_code == 200
        except:
            return False

    def health_check(self) -> bool:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±—ã—Å—Ç—Ä–æ)"""
        try:
            response = requests.get(f"{self.app_url}/", timeout=2)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 5 –¥–æ 2
            return 200 <= response.status_code < 500
        except:
            return False

    def _kill_port_processes(self, port: int):
        """–£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
        killed_count = 0
        try:
            for proc in psutil.process_iter(["pid", "name", "connections"]):
                try:
                    for conn in proc.info["connections"] or []:
                        if conn.laddr.port == port:
                            print(
                                f"üî™ [APP] –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {proc.info['name']} (PID:"
                                f" {proc.info['pid']})"
                            )
                            psutil.Process(proc.info["pid"]).terminate()
                            killed_count += 1
                            break
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
        except Exception as e:
            print(f"‚ö†Ô∏è [APP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ—Ä—Ç–∞ {port}: {e}")

        if killed_count > 0:
            print(f"üî™ [APP] –ó–∞–≤–µ—Ä—à–µ–Ω–æ {killed_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    def _debug_process_output(self):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        if self.process:
            try:
                stdout, stderr = self.process.communicate(timeout=1)
                if stdout:
                    print(f"üì§ [APP] STDOUT: {stdout.decode('utf-8', errors='ignore')}")
                if stderr:
                    print(f"üì§ [APP] STDERR: {stderr.decode('utf-8', errors='ignore')}")
            except subprocess.TimeoutExpired:
                print(f"‚ö†Ô∏è [APP] –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            except Exception as e:
                print(f"‚ö†Ô∏è [APP] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
