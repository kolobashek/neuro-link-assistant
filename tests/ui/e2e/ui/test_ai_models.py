import time

import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait


class TestAIModels:
    @pytest.fixture(scope="function")
    def driver(self):
        driver = webdriver.Chrome()
        driver.maximize_window()
        yield driver
        driver.quit()

    def test_ai_models_container_elements(self, driver):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π –ò–ò"""
        driver.get("http://localhost:5000")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π –ò–ò
        models_container = driver.find_element(By.CLASS_NAME, "ai-models-container")
        assert models_container is not None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        models_header = models_container.find_element(By.CLASS_NAME, "section-header")
        assert "–ú–æ–¥–µ–ª–∏ –ò–ò" in models_header.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        models_list = models_container.find_element(By.CLASS_NAME, "ai-models-list")
        assert models_list is not None

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        model_items_static = models_list.find_elements(By.CSS_SELECTOR, "div.ai-model-item")

        if len(model_items_static) > 0:
            # –ï—Å—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            model_items = model_items_static
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ ai-model-item: {len(model_items)}")
        else:
            # –ù–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö - –∂–¥–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ai-model-item...")
            wait = WebDriverWait(driver, 10)

            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                wait.until(EC.presence_of_element_located((By.CLASS_NAME, "ai-model-item")))
                model_items = models_list.find_elements(By.CLASS_NAME, "ai-model-item")
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ ai-model-item: {len(model_items)}")
            except Exception as e:
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ai-model-item: {e}")
                print(f"üîç HTML models_list: {models_list.get_attribute('innerHTML')[:500]}...")
                model_items = []

        assert len(model_items) > 0, f"–û–∂–∏–¥–∞–ª–∏—Å—å ai-model-item —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–∞–π–¥–µ–Ω–æ {len(model_items)}"

    def test_model_item_structure(self, driver):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –º–æ–¥–µ–ª–∏"""
        driver.get("http://localhost:5000")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        model_item = driver.find_element(By.CLASS_NAME, "ai-model-item")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ model-info
        model_info = model_item.find_element(By.CLASS_NAME, "model-info")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        model_name = model_info.find_element(By.CLASS_NAME, "model-name")
        assert model_name.text != ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏
        model_status = model_info.find_element(By.CLASS_NAME, "model-status")
        assert model_status is not None

        print(f"‚úÖ –ú–æ–¥–µ–ª—å: {model_name.text}, –°—Ç–∞—Ç—É—Å: {model_status.text}")

    def test_model_status_indicator(self, driver):
        """–¢–µ—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏"""
        driver.get("http://localhost:5000")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Å—Ç–∞—Ç—É—Å–∞–º
        model_statuses = driver.find_elements(By.CSS_SELECTOR, ".ai-model-item .model-status")

        assert len(model_statuses) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–æ–¥–µ–ª–µ–π"

        for status in model_statuses:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å –∫–ª–∞—Å—Å —Å—Ç–∞—Ç—É—Å–∞
            parent_item = status.find_element(By.XPATH, "../..")  # ai-model-item
            status_classes = parent_item.get_attribute("class")

            print(f"üîç –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: '{status.text}', –∫–ª–∞—Å—Å—ã: '{status_classes}'")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞—Å—Å–æ–≤
            status_text = status.text.lower()
            if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in status_text:
                assert "unavailable" in status_classes or "offline" in status_classes
            elif "–¥–æ—Å—Ç—É–ø–Ω–∞" in status_text:
                assert "available" in status_classes or "online" in status_classes

    def test_refresh_models_button(self, driver):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π"""
        driver.get("http://localhost:5000")

        # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_button = driver.find_element(By.ID, "check-ai-models-btn")
        assert refresh_button is not None

        # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
        refresh_button.click()

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        time.sleep(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å—ã –º–æ–¥–µ–ª–µ–π –µ—Å—Ç—å
        model_statuses = driver.find_elements(By.CSS_SELECTOR, ".ai-model-item .model-status")
        assert len(model_statuses) > 0
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(model_statuses)}")

    def test_model_selection(self, driver):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        driver.get("http://localhost:5000")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—â–µ–º ai-model-item —ç–ª–µ–º–µ–Ω—Ç—ã
        model_items = driver.find_elements(By.CLASS_NAME, "ai-model-item")
        assert len(model_items) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π"

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        available_models = []
        for model in model_items:
            classes = model.get_attribute("class")
            if "available" in classes or "online" in classes:
                available_models.append(model)

        if available_models:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            model_to_select = available_models[0]
            model_to_select.click()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞
            updated_classes = model_to_select.get_attribute("class")
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞, –∫–ª–∞—Å—Å—ã: {updated_classes}")

            # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª–∞—Å—Å selected –∏–ª–∏ active
            assert any(cls in updated_classes for cls in ["selected", "active"])
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞")
